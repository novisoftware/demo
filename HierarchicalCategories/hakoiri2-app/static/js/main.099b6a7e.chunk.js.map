{"version":3,"sources":["components/PuzzlePiece.tsx","components/Board.tsx","components/Header.tsx","App.tsx","index.tsx"],"names":["PuzzlePiece","_ref","position","size","label","isActive","onDragStart","onClick","onTouchStart","onTouchMove","onTouchEnd","isVertical","fontSize","width","height","length","_jsx","className","concat","style","gridColumn","x","gridRow","y","display","justifyContent","alignItems","writingMode","border","backgroundColor","color","cursor","draggable","children","initialPieces","id","Board","pieces","setPieces","useState","hoverPosition","setHoverPosition","draggedPiece","setDraggedPiece","dragStartPosition","setDragStartPosition","touchStartPosition","setTouchStartPosition","handleTouchMove","event","preventDefault","touch","touches","deltaX","clientX","deltaY","clientY","newX","Math","floor","newY","correctedX","min","max","correctedY","handleTouchEnd","some","piece","prevPieces","map","_jsxs","gridTemplateColumns","gridTemplateRows","margin","onDrop","droppedPiece","JSON","parse","dataTransfer","getData","targetX","targetY","isOverlap","isOutOfBounds","BOARD_WIDTH","BOARD_HEIGHT","console","log","_objectSpread","onDragOver","X","Y","relativeX","relativeY","rect","currentTarget","getBoundingClientRect","hoverX","hoverY","index","setData","stringify","startX","startY","handleTouchStart","borderRadius","bottom","left","transform","Header","href","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"wLAuEeA,MAxDiCC,IACC,IADA,SAAEC,EAAQ,KAAEC,EAAI,MAAEC,EAAK,SAAEC,EAAQ,YAAEC,EAAW,QAAEC,EAAO,aACpGC,EAAY,YAAEC,EAAW,WAAEC,GAAYT,EACnCU,GAAa,EACbC,EAAW,OAuBf,OAtBmB,IAAfT,EAAKU,OAA+B,IAAhBV,EAAKW,OACL,GAAhBV,EAAMW,QACNH,EAAW,SACXD,GAAa,IAGbC,EAAW,SACXD,GAAa,GAGbR,EAAKW,QAAUX,EAAKU,MACpBD,EAAW,OACJT,EAAKW,OAASX,EAAKU,OAC1BD,EAAW,MACXD,GAAa,IAGbC,EAAW,OACXD,GAAa,GAKjBK,cAAA,OACIC,UAAS,gBAAAC,OAAkBb,EAAW,SAAW,IACjDc,MAAO,CACHC,WAAW,GAADF,OAAKhB,EAASmB,EAAC,YAAAH,OAAWf,EAAKU,OACzCS,QAAQ,GAADJ,OAAKhB,EAASqB,EAAC,YAAAL,OAAWf,EAAKW,QACtCU,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,YAAahB,EAAa,cAAgB,gBAC1CiB,OAAQ,oBACRC,gBAAiB,UACjBC,MAAO,OACPlB,SAAUA,EACVmB,OAAQ,OACRlB,MAAO,OACPC,OAAQ,QAEZkB,UAAU,OACV1B,YAAaA,EACbC,QAASA,EACTC,aAAcA,EACdC,YAAaA,EACbC,WAAYA,EAAWuB,SAEtB7B,KC7Cb,MAGM8B,EAA6B,CAC/B,CAAEC,GAAI,EAAG/B,MAAO,SAAKD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,IACzE,CAAEY,GAAI,EAAG/B,MAAO,SAAKD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,IACzE,CAAEY,GAAI,EAAG/B,MAAO,SAAKD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,IACzE,CAAEY,GAAI,EAAG/B,MAAO,eAAMD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,IAC1E,CAAEY,GAAI,EAAG/B,MAAO,eAAMD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,IAC1E,CAAEY,GAAI,EAAG/B,MAAO,qBAAOD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,IAC3E,CAAEY,GAAI,EAAG/B,MAAO,eAAMD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,IAC1E,CAAEY,GAAI,EAAG/B,MAAO,eAAMD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,IAC1E,CAAEY,GAAI,EAAG/B,MAAO,eAAMD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,IAC1E,CAAEY,GAAI,GAAI/B,MAAO,eAAMD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,IAC3E,CAAEY,GAAI,GAAI/B,MAAO,eAAMD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,IAC3E,CAAEY,GAAI,GAAI/B,MAAO,eAAMD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,IAC3E,CAAEY,GAAI,GAAI/B,MAAO,eAAMD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,IAC3E,CAAEY,GAAI,GAAI/B,MAAO,eAAMD,KAAM,CAAEU,MAAO,EAAGC,OAAQ,GAAKZ,SAAU,CAAEmB,EAAG,EAAGE,EAAG,KA6MhEa,MA1MSA,KACpB,MAAOC,EAAQC,GAAaC,mBAAsBL,IAC3CM,EAAeC,GAAoBF,mBAA0C,OAC7EG,EAAcC,GAAmBJ,mBAA2B,OAC5DK,EAAmBC,GAAwBN,mBAA0C,OACrFO,EAAoBC,GAAyBR,mBAA0C,MAQxFS,EAAmBC,IAErB,GADAA,EAAMC,kBACDR,IAAiBI,EAAoB,OAE1C,MAAMK,EAAQF,EAAMG,QAAQ,GACtBC,EAASF,EAAMG,QAAUR,EAAmBzB,EAC5CkC,EAASJ,EAAMK,QAAUV,EAAmBvB,EAE5CkC,EAAOC,KAAKC,MAAMjB,EAAaxC,SAASmB,EAAIgC,EAAM,KAClDO,EAAOF,KAAKC,MAAMjB,EAAaxC,SAASqB,EAAIgC,EAAM,KAGlDM,EAAaH,KAAKI,IAAIJ,KAAKK,IAAIN,EAAM,GA7C/B,EA6CiDf,EAAavC,KAAKU,MAAQ,GACjFmD,EAAaN,KAAKI,IAAIJ,KAAKK,IAAIH,EAAM,GA7C9B,EA6CiDlB,EAAavC,KAAKW,OAAS,GAEzF2B,EAAiB,CAAEpB,EAAGwC,EAAYtC,EAAGyC,KAKnCC,EAAiBA,KACnB,IAAKvB,IAAiBF,EAAe,OAGnBH,EAAO6B,KAAMC,GAEvBA,EAAMhC,KAAOO,EAAaP,IAC1BK,EAAcnB,EAAI8C,EAAMjE,SAASmB,EAAI8C,EAAMhE,KAAKU,OAChD2B,EAAcnB,EAAIqB,EAAavC,KAAKU,MAAQsD,EAAMjE,SAASmB,GAC3DmB,EAAcjB,EAAI4C,EAAMjE,SAASqB,EAAI4C,EAAMhE,KAAKW,QAChD0B,EAAcjB,EAAImB,EAAavC,KAAKW,OAASqD,EAAMjE,SAASqB,IAKhEe,EAAW8B,GACPA,EAAWC,IAAKF,GACZA,EAAMhC,KAAOO,EAAaP,GAAKO,EAAeyB,IAI1DxB,EAAgB,MAChBI,EAAsB,OAiE1B,OACIuB,eAAA,OACInD,MAAO,CACHjB,SAAU,WACVW,MAAO,QACPC,OAAQ,QACRc,OAAQ,mBACRC,gBAAiB,OACjBL,QAAS,OACTC,eAAgB,SAChBC,WAAY,UACdO,SAAA,CAEFqC,eAAA,OACIrD,UAAU,QAEVE,MAAO,CACHK,QAAS,OACT+C,oBAAqB,iBACrBC,iBAAkB,iBAClB3D,MAAO,QACPC,OAAQ,QACRZ,SAAU,WACV2B,gBAAiB,QACjB4C,OAAQ,OAEZC,OA9DQzB,IAChBA,EAAMC,iBACN,MAAMyB,EAAeC,KAAKC,MAAM5B,EAAM6B,aAAaC,QAAQ,eACrDC,GAAuB,OAAbxC,QAAa,IAAbA,OAAa,EAAbA,EAAenB,IAAK,EAC9B4D,GAAuB,OAAbzC,QAAa,IAAbA,OAAa,EAAbA,EAAejB,IAAK,EAG9B2D,EAAY7C,EAAO6B,KAAMC,GAEvBA,EAAMhC,KAAOwC,EAAaxC,IAC1B6C,EAAUb,EAAMjE,SAASmB,EAAI8C,EAAMhE,KAAKU,OACxCmE,EAAUL,EAAaxE,KAAKU,MAAQsD,EAAMjE,SAASmB,GACnD4D,EAAUd,EAAMjE,SAASqB,EAAI4C,EAAMhE,KAAKW,QACxCmE,EAAUN,EAAaxE,KAAKW,OAASqD,EAAMjE,SAASqB,GAKtD4D,EAAgBH,EAAU,GAAKC,EAAU,GAAKD,EAAUL,EAAaxE,KAAKU,MAAQuE,GAAmBH,EAAUN,EAAaxE,KAAKW,OAASuE,EAE3IH,GAAcC,EASfG,QAAQC,IAAI,0JARZjD,EAAW8B,GACPA,EAAWC,IAAKF,GACZA,EAAMhC,KAAOwC,EAAaxC,GAAEqD,wBAAA,GACjBrB,GAAK,IAAEjE,SAAU,CAAEmB,EAAG2D,EAASzD,EAAG0D,KACvCd,IAOlB1B,EAAiB,MACjBE,EAAgB,OA8BR8C,WAxFYxC,IAEpB,GADAA,EAAMC,kBACDR,EAAc,OACnB,IAAKE,EAAmB,OAExB,MAAM8C,EAAIzC,EAAMK,QACVqC,EAAI1C,EAAMO,QACVoC,EAAYF,EAAI9C,EAAkBvB,EAClCwE,EAAYF,EAAI/C,EAAkBrB,EAIlCuE,EAAO7C,EAAM8C,cAAcC,wBACjC,IAAIC,EAASvC,KAAKC,MAAMiC,GAAa,EAAME,EAAKjF,MA5FpC,GA4F2D,IAAO6B,EAAaxC,SAASmB,EAChG6E,EAASxC,KAAKC,MAAMkC,GAAa,EAAMC,EAAKhF,OA5FnC,GA4F4D,IAAO4B,EAAaxC,SAASqB,EAGtG0E,EAASvC,KAAKK,IAAIkC,EAAQ,GAC1BC,EAASxC,KAAKK,IAAImC,EAAQ,GAC1BD,EAASvC,KAAKI,IAAIJ,KAAKK,IAAIkC,EAAQ,GAlGvB,EAkGyCvD,EAAavC,KAAKU,MAAQ,GAC/EqF,EAASxC,KAAKI,IAAIJ,KAAKK,IAAImC,EAAQ,GAlGtB,EAkGyCxD,EAAavC,KAAKW,OAAS,GAEjF2B,EAAiB,CAAEpB,EAAG4E,EAAQ1E,EAAG2E,KAkEEjE,SAAA,CAE1BI,EAAOgC,IAAI,CAACF,EAAOgC,IAChBnF,cAAChB,EAAW,CAERI,MAAO+D,EAAM/D,MACbD,KAAMgE,EAAMhE,KACZD,SAAUiE,EAAMjE,SAChBG,UAAU,EACVE,QAASA,IAAM+E,QAAQC,IAAI,GAADrE,OAAIiD,EAAM/D,MAAK,aACzCE,YAAc2C,IACVA,EAAM6B,aAAasB,QAAQ,aAAcxB,KAAKyB,UAAUlC,IACxDxB,EAAgBwB,GAEhB,MAAMmC,EAASrD,EAAMK,QACfiD,EAAStD,EAAMO,QACrB8B,QAAQC,IAAI,sBAADrE,OAAuBoF,EAAM,SAAApF,OAAQqF,IAChD1D,EAAqB,CAAExB,EAAGiF,EAAQ/E,EAAGgF,KAEzC/F,aAAeyC,GA/JVuD,EAACvD,EAAyCkB,KAC/D,MAAMhB,EAAQF,EAAMG,QAAQ,GAC5BT,EAAgBwB,GAChBpB,EAAsB,CAAE1B,EAAG8B,EAAMG,QAAS/B,EAAG4B,EAAMK,WA4JVgD,CAAiBvD,EAAOkB,GACjD1D,YAAauC,EACbtC,WAAYuD,GAjBPkC,IAoBZ3D,GAAiBE,GACd1B,cAAA,OACIG,MAAO,CACHC,WAAW,GAADF,OAAKsB,EAAcnB,EAAC,YAAAH,OAAWwB,EAAavC,KAAKU,OAC3DS,QAAQ,GAADJ,OAAKsB,EAAcjB,EAAC,YAAAL,OAAWwB,EAAavC,KAAKW,QACxDe,gBAAiB,2BACjBD,OAAQ,qCACR6E,aAAc,MACdvG,SAAU,WACVW,MAAO,OACPC,OAAQ,aAMxBE,cAAA,OACIG,MAAO,CACHjB,SAAU,WACVwG,OAAQ,QACRC,KAAM,MACNC,UAAW,mBACX/F,MAAO,QACPC,OAAQ,OACRe,gBAAiB,cCjOtBgF,MATUA,IAEjBvC,eAAA,UAAArC,SAAA,CACIjB,cAAA,MAAAiB,SAAI,6BACJqC,eAAA,KAAArC,SAAA,CAAG,4GAAyBjB,cAAA,KAAG8F,KAAK,mGAAkG7E,SAAC,6BAAQ,uC,KCQ5I8E,MATOA,IAEdzC,eAAA,OAAKrD,UAAU,MAAKgB,SAAA,CAChBjB,cAAC6F,EAAM,IACP7F,cAACoB,EAAK,OCJlB4E,IAASC,OACPjG,cAACkG,IAAMC,WAAU,CAAAlF,SACfjB,cAAC+F,EAAG,MAENK,SAASC,eAAe,Q","file":"static/js/main.099b6a7e.chunk.js","sourcesContent":["import React from 'react';\n\ninterface PuzzlePieceProps {\n    position: { x: number; y: number };\n    size: { width: number; height: number };\n    label: string;\n    isActive: boolean;\n    onDragStart: (event: React.DragEvent<HTMLDivElement>) => void;\n    onClick: () => void;\n    onTouchStart: (event: React.TouchEvent<HTMLDivElement>) => void;\n    onTouchMove: (event: React.TouchEvent<HTMLDivElement>) => void;\n    onTouchEnd: (event: React.TouchEvent<HTMLDivElement>) => void;\n}\n\n\nconst PuzzlePiece: React.FC<PuzzlePieceProps> = ({ position, size, label, isActive, onDragStart, onClick,\n    onTouchStart, onTouchMove, onTouchEnd }) => {\n    let isVertical = false;\n    let fontSize = '1rem';\n    if (size.width === 1 && size.height === 1) {\n        if (label.length == 1) {\n            fontSize = '1.5rem'; // 1文字の場合は大きく\n            isVertical = false; // 1文字の場合は縦書きも横書きもない\n        }\n        else {\n            fontSize = '1.2rem'; // 2文字以上の場合は通常サイズ\n            isVertical = true; // 2文字以上の場合は横書き\n        }\n    } else {\n        if (size.height == size.width) {\n            fontSize = '5rem'; // 大きく\n        } else if (size.height > size.width) {\n            fontSize = '2em'; // 大きく\n            isVertical = true; // 縦長の場合は縦書き\n        }\n        else {\n            fontSize = '2rem'; // 大きく\n            isVertical = false; // 横長の場合は横書き\n        }\n    }\n\n    return (\n        <div\n            className={`puzzle-piece ${isActive ? 'active' : ''}`}\n            style={{\n                gridColumn: `${position.x} / span ${size.width}`,\n                gridRow: `${position.y} / span ${size.height}`,\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                writingMode: isVertical ? 'vertical-rl' : 'horizontal-tb',\n                border: '1.5px solid black',\n                backgroundColor: '#f0f0f0',\n                color: '#000', // 文字色を黒に変更\n                fontSize: fontSize, // 文字サイズを調整\n                cursor: 'grab',\n                width: '100%', // グリッド内で幅を100%に設定\n                height: '100%', // グリッド内で高さを100%に設定\n            }}\n            draggable=\"true\"\n            onDragStart={onDragStart}\n            onClick={onClick}\n            onTouchStart={onTouchStart}\n            onTouchMove={onTouchMove}\n            onTouchEnd={onTouchEnd}\n        >\n            {label}\n        </div>\n    );\n};\n\nexport default PuzzlePiece;","import React, { useState } from 'react';\nimport PuzzlePiece from './PuzzlePiece';\n\ninterface PieceData {\n    id: number;\n    label: string;\n    size: {\n        width: number;\n        height: number;\n    };\n    position: {\n        x: number;\n        y: number;\n    };\n}\n\ninterface Position {\n    x: number;\n    y: number;\n}\n\nconst BOARD_WIDTH = 6; // グリッドの列数\nconst BOARD_HEIGHT = 5; // グリッドの行数\n\nconst initialPieces: PieceData[] = [\n    { id: 1, label: \"父\", size: { width: 1, height: 2 }, position: { x: 3, y: 1 } },\n    { id: 2, label: \"娘\", size: { width: 2, height: 2 }, position: { x: 4, y: 1 } },\n    { id: 3, label: \"母\", size: { width: 1, height: 2 }, position: { x: 6, y: 1 } },\n    { id: 4, label: \"丁稚\", size: { width: 1, height: 1 }, position: { x: 1, y: 3 } },\n    { id: 5, label: \"手代\", size: { width: 1, height: 1 }, position: { x: 2, y: 3 } },\n    { id: 6, label: \"大番頭\", size: { width: 4, height: 1 }, position: { x: 3, y: 3 } },\n    { id: 7, label: \"丁稚\", size: { width: 1, height: 1 }, position: { x: 1, y: 4 } },\n    { id: 8, label: \"番頭\", size: { width: 2, height: 1 }, position: { x: 2, y: 4 } },\n    { id: 9, label: \"女中\", size: { width: 2, height: 1 }, position: { x: 4, y: 4 } },\n    { id: 10, label: \"兄嫁\", size: { width: 1, height: 1 }, position: { x: 6, y: 4 } },\n    { id: 11, label: \"番犬\", size: { width: 1, height: 1 }, position: { x: 1, y: 5 } },\n    { id: 12, label: \"祖父\", size: { width: 2, height: 1 }, position: { x: 2, y: 5 } },\n    { id: 13, label: \"祖母\", size: { width: 2, height: 1 }, position: { x: 4, y: 5 } },\n    { id: 14, label: \"丁稚\", size: { width: 1, height: 1 }, position: { x: 6, y: 5 } },\n];\n\nconst Board: React.FC = () => {\n    const [pieces, setPieces] = useState<PieceData[]>(initialPieces);\n    const [hoverPosition, setHoverPosition] = useState<{ x: number; y: number } | null>(null);\n    const [draggedPiece, setDraggedPiece] = useState<PieceData | null>(null); // ドラッグ中のピースを保存\n    const [dragStartPosition, setDragStartPosition] = useState<{ x: number; y: number } | null>(null); // ドラッグ開始位置を保存\n    const [touchStartPosition, setTouchStartPosition] = useState<{ x: number; y: number } | null>(null);\n\n    const handleTouchStart = (event: React.TouchEvent<HTMLDivElement>, piece: PieceData) => {\n        const touch = event.touches[0];\n        setDraggedPiece(piece);\n        setTouchStartPosition({ x: touch.clientX, y: touch.clientY });\n    };\n\n    const handleTouchMove = (event: React.TouchEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        if (!draggedPiece || !touchStartPosition) return;\n\n        const touch = event.touches[0];\n        const deltaX = touch.clientX - touchStartPosition.x;\n        const deltaY = touch.clientY - touchStartPosition.y;\n\n        const newX = Math.floor(draggedPiece.position.x + deltaX / (600 / BOARD_WIDTH));\n        const newY = Math.floor(draggedPiece.position.y + deltaY / (500 / BOARD_HEIGHT));\n\n        // 枠外に出ないよう補正\n        const correctedX = Math.min(Math.max(newX, 1), BOARD_WIDTH - draggedPiece.size.width + 1);\n        const correctedY = Math.min(Math.max(newY, 1), BOARD_HEIGHT - draggedPiece.size.height + 1);\n\n        setHoverPosition({ x: correctedX, y: correctedY });\n\n        // setDraggedPiece({ ...draggedPiece, position: { x: correctedX, y: correctedY } });\n    };\n\n    const handleTouchEnd = () => {\n        if (!draggedPiece || !hoverPosition) return;\n\n        // 他のピースと重なるか確認\n        const isOverlap = pieces.some((piece) => {\n            return (\n                piece.id !== draggedPiece.id && // ドロップされたピース自身は除外\n                hoverPosition.x < piece.position.x + piece.size.width &&\n                hoverPosition.x + draggedPiece.size.width > piece.position.x &&\n                hoverPosition.y < piece.position.y + piece.size.height &&\n                hoverPosition.y + draggedPiece.size.height > piece.position.y\n            );\n        });\n\n        if (!isOverlap) {\n            setPieces((prevPieces) =>\n                prevPieces.map((piece) =>\n                    piece.id === draggedPiece.id ? draggedPiece : piece\n                )\n            );\n        }\n        setDraggedPiece(null);\n        setTouchStartPosition(null);\n    };\n\n\n    const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        if (!draggedPiece) return; // ドラッグ中のピースが存在しない場合は処理を中断\n        if (!dragStartPosition) return; // ドラッグ開始位置が未設定の場合は処理を中断\n        // ドラッグ開始位置を基準に相対的な位置を計算\n        const X = event.clientX; // X座標\n        const Y = event.clientY; // Y座標\n        const relativeX = X - dragStartPosition.x; // ドラッグ操作での相対的なX座標\n        const relativeY = Y - dragStartPosition.y; // ドラッグ操作での相対的なY座標\n\n        // ドラッグ中のピースの位置を基準にホバー位置を計算\n        // グリッドの位置を計算\n        const rect = event.currentTarget.getBoundingClientRect();\n        let hoverX = Math.floor(relativeX / (1.0 * rect.width / BOARD_WIDTH) + 0.5) + draggedPiece.position.x; // グリッドの列を計算\n        let hoverY = Math.floor(relativeY / (1.0 * rect.height / BOARD_HEIGHT) + 0.5) + draggedPiece.position.y; // グリッドの行を計算\n\n        // ドロップ位置を補正\n        hoverX = Math.max(hoverX, 1); // 最小値を1に設定\n        hoverY = Math.max(hoverY, 1); // 最小値を1に設定\n        hoverX = Math.min(Math.max(hoverX, 1), BOARD_WIDTH - draggedPiece.size.width + 1);\n        hoverY = Math.min(Math.max(hoverY, 1), BOARD_HEIGHT - draggedPiece.size.height + 1);\n\n        setHoverPosition({ x: hoverX, y: hoverY });\n    };\n\n    const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        const droppedPiece = JSON.parse(event.dataTransfer.getData('text/plain')); // as PieceData;\n        const targetX = hoverPosition?.x || 1;\n        const targetY = hoverPosition?.y || 1;\n\n        // 他のピースと重なるか確認\n        const isOverlap = pieces.some((piece) => {\n            return (\n                piece.id !== droppedPiece.id && // ドロップされたピース自身は除外\n                targetX < piece.position.x + piece.size.width &&\n                targetX + droppedPiece.size.width > piece.position.x &&\n                targetY < piece.position.y + piece.size.height &&\n                targetY + droppedPiece.size.height > piece.position.y\n            );\n        });\n\n        // 枠の外に出ないか確認\n        const isOutOfBounds = targetX < 1 || targetY < 1 || targetX + droppedPiece.size.width > BOARD_WIDTH + 1 || targetY + droppedPiece.size.height > BOARD_HEIGHT + 1;\n\n        if (!isOverlap && !isOutOfBounds) {\n            setPieces((prevPieces) =>\n                prevPieces.map((piece) =>\n                    piece.id === droppedPiece.id\n                        ? { ...piece, position: { x: targetX, y: targetY } }\n                        : piece\n                )\n            );\n        } else {\n            console.log(\"重なりが発生しました。ドラッグをキャンセルします。\");\n        }\n\n        setHoverPosition(null); // ドロップ後にホバー位置をリセット\n        setDraggedPiece(null); // ドロップ後にドラッグ中のピースをリセット\n    };\n\n    return (\n        <div\n            style={{\n                position: 'relative',\n                width: '610px', // ボードの幅 + 枠の幅\n                height: '540px', // ボードの高さ + 枠の幅\n                border: '10px solid black', // 枠を追加\n                backgroundColor: '#fff',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n            }}\n        >\n            <div\n                className=\"board\"\n                \n                style={{\n                    display: 'grid',\n                    gridTemplateColumns: 'repeat(6, 1fr)',\n                    gridTemplateRows: 'repeat(5, 1fr)',\n                    width: '600px', // ボードの幅\n                    height: '500px', // ボードの高さ\n                    position: 'relative',\n                    backgroundColor: '#fff0',\n                    margin: '5px', // 枠の幅を考慮してマージンを追加\n                }}\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n            >\n                {pieces.map((piece, index) => (\n                    <PuzzlePiece\n                        key={index}\n                        label={piece.label}\n                        size={piece.size}\n                        position={piece.position}\n                        isActive={false}\n                        onClick={() => console.log(`${piece.label} clicked`)}\n                        onDragStart={(event) => {\n                            event.dataTransfer.setData('text/plain', JSON.stringify(piece));\n                            setDraggedPiece(piece); // ドラッグ中のピースを保存\n    \n                            const startX = event.clientX; // 操作開始時のX座標\n                            const startY = event.clientY; // 操作開始時のY座標\n                            console.log(`Drag started at X: ${startX}, Y: ${startY}`); // ログ出力\n                            setDragStartPosition({ x: startX, y: startY }); // ドラッグ開始位置を保存\n                        }}\n                        onTouchStart={(event) => handleTouchStart(event, piece)}\n                        onTouchMove={handleTouchMove}\n                        onTouchEnd={handleTouchEnd}\n                    />\n                ))}\n                {hoverPosition && draggedPiece && (\n                    <div\n                        style={{\n                            gridColumn: `${hoverPosition.x} / span ${draggedPiece.size.width}`,\n                            gridRow: `${hoverPosition.y} / span ${draggedPiece.size.height}`,\n                            backgroundColor: 'rgba(128, 128, 255, 0.1)',\n                            border: '1px solid rgba(128, 128, 255, 0.5)',\n                            borderRadius: '7px',\n                            position: 'absolute',\n                            width: '100%',\n                            height: '100%',\n                        }}\n                    />\n                )}\n            </div>\n            {/* 下辺中央の出口を表現する切れ目 */}\n            <div\n                style={{\n                    position: 'absolute',\n                    bottom: '-10px',\n                    left: '50%',\n                    transform: 'translateX(-50%)',\n                    width: '200px', // 2マス分の幅\n                    height: '10px', // 枠の高さ\n                    backgroundColor: '#fff', // 枠の切れ目を白で表現\n                }}\n            />\n        </div>\n    );\n};\n\nexport default Board;","import React from 'react';\n\nconst Header: React.FC = () => {\n    return (\n        <header>\n            <h1>箱入り娘</h1>\n            <p>箱入り娘を外に出そう。詳しくはWikipediaの<a href=\"https://ja.wikipedia.org/wiki/%E7%AE%B1%E5%85%A5%E3%82%8A%E5%A8%98_(%E3%83%91%E3%82%BA%E3%83%AB)\">箱入り娘</a>を見よう。</p>\n        </header>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport Board from './components/Board';\nimport Header from './components/Header';\nimport './styles/App.css';\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <Header />\n            <Board />\n        </div>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}