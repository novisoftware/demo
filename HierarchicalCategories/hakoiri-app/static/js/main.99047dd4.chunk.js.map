{"version":3,"sources":["components/PuzzlePiece.tsx","components/Board.tsx","components/Header.tsx","App.tsx","index.tsx"],"names":["PuzzlePiece","_ref","position","size","label","isActive","onDragStart","onClick","isVertical","fontSize","width","height","length","_jsx","className","concat","style","gridColumn","x","gridRow","y","display","justifyContent","alignItems","writingMode","border","backgroundColor","color","cursor","draggable","children","initialPieces","id","Board","pieces","setPieces","useState","hoverPosition","setHoverPosition","draggedPiece","setDraggedPiece","dragStartPosition","setDragStartPosition","_jsxs","gridTemplateColumns","gridTemplateRows","margin","onDrop","event","preventDefault","droppedPiece","JSON","parse","dataTransfer","getData","targetX","targetY","isOverlap","some","piece","isOutOfBounds","BOARD_WIDTH","BOARD_HEIGHT","console","log","prevPieces","map","_objectSpread","onDragOver","X","clientX","Y","clientY","relativeX","relativeY","rect","currentTarget","getBoundingClientRect","hoverX","Math","floor","hoverY","max","min","index","setData","stringify","startX","startY","borderRadius","bottom","left","transform","Header","href","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99047dd4.chunk.js","sourcesContent":["import React from 'react';\n\ninterface PuzzlePieceProps {\n    position: { x: number; y: number };\n    size: { width: number; height: number };\n    label: string;\n    isActive: boolean;\n    onDragStart: (event: React.DragEvent<HTMLDivElement>) => void;\n    onClick: () => void;\n}\n\n\nconst PuzzlePiece: React.FC<PuzzlePieceProps> = ({ position, size, label, isActive, onDragStart, onClick }) => {\n    let isVertical = false;\n    let fontSize = '1rem';\n    if (size.width === 1 && size.height === 1) {\n        if (label.length == 1) {\n            fontSize = '1.5rem'; // 1文字の場合は大きく\n            isVertical = false; // 1文字の場合は縦書きも横書きもない\n        }\n        else {\n            fontSize = '1.2rem'; // 2文字以上の場合は通常サイズ\n            isVertical = true; // 2文字以上の場合は横書き\n        }\n    } else {\n        if (size.height == size.width) {\n            fontSize = '5rem'; // 大きく\n        } else if (size.height > size.width) {\n            fontSize = '2em'; // 大きく\n            isVertical = true; // 縦長の場合は縦書き\n        }\n        else {\n            fontSize = '2rem'; // 大きく\n            isVertical = false; // 横長の場合は横書き\n        }\n    }\n\n    return (\n        <div\n            className={`puzzle-piece ${isActive ? 'active' : ''}`}\n            style={{\n                gridColumn: `${position.x} / span ${size.width}`,\n                gridRow: `${position.y} / span ${size.height}`,\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                writingMode: isVertical ? 'vertical-rl' : 'horizontal-tb',\n                border: '1.5px solid black',\n                backgroundColor: '#f0f0f0',\n                color: '#000', // 文字色を黒に変更\n                fontSize: fontSize, // 文字サイズを調整\n                cursor: 'grab',\n                width: '100%', // グリッド内で幅を100%に設定\n                height: '100%', // グリッド内で高さを100%に設定\n            }}\n            draggable=\"true\"\n            onDragStart={onDragStart}\n            onClick={onClick}\n        >\n            {label}\n        </div>\n    );\n};\n\nexport default PuzzlePiece;","import React, { useState } from 'react';\nimport PuzzlePiece from './PuzzlePiece';\n\ninterface PieceData {\n    id: number;\n    label: string;\n    size: {\n        width: number;\n        height: number;\n    };\n    position: {\n        x: number;\n        y: number;\n    };\n}\n\ninterface Position {\n    x: number;\n    y: number;\n}\n\nconst BOARD_WIDTH = 6; // グリッドの列数\nconst BOARD_HEIGHT = 5; // グリッドの行数\n\nconst initialPieces: PieceData[] = [\n    { id: 1, label: \"父\", size: { width: 1, height: 2 }, position: { x: 3, y: 1 } },\n    { id: 2, label: \"娘\", size: { width: 2, height: 2 }, position: { x: 4, y: 1 } },\n    { id: 3, label: \"母\", size: { width: 1, height: 2 }, position: { x: 6, y: 1 } },\n    { id: 4, label: \"丁稚\", size: { width: 1, height: 1 }, position: { x: 1, y: 3 } },\n    { id: 5, label: \"手代\", size: { width: 1, height: 1 }, position: { x: 2, y: 3 } },\n    { id: 6, label: \"大番頭\", size: { width: 4, height: 1 }, position: { x: 3, y: 3 } },\n    { id: 7, label: \"丁稚\", size: { width: 1, height: 1 }, position: { x: 1, y: 4 } },\n    { id: 8, label: \"番頭\", size: { width: 2, height: 1 }, position: { x: 2, y: 4 } },\n    { id: 9, label: \"女中\", size: { width: 2, height: 1 }, position: { x: 4, y: 4 } },\n    { id: 10, label: \"兄嫁\", size: { width: 1, height: 1 }, position: { x: 6, y: 4 } },\n    { id: 11, label: \"番犬\", size: { width: 1, height: 1 }, position: { x: 1, y: 5 } },\n    { id: 12, label: \"祖父\", size: { width: 2, height: 1 }, position: { x: 2, y: 5 } },\n    { id: 13, label: \"祖母\", size: { width: 2, height: 1 }, position: { x: 4, y: 5 } },\n    { id: 14, label: \"丁稚\", size: { width: 1, height: 1 }, position: { x: 6, y: 5 } },\n];\n\nconst Board: React.FC = () => {\n    const [pieces, setPieces] = useState<PieceData[]>(initialPieces);\n    const [hoverPosition, setHoverPosition] = useState<{ x: number; y: number } | null>(null);\n    const [draggedPiece, setDraggedPiece] = useState<PieceData | null>(null); // ドラッグ中のピースを保存\n    const [dragStartPosition, setDragStartPosition] = useState<{ x: number; y: number } | null>(null); // ドラッグ開始位置を保存\n\n    const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        if (!draggedPiece) return; // ドラッグ中のピースが存在しない場合は処理を中断\n        if (!dragStartPosition) return; // ドラッグ開始位置が未設定の場合は処理を中断\n        // ドラッグ開始位置を基準に相対的な位置を計算\n        const X = event.clientX; // X座標\n        const Y = event.clientY; // Y座標\n        const relativeX = X - dragStartPosition.x; // ドラッグ操作での相対的なX座標\n        const relativeY = Y - dragStartPosition.y; // ドラッグ操作での相対的なY座標\n\n        // ドラッグ中のピースの位置を基準にホバー位置を計算\n        // グリッドの位置を計算\n        const rect = event.currentTarget.getBoundingClientRect();\n        let hoverX = Math.floor(relativeX / (1.0 * rect.width / BOARD_WIDTH) + 0.5) + draggedPiece.position.x; // グリッドの列を計算\n        let hoverY = Math.floor(relativeY / (1.0 * rect.height / BOARD_HEIGHT) + 0.5) + draggedPiece.position.y; // グリッドの行を計算\n\n        // ドロップ位置を補正\n        hoverX = Math.max(hoverX, 1); // 最小値を1に設定\n        hoverY = Math.max(hoverY, 1); // 最小値を1に設定\n        hoverX = Math.min(Math.max(hoverX, 1), BOARD_WIDTH - draggedPiece.size.width + 1);\n        hoverY = Math.min(Math.max(hoverY, 1), BOARD_HEIGHT - draggedPiece.size.height + 1);\n\n        setHoverPosition({ x: hoverX, y: hoverY });\n    };\n\n    const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        const droppedPiece = JSON.parse(event.dataTransfer.getData('text/plain')); // as PieceData;\n        const targetX = hoverPosition?.x || 1;\n        const targetY = hoverPosition?.y || 1;\n\n        // 他のピースと重なるか確認\n        const isOverlap = pieces.some((piece) => {\n            return (\n                piece.id !== droppedPiece.id && // ドロップされたピース自身は除外\n                targetX < piece.position.x + piece.size.width &&\n                targetX + droppedPiece.size.width > piece.position.x &&\n                targetY < piece.position.y + piece.size.height &&\n                targetY + droppedPiece.size.height > piece.position.y\n            );\n        });\n\n        // 枠の外に出ないか確認\n        const isOutOfBounds = targetX < 1 || targetY < 1 || targetX + droppedPiece.size.width > BOARD_WIDTH + 1 || targetY + droppedPiece.size.height > BOARD_HEIGHT + 1;\n\n        if (!isOverlap && !isOutOfBounds) {\n            setPieces((prevPieces) =>\n                prevPieces.map((piece) =>\n                    piece.label === droppedPiece.label\n                        ? { ...piece, position: { x: targetX, y: targetY } }\n                        : piece\n                )\n            );\n        } else {\n            console.log(\"重なりが発生しました。ドラッグをキャンセルします。\");\n        }\n\n        setHoverPosition(null); // ドロップ後にホバー位置をリセット\n        setDraggedPiece(null); // ドロップ後にドラッグ中のピースをリセット\n    };\n\n    return (\n        <div\n            style={{\n                position: 'relative',\n                width: '610px', // ボードの幅 + 枠の幅\n                height: '540px', // ボードの高さ + 枠の幅\n                border: '10px solid black', // 枠を追加\n                backgroundColor: '#fff',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n            }}\n        >\n            <div\n                className=\"board\"\n                \n                style={{\n                    display: 'grid',\n                    gridTemplateColumns: 'repeat(6, 1fr)',\n                    gridTemplateRows: 'repeat(5, 1fr)',\n                    width: '600px', // ボードの幅\n                    height: '500px', // ボードの高さ\n                    position: 'relative',\n                    backgroundColor: '#fff0',\n                    margin: '5px', // 枠の幅を考慮してマージンを追加\n                }}\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n            >\n                {pieces.map((piece, index) => (\n                    <PuzzlePiece\n                        key={index}\n                        label={piece.label}\n                        size={piece.size}\n                        position={piece.position}\n                        isActive={false}\n                        onClick={() => console.log(`${piece.label} clicked`)}\n                        onDragStart={(event) => {\n                            event.dataTransfer.setData('text/plain', JSON.stringify(piece));\n                            setDraggedPiece(piece); // ドラッグ中のピースを保存\n    \n                            const startX = event.clientX; // 操作開始時のX座標\n                            const startY = event.clientY; // 操作開始時のY座標\n                            console.log(`Drag started at X: ${startX}, Y: ${startY}`); // ログ出力\n                            setDragStartPosition({ x: startX, y: startY }); // ドラッグ開始位置を保存\n                        }}\n                    />\n                ))}\n                {hoverPosition && draggedPiece && (\n                    <div\n                        style={{\n                            gridColumn: `${hoverPosition.x} / span ${draggedPiece.size.width}`,\n                            gridRow: `${hoverPosition.y} / span ${draggedPiece.size.height}`,\n                            backgroundColor: 'rgba(128, 128, 255, 0.1)',\n                            border: '1px solid rgba(128, 128, 255, 0.5)',\n                            borderRadius: '7px',\n                            position: 'absolute',\n                            width: '100%',\n                            height: '100%',\n                        }}\n                    />\n                )}\n            </div>\n            {/* 下辺中央の出口を表現する切れ目 */}\n            <div\n                style={{\n                    position: 'absolute',\n                    bottom: '-10px',\n                    left: '50%',\n                    transform: 'translateX(-50%)',\n                    width: '200px', // 2マス分の幅\n                    height: '10px', // 枠の高さ\n                    backgroundColor: '#fff', // 枠の切れ目を白で表現\n                }}\n            />\n        </div>\n    );\n};\n\nexport default Board;","import React from 'react';\n\nconst Header: React.FC = () => {\n    return (\n        <header>\n            <h1>箱入り娘</h1>\n            <p>詳しくは<a href=\"https://ja.wikipedia.org/wiki/%E7%AE%B1%E5%85%A5%E3%82%8A%E5%A8%98_(%E3%83%91%E3%82%BA%E3%83%AB)\">箱入り娘</a>を見よう</p>\n        </header>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport Board from './components/Board';\nimport Header from './components/Header';\nimport './styles/App.css';\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <Header />\n            <Board />\n        </div>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}