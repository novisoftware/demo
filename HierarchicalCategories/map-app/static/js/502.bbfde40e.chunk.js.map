{"version":3,"file":"static/js/502.bbfde40e.chunk.js","mappings":"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","sources":["../node_modules/lodash-es/_baseHas.js","../node_modules/lodash-es/has.js","../node_modules/lodash-es/_createFind.js","../node_modules/lodash-es/findIndex.js","../node_modules/lodash-es/find.js","../node_modules/lodash-es/_baseSet.js","../node_modules/lodash-es/_basePickBy.js","../node_modules/vscode-jsonrpc/lib/common/ral.js","../node_modules/langium/src/syntax-tree.ts","../node_modules/langium/src/utils/stream.ts","../node_modules/langium/src/utils/cst-utils.ts","../node_modules/langium/src/utils/errors.ts","../node_modules/langium/src/languages/generated/ast.ts","../node_modules/langium/src/utils/ast-utils.ts","../node_modules/@chevrotain/regexp-to-ast/src/utils.ts","../node_modules/@chevrotain/regexp-to-ast/src/character-classes.ts","../node_modules/@chevrotain/regexp-to-ast/src/regexp-parser.ts","../node_modules/@chevrotain/regexp-to-ast/src/base-regexp-visitor.ts","../node_modules/langium/src/utils/regexp-utils.ts","../node_modules/langium/src/utils/grammar-utils.ts","../node_modules/@chevrotain/utils/src/to-fast-properties.ts","../node_modules/lodash-es/_baseSlice.js","../node_modules/lodash-es/drop.js","../node_modules/lodash-es/assign.js","../node_modules/lodash-es/pickBy.js","../node_modules/lodash-es/_baseIsRegExp.js","../node_modules/lodash-es/isRegExp.js","../node_modules/@chevrotain/gast/src/model.ts","../node_modules/@chevrotain/gast/src/visitor.ts","../node_modules/lodash-es/_baseSome.js","../node_modules/lodash-es/some.js","../node_modules/lodash-es/includes.js","../node_modules/lodash-es/_arrayEvery.js","../node_modules/lodash-es/_baseEvery.js","../node_modules/lodash-es/every.js","../node_modules/@chevrotain/gast/src/helpers.ts","../node_modules/chevrotain/src/parse/grammar/rest.ts","../node_modules/lodash-es/uniq.js","../node_modules/chevrotain/src/parse/grammar/first.ts","../node_modules/chevrotain/src/parse/constants.ts","../node_modules/chevrotain/src/parse/grammar/follow.ts","../node_modules/lodash-es/negate.js","../node_modules/lodash-es/reject.js","../node_modules/lodash-es/indexOf.js","../node_modules/lodash-es/_baseDifference.js","../node_modules/lodash-es/difference.js","../node_modules/lodash-es/compact.js","../node_modules/lodash-es/head.js","../node_modules/@chevrotain/utils/src/print.ts","../node_modules/chevrotain/src/scan/reg_exp_parser.ts","../node_modules/chevrotain/src/scan/reg_exp.ts","../node_modules/chevrotain/src/scan/lexer.ts","../node_modules/@chevrotain/utils/src/timer.ts","../node_modules/chevrotain/src/scan/tokens.ts","../node_modules/chevrotain/src/scan/lexer_errors_public.ts","../node_modules/chevrotain/src/scan/lexer_public.ts","../node_modules/chevrotain/src/scan/tokens_public.ts","../node_modules/chevrotain/src/parse/errors_public.ts","../node_modules/chevrotain/src/parse/grammar/resolver.ts","../node_modules/lodash-es/flatMap.js","../node_modules/lodash-es/_arrayAggregator.js","../node_modules/lodash-es/_baseAggregator.js","../node_modules/lodash-es/_createAggregator.js","../node_modules/lodash-es/groupBy.js","../node_modules/lodash-es/dropRight.js","../node_modules/chevrotain/src/parse/grammar/interpreter.ts","../node_modules/chevrotain/src/parse/grammar/lookahead.ts","../node_modules/chevrotain/src/parse/grammar/checks.ts","../node_modules/chevrotain/src/parse/grammar/gast/gast_resolver_public.ts","../node_modules/chevrotain/src/parse/exceptions_public.ts","../node_modules/chevrotain/src/parse/parser/traits/recoverable.ts","../node_modules/chevrotain/src/parse/grammar/keys.ts","../node_modules/chevrotain/src/parse/grammar/llk_lookahead.ts","../node_modules/chevrotain/src/parse/parser/traits/looksahead.ts","../node_modules/chevrotain/src/parse/cst/cst.ts","../node_modules/chevrotain/src/lang/lang_extensions.ts","../node_modules/chevrotain/src/parse/cst/cst_visitor.ts","../node_modules/chevrotain/src/parse/parser/traits/gast_recorder.ts","../node_modules/chevrotain/src/parse/parser/parser.ts","../node_modules/chevrotain/src/parse/parser/utils/apply_mixins.ts","../node_modules/chevrotain/src/parse/parser/traits/tree_builder.ts","../node_modules/chevrotain/src/parse/parser/traits/lexer_adapter.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_engine.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_api.ts","../node_modules/chevrotain/src/parse/parser/traits/error_handler.ts","../node_modules/chevrotain/src/parse/parser/traits/context_assist.ts","../node_modules/chevrotain/src/parse/parser/traits/perf_tracer.ts","../node_modules/chevrotain-allstar/src/atn.ts","../node_modules/chevrotain-allstar/src/dfa.ts","../node_modules/lodash-es/uniqBy.js","../node_modules/chevrotain-allstar/src/all-star-lookahead.ts","../node_modules/vscode-languageserver-types/lib/esm/main.js","../node_modules/langium/src/parser/cst-node-builder.ts","../node_modules/langium/src/parser/langium-parser.ts","../node_modules/langium/src/parser/parser-builder-base.ts","../node_modules/langium/src/parser/langium-parser-builder.ts","../node_modules/langium/src/parser/token-builder.ts","../node_modules/langium/src/parser/value-converter.ts","../node_modules/langium/src/utils/promise-utils.ts","../node_modules/vscode-languageserver-textdocument/lib/esm/main.js","../LIB/node_modules/path-browserify/index.js","../LIB/webpack/bootstrap","../LIB/webpack/runtime/define property getters","../LIB/webpack/runtime/hasOwnProperty shorthand","../LIB/webpack/runtime/make namespace object","../LIB/src/platform.ts","../LIB/src/uri.ts","../LIB/src/utils.ts","../node_modules/langium/src/utils/uri-utils.ts","../node_modules/langium/src/workspace/documents.ts","../node_modules/langium/src/references/linker.ts","../node_modules/langium/src/references/name-provider.ts","../node_modules/langium/src/references/references.ts","../node_modules/langium/src/utils/collections.ts","../node_modules/langium/src/references/scope-computation.ts","../node_modules/langium/src/references/scope.ts","../node_modules/langium/src/utils/caching.ts","../node_modules/langium/src/references/scope-provider.ts","../node_modules/langium/src/serializer/json-serializer.ts","../node_modules/langium/src/service-registry.ts","../node_modules/langium/src/validation/validation-registry.ts","../node_modules/langium/src/validation/document-validator.ts","../node_modules/langium/src/utils/disposable.ts","../node_modules/langium/src/workspace/ast-descriptions.ts","../node_modules/langium/src/workspace/ast-node-locator.ts","../node_modules/langium/src/workspace/configuration.ts","../node_modules/langium/src/workspace/document-builder.ts","../node_modules/langium/src/workspace/index-manager.ts","../node_modules/langium/src/workspace/workspace-manager.ts","../node_modules/langium/src/parser/lexer.ts","../node_modules/langium/src/documentation/jsdoc.ts","../node_modules/langium/src/documentation/documentation-provider.ts","../node_modules/langium/src/documentation/comment-provider.ts","../node_modules/langium/src/dependency-injection.ts","../node_modules/langium/src/parser/async-parser.ts","../node_modules/langium/src/workspace/workspace-lock.ts","../node_modules/langium/src/serializer/hydrator.ts","../node_modules/langium/src/default-module.ts","../node_modules/langium/src/languages/grammar-config.ts","../node_modules/langium/src/parser/completion-parser-builder.ts","../node_modules/langium/src/workspace/file-system-provider.ts","../node_modules/langium/src/utils/grammar-loader.ts","../node_modules/lodash-es/_baseExtremum.js","../node_modules/lodash-es/clone.js","../node_modules/lodash-es/_trimmedEndIndex.js","../node_modules/lodash-es/_baseTrim.js","../node_modules/lodash-es/toNumber.js","../node_modules/lodash-es/toFinite.js","../node_modules/lodash-es/isString.js","../node_modules/vscode-jsonrpc/lib/common/cancellation.js","../node_modules/lodash-es/last.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-4YFB5VUC.mjs","../node_modules/lodash-es/_baseMap.js","../node_modules/lodash-es/defaults.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-EQFLFMNE.mjs","../node_modules/@mermaid-js/parser/dist/mermaid-parser.core.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-BI6EQKOQ.mjs","../node_modules/lodash-es/_baseLt.js","../node_modules/lodash-es/flatten.js","../node_modules/lodash-es/toInteger.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-Y27MQZ3U.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-FF7BQXOH.mjs","../node_modules/lodash-es/map.js","../node_modules/vscode-jsonrpc/lib/common/events.js","../node_modules/vscode-jsonrpc/lib/common/is.js","../node_modules/lodash-es/min.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-NCMFTTUW.mjs"],"sourcesContent":["/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nexport default baseHas;\n","import baseHas from './_baseHas.js';\nimport hasPath from './_hasPath.js';\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nexport default has;\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(`No runtime abstraction layer installed`);\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(`No runtime abstraction layer provided`);\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { TokenType } from 'chevrotain';\nimport type { URI } from './utils/uri-utils.js';\nimport type { AbstractElement } from './languages/generated/ast.js';\nimport type { DocumentSegment, LangiumDocument } from './workspace/documents.js';\n\n/**\n * A node in the Abstract Syntax Tree (AST).\n */\nexport interface AstNode {\n    /** Every AST node has a type corresponding to what was specified in the grammar declaration. */\n    readonly $type: string;\n    /** The container node in the AST; every node except the root node has a container. */\n    readonly $container?: AstNode;\n    /** The property of the `$container` node that contains this node. This is either a direct reference or an array. */\n    readonly $containerProperty?: string;\n    /** In case `$containerProperty` is an array, the array index is stored here. */\n    readonly $containerIndex?: number;\n    /** The Concrete Syntax Tree (CST) node of the text range from which this node was parsed. */\n    readonly $cstNode?: CstNode;\n    /** The document containing the AST; only the root node has a direct reference to the document. */\n    readonly $document?: LangiumDocument;\n}\n\nexport function isAstNode(obj: unknown): obj is AstNode {\n    return typeof obj === 'object' && obj !== null && typeof (obj as AstNode).$type === 'string';\n}\n\nexport interface GenericAstNode extends AstNode {\n    [key: string]: unknown\n}\n\ntype SpecificNodeProperties<N extends AstNode> = keyof Omit<N, keyof AstNode | number | symbol>;\n\n/**\n * The property names of a given AST node type.\n */\nexport type Properties<N extends AstNode> = SpecificNodeProperties<N> extends never ? string : SpecificNodeProperties<N>\n\n/**\n * A cross-reference in the AST. Cross-references may or may not be successfully resolved.\n */\nexport interface Reference<T extends AstNode = AstNode> {\n    /**\n     * The target AST node of this reference. Accessing this property may trigger cross-reference\n     * resolution by the `Linker` in case it has not been done yet. If the reference cannot be resolved,\n     * the value is `undefined`.\n     */\n    readonly ref?: T;\n\n    /** If any problem occurred while resolving the reference, it is described by this property. */\n    readonly error?: LinkingError;\n    /** The CST node from which the reference was parsed */\n    readonly $refNode?: CstNode;\n    /** The actual text used to look up in the surrounding scope */\n    readonly $refText: string;\n    /** The node description for the AstNode returned by `ref`  */\n    readonly $nodeDescription?: AstNodeDescription;\n}\n\nexport function isReference(obj: unknown): obj is Reference {\n    return typeof obj === 'object' && obj !== null && typeof (obj as Reference).$refText === 'string';\n}\n\nexport type ResolvedReference<T extends AstNode = AstNode> = Reference<T> & {\n    readonly ref: T;\n}\n\n/**\n * A description of an AST node is used when constructing scopes and looking up cross-reference targets.\n */\nexport interface AstNodeDescription {\n    /** The target node; should be present only for local references (linking to the same document). */\n    node?: AstNode;\n    /**\n     * The document segment that represents the range of the name of the AST node.\n     */\n    nameSegment?: DocumentSegment;\n    /**\n     * The document segment that represents the full range of the AST node.\n     */\n    selectionSegment?: DocumentSegment;\n    /** `$type` property value of the AST node */\n    type: string;\n    /** Name of the AST node; this is usually determined by the `NameProvider` service. */\n    name: string;\n    /** URI to the document containing the AST node */\n    documentUri: URI;\n    /** Navigation path inside the document */\n    path: string;\n}\n\nexport function isAstNodeDescription(obj: unknown): obj is AstNodeDescription {\n    return typeof obj === 'object' && obj !== null\n        && typeof (obj as AstNodeDescription).name === 'string'\n        && typeof (obj as AstNodeDescription).type === 'string'\n        && typeof (obj as AstNodeDescription).path === 'string';\n}\n\n/**\n * Information about a cross-reference. This is used when traversing references in an AST or to describe\n * unresolved references.\n */\nexport interface ReferenceInfo {\n    reference: Reference\n    container: AstNode\n    property: string\n    index?: number\n}\n\n/**\n * Used to collect information when the `Linker` service fails to resolve a cross-reference.\n */\nexport interface LinkingError extends ReferenceInfo {\n    message: string;\n    targetDescription?: AstNodeDescription;\n}\n\nexport function isLinkingError(obj: unknown): obj is LinkingError {\n    return typeof obj === 'object' && obj !== null\n        && isAstNode((obj as LinkingError).container)\n        && isReference((obj as LinkingError).reference)\n        && typeof (obj as LinkingError).message === 'string';\n}\n\n/**\n * Service used for generic access to the structure of the AST. This service is shared between\n * all involved languages, so it operates on the superset of types of these languages.\n */\nexport interface AstReflection {\n    getAllTypes(): string[]\n    getAllSubTypes(type: string): string[]\n    getReferenceType(refInfo: ReferenceInfo): string\n    getTypeMetaData(type: string): TypeMetaData\n    isInstance(node: unknown, type: string): boolean\n    isSubtype(subtype: string, supertype: string): boolean\n}\n\n/**\n * An abstract implementation of the {@link AstReflection} interface.\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\n */\nexport abstract class AbstractAstReflection implements AstReflection {\n\n    protected subtypes: Record<string, Record<string, boolean | undefined>> = {};\n    protected allSubtypes: Record<string, string[] | undefined> = {};\n\n    abstract getAllTypes(): string[];\n    abstract getReferenceType(refInfo: ReferenceInfo): string;\n    abstract getTypeMetaData(type: string): TypeMetaData;\n    protected abstract computeIsSubtype(subtype: string, supertype: string): boolean;\n\n    isInstance(node: unknown, type: string): boolean {\n        return isAstNode(node) && this.isSubtype(node.$type, type);\n    }\n\n    isSubtype(subtype: string, supertype: string): boolean {\n        if (subtype === supertype) {\n            return true;\n        }\n        let nested = this.subtypes[subtype];\n        if (!nested) {\n            nested = this.subtypes[subtype] = {};\n        }\n        const existing = nested[supertype];\n        if (existing !== undefined) {\n            return existing;\n        } else {\n            const result = this.computeIsSubtype(subtype, supertype);\n            nested[supertype] = result;\n            return result;\n        }\n    }\n\n    getAllSubTypes(type: string): string[] {\n        const existing = this.allSubtypes[type];\n        if (existing) {\n            return existing;\n        } else {\n            const allTypes = this.getAllTypes();\n            const types: string[] = [];\n            for (const possibleSubType of allTypes) {\n                if (this.isSubtype(possibleSubType, type)) {\n                    types.push(possibleSubType);\n                }\n            }\n            this.allSubtypes[type] = types;\n            return types;\n        }\n    }\n}\n\n/**\n * Represents runtime meta data about a meta model type.\n */\nexport interface TypeMetaData {\n    /** The name of this meta model type. Corresponds to the `AstNode.$type` value. */\n    name: string\n    /** A list of properties. They can contain default values for their respective property in the AST. */\n    properties: TypeProperty[]\n}\n\n/**\n * Describes the meta data of a property of an AST node.\n *\n * The optional `defaultValue` indicates that the property is mandatory in the AST node.\n * For example, if an AST node contains an array, but no elements of this array have been parsed, we still expect an empty array instead of `undefined`.\n */\nexport interface TypeProperty {\n    name: string\n    defaultValue?: PropertyType\n}\n\n/**\n * Represents a default value for an AST property.\n */\nexport type PropertyType = number | string | boolean | PropertyType[];\n\n/**\n * A node in the Concrete Syntax Tree (CST).\n */\nexport interface CstNode extends DocumentSegment {\n    /** The container node in the CST */\n    readonly container?: CompositeCstNode;\n    /** @deprecated use `container` instead. */\n    readonly parent?: CompositeCstNode;\n    /** The actual text */\n    readonly text: string;\n    /** The root CST node */\n    readonly root: RootCstNode;\n    /** The grammar element from which this node was parsed */\n    readonly grammarSource: AbstractElement;\n    /** @deprecated use `grammarSource` instead. */\n    readonly feature: AbstractElement;\n    /** The AST node created from this CST node */\n    readonly astNode: AstNode;\n    /** @deprecated use `astNode` instead. */\n    readonly element: AstNode;\n    /** Whether the token is hidden, i.e. not explicitly part of the containing grammar rule */\n    readonly hidden: boolean;\n}\n\n/**\n * A composite CST node contains other nodes, but no directly associated token.\n */\nexport interface CompositeCstNode extends CstNode {\n    readonly content: CstNode[];\n    /** @deprecated use `content` instead. */\n    readonly children: CstNode[];\n}\n\nexport function isCompositeCstNode(node: unknown): node is CompositeCstNode {\n    return typeof node === 'object' && node !== null && Array.isArray((node as CompositeCstNode).content);\n}\n\n/**\n * A leaf CST node corresponds to a token in the input token stream.\n */\nexport interface LeafCstNode extends CstNode {\n    readonly tokenType: TokenType;\n}\n\nexport function isLeafCstNode(node: unknown): node is LeafCstNode {\n    return typeof node === 'object' && node !== null && typeof (node as LeafCstNode).tokenType === 'object';\n}\n\nexport interface RootCstNode extends CompositeCstNode {\n    readonly fullText: string\n}\n\nexport function isRootCstNode(node: unknown): node is RootCstNode {\n    return isCompositeCstNode(node) && typeof (node as RootCstNode).fullText === 'string';\n}\n\n/**\n * Returns a type to have only properties names (!) of a type T whose property value is of a certain type K.\n */\ntype ExtractKeysOfValueType<T, K> = { [I in keyof T]: T[I] extends K ? I : never }[keyof T];\n\n/**\n * Returns the property names (!) of an AstNode that are cross-references.\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.property)`.\n */\nexport type CrossReferencesOfAstNodeType<N extends AstNode> = (\n    ExtractKeysOfValueType<N, Reference|undefined>\n    | ExtractKeysOfValueType<N, Array<Reference|undefined>|undefined>\n// eslint-disable-next-line @typescript-eslint/ban-types\n) & {};\n\n/**\n * Represents the enumeration-like type, that lists all AstNode types of your grammar.\n */\nexport type AstTypeList<T> = Record<keyof T, AstNode>;\n\n/**\n * Returns all types that contain cross-references, A is meant to be the interface `XXXAstType` fromm your generated `ast.ts` file.\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.container)`.\n */\nexport type AstNodeTypesWithCrossReferences<A extends AstTypeList<A>> = {\n    [T in keyof A]: CrossReferencesOfAstNodeType<A[T]> extends never ? never : A[T]\n}[keyof A];\n\nexport type Mutable<T> = {\n    -readonly [P in keyof T]: T[P]\n};\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * A stream is a read-only sequence of values. While the contents of an array can be accessed\n * both sequentially and randomly (via index), a stream allows only sequential access.\n *\n * The advantage of this is that a stream can be evaluated lazily, so it does not require\n * to store intermediate values. This can boost performance when a large sequence is\n * processed via filtering, mapping etc. and accessed at most once. However, lazy\n * evaluation means that all processing is repeated when you access the sequence multiple\n * times; in such a case, it may be better to store the resulting sequence into an array.\n */\nexport interface Stream<T> extends Iterable<T> {\n\n    /**\n     * Returns an iterator for this stream. This is the same as calling the `Symbol.iterator` function property.\n     */\n    iterator(): IterableIterator<T>;\n\n    /**\n     * Determines whether this stream contains no elements.\n     */\n    isEmpty(): boolean;\n\n    /**\n     * Determines the number of elements in this stream.\n     */\n    count(): number;\n\n    /**\n     * Collects all elements of this stream into an array.\n     */\n    toArray(): T[];\n\n    /**\n     * Collects all elements of this stream into a Set.\n     */\n    toSet(): Set<T>;\n\n    /**\n     * Collects all elements of this stream into a Map, applying the provided functions to determine keys and values.\n     *\n     * @param keyFn The function to derive map keys. If omitted, the stream elements are used as keys.\n     * @param valueFn The function to derive map values. If omitted, the stream elements are used as values.\n     */\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V>;\n\n    /**\n     * Returns a string representation of a stream.\n     */\n    toString(): string;\n\n    /**\n     * Combines two streams by returning a new stream that yields all elements of this stream and the other stream.\n     *\n     * @param other Stream to be concatenated with this one.\n     */\n    concat<T2>(other: Iterable<T2>): Stream<T | T2>;\n\n    /**\n     * Adds all elements of the stream into a string, separated by the specified separator string.\n     *\n     * @param separator A string used to separate one element of the stream from the next in the resulting string.\n     *        If omitted, the steam elements are separated with a comma.\n     */\n    join(separator?: string): string\n\n    /**\n     * Returns the index of the first occurrence of a value in the stream, or -1 if it is not present.\n     *\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The stream index at which to begin the search. If fromIndex is omitted, the search\n     *        starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n\n    /**\n     * Determines whether all members of the stream satisfy the specified test.\n     *\n     * @param predicate This method calls the predicate function for each element in the stream until the\n     *        predicate returns a value which is coercible to the Boolean value `false`, or until the end\n     *        of the stream.\n     */\n    every<S extends T>(predicate: (value: T) => value is S): this is Stream<S>;\n    every(predicate: (value: T) => unknown): boolean;\n\n    /**\n     * Determines whether any member of the stream satisfies the specified test.\n     *\n     * @param predicate This method calls the predicate function for each element in the stream until the\n     *        predicate returns a value which is coercible to the Boolean value `true`, or until the end\n     *        of the stream.\n     */\n    some(predicate: (value: T) => unknown): boolean;\n\n    /**\n     * Performs the specified action for each element in the stream.\n     *\n     * @param callbackfn Function called once for each element in the stream.\n     */\n    forEach(callbackfn: (value: T, index: number) => void): void;\n\n    /**\n     * Returns a stream that yields the results of calling the specified callback function on each element\n     * of the stream. The function is called when the resulting stream elements are actually accessed, so\n     * accessing the resulting stream multiple times means the function is also called multiple times for\n     * each element of the stream.\n     *\n     * @param callbackfn Lazily evaluated function mapping stream elements.\n     */\n    map<U>(callbackfn: (value: T) => U): Stream<U>;\n\n    /**\n     * Returns the elements of the stream that meet the condition specified in a callback function.\n     * The function is called when the resulting stream elements are actually accessed, so accessing the\n     * resulting stream multiple times means the function is also called multiple times for each element\n     * of the stream.\n     *\n     * @param predicate Lazily evaluated function checking a condition on stream elements.\n     */\n    filter<S extends T>(predicate: (value: T) => value is S): Stream<S>;\n    filter(predicate: (value: T) => unknown): Stream<T>;\n\n    /**\n     * Returns the elements of the stream that are _non-nullable_, which means they are neither `undefined`\n     * nor `null`.\n     */\n    nonNullable(): Stream<NonNullable<T>>;\n\n    /**\n     * Calls the specified callback function for all elements in the stream. The return value of the\n     * callback function is the accumulated result, and is provided as an argument in the next call to\n     * the callback function.\n     *\n     * @param callbackfn This method calls the function once for each element in the stream, providing\n     *        the previous and current values of the reduction.\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\n     *        accumulation. The first call to the function provides this value as an argument instead\n     *        of a stream value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all elements in the stream, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     *\n     * @param callbackfn This method calls the function once for each element in the stream, providing\n     *        the previous and current values of the reduction.\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\n     *        accumulation. The first call to the function provides this value as an argument instead\n     *        of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\n\n    /**\n     * Returns the value of the first element in the stream that meets the condition, or `undefined`\n     * if there is no such element.\n     *\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\n     *        Boolean value `true`.\n     */\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\n    find(predicate: (value: T) => unknown): T | undefined;\n\n    /**\n     * Returns the index of the first element in the stream that meets the condition, or `-1`\n     * if there is no such element.\n     *\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\n     *        Boolean value `true`.\n     */\n    findIndex(predicate: (value: T) => unknown): number;\n\n    /**\n     * Determines whether the stream includes a certain element, returning `true` or `false` as appropriate.\n     *\n     * @param searchElement The element to search for.\n     */\n    includes(searchElement: T): boolean;\n\n    /**\n     * Calls a defined callback function on each element of the stream and then flattens the result into\n     * a new stream. This is identical to a `map` followed by `flat` with depth 1.\n     *\n     * @param callbackfn Lazily evaluated function mapping stream elements.\n     */\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U>;\n\n    /**\n     * Returns a new stream with all sub-stream or sub-array elements concatenated into it recursively up\n     * to the specified depth.\n     *\n     * @param depth The maximum recursion depth. Defaults to 1.\n     */\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D>;\n\n    /**\n     * Returns the first element in the stream, or `undefined` if the stream is empty.\n     */\n    head(): T | undefined;\n\n    /**\n     * Returns a stream that skips the first `skipCount` elements from this stream.\n     *\n     * @param skipCount The number of elements to skip. If this is larger than the number of elements in\n     *        the stream, an empty stream is returned. Defaults to 1.\n     */\n    tail(skipCount?: number): Stream<T>;\n\n    /**\n     * Returns a stream consisting of the elements of this stream, truncated to be no longer than `maxSize`\n     * in length.\n     *\n     * @param maxSize The number of elements the stream should be limited to\n     */\n    limit(maxSize: number): Stream<T>;\n\n    /**\n     * Returns a stream containing only the distinct elements from this stream.\n     * Equality is determined with the same rules as a standard `Set`.\n     *\n     * @param by A function returning the key used to check equality with a previous stream element.\n     *        If omitted, the stream elements themselves are used for comparison.\n     */\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T>;\n\n    /**\n     * Returns a stream that contains all elements that don't exist in the {@link other} iterable.\n     * Equality is determined with the same rules as a standard `Set`.\n     * @param other The elements that should be exluded from this stream.\n     * @param key A function returning the key used to check quality.\n     *        If omitted, the stream elements themselves are used for comparison.\n     */\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T>;\n\n}\n\nexport type FlatStream<T, Depth extends number> = {\n    'done': Stream<T>,\n    'recur': T extends Iterable<infer Content>\n        ? FlatStream<Content, MinusOne<Depth>>\n        : Stream<T>\n}[Depth extends 0 ? 'done' : 'recur'];\n\nexport type MinusOne<N extends number> = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][N];\n\n/**\n * The default implementation of `Stream` works with two input functions:\n *  - The first function creates the initial state of an iteration.\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\n */\nexport class StreamImpl<S, T> implements Stream<T> {\n    protected readonly startFn: () => S;\n    protected readonly nextFn: (state: S) => IteratorResult<T>;\n\n    constructor(startFn: () => S, nextFn: (state: S) => IteratorResult<T, undefined>) {\n        this.startFn = startFn;\n        this.nextFn = nextFn;\n    }\n\n    iterator(): IterableIterator<T> {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n\n    [Symbol.iterator](): Iterator<T> {\n        return this.iterator();\n    }\n\n    isEmpty(): boolean {\n        const iterator = this.iterator();\n        return Boolean(iterator.next().done);\n    }\n\n    count(): number {\n        const iterator = this.iterator();\n        let count = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            count++;\n            next = iterator.next();\n        }\n        return count;\n    }\n\n    toArray(): T[] {\n        const result: T[] = [];\n        const iterator = this.iterator();\n        let next: IteratorResult<T>;\n        do {\n            next = iterator.next();\n            if (next.value !== undefined) {\n                result.push(next.value);\n            }\n        } while (!next.done);\n        return result;\n    }\n\n    toSet(): Set<T> {\n        return new Set(this);\n    }\n\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V> {\n        const entryStream = this.map(element => <[K, V]>[\n            keyFn ? keyFn(element) : element,\n            valueFn ? valueFn(element) : element\n        ]);\n        return new Map(entryStream);\n    }\n\n    toString(): string {\n        return this.join();\n    }\n\n    concat<T2>(other: Iterable<T2>): Stream<T | T2> {\n        const iterator = other[Symbol.iterator]();\n        return new StreamImpl<{ first: S, firstDone: boolean }, T | T2>(\n            () => ({ first: this.startFn(), firstDone: false }),\n            state => {\n                let result: IteratorResult<T | T2>;\n                if (!state.firstDone) {\n                    do {\n                        result = this.nextFn(state.first);\n                        if (!result.done) {\n                            return result;\n                        }\n                    } while (!result.done);\n                    state.firstDone = true;\n                }\n                do {\n                    result = iterator.next();\n                    if (!result.done) {\n                        return result;\n                    }\n                } while (!result.done);\n                return DONE_RESULT;\n            }\n        );\n    }\n\n    join(separator = ','): string {\n        const iterator = this.iterator();\n        let value = '';\n        let result: IteratorResult<T>;\n        let addSeparator = false;\n        do {\n            result = iterator.next();\n            if (!result.done) {\n                if (addSeparator) {\n                    value += separator;\n                }\n                value += toString(result.value);\n            }\n            addSeparator = true;\n        } while (!result.done);\n        return value;\n    }\n\n    indexOf(searchElement: T, fromIndex = 0): number {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (index >= fromIndex && next.value === searchElement) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n\n    // In the following definition the '& this' part in the return type is important\n    // _and_ the order within 'Stream<U> & this' is crucial!\n    // Otherwise Typescript would infer the type of 'this' as 'StreamImpl<S, T> & Stream<U>'\n    // (or '<subClass of StreamImpl<S, T> & Stream<U>') and usages like\n    // ```\n    //  const stream = new StreamImpl(...);\n    //  ... stream.every(<typeGuard>) & stream....\n    // ```\n    // cannot benefit from '<typeGuard>', as Typescript would priorize the signatures\n    // of 'StreamImpl<S, T>' (i.e. those of 'Stream<T>') over those of 'Stream<U>'.\n    // With the order of 'Stream<U> & this' the signatures of 'Stream<U>' get precedence.\n    every<U extends T>(predicate: (value: T) => value is U): this is Stream<U> & this;\n    every(predicate: (value: T) => unknown): boolean;\n    every(predicate: (value: T) => unknown): boolean {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (!predicate(next.value)) {\n                return false;\n            }\n            next = iterator.next();\n        }\n        return true;\n    }\n\n    some(predicate: (value: T) => unknown): boolean {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n\n    forEach(callbackfn: (value: T, index: number) => void): void {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            callbackfn(next.value, index);\n            next = iterator.next();\n            index++;\n        }\n    }\n\n    map<U>(callbackfn: (value: T) => U): Stream<U> {\n        return new StreamImpl<S, U>(\n            this.startFn,\n            (state) => {\n                const { done, value } = this.nextFn(state);\n                if (done) {\n                    return DONE_RESULT;\n                } else {\n                    return { done: false, value: callbackfn(value) };\n                }\n            }\n        );\n    }\n\n    // for remarks on the return type definition refer to 'every<U extends T>(...)'\n    filter<U extends T>(predicate: (value: T) => value is U): Stream<U> & this;\n    filter(predicate: (value: T) => unknown): Stream<T> & this;\n    filter(predicate: (value: T) => unknown): Stream<T> {\n        return new StreamImpl<S, T>(\n            this.startFn,\n            state => {\n                let result: IteratorResult<T>;\n                do {\n                    result = this.nextFn(state);\n                    if (!result.done && predicate(result.value)) {\n                        return result;\n                    }\n                } while (!result.done);\n                return DONE_RESULT;\n            }\n        );\n    }\n\n    nonNullable(): Stream<NonNullable<T>> {\n        return this.filter(e => e !== undefined && e !== null) as Stream<NonNullable<T>>;\n    }\n\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\n    reduce<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\n        const iterator = this.iterator();\n        let previousValue: U | T | undefined = initialValue;\n        let next = iterator.next();\n        while (!next.done) {\n            if (previousValue === undefined) {\n                previousValue = next.value;\n            } else {\n                previousValue = callbackfn(previousValue, next.value);\n            }\n            next = iterator.next();\n        }\n        return previousValue;\n    }\n\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\n    reduceRight<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\n    }\n\n    protected recursiveReduce<U>(iterator: Iterator<T>, callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\n        const next = iterator.next();\n        if (next.done) {\n            return initialValue;\n        }\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\n        if (previousValue === undefined) {\n            return next.value;\n        }\n        return callbackfn(previousValue, next.value);\n    }\n\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\n    find(predicate: (value: T) => unknown): T | undefined;\n    find(predicate: (value: T) => unknown): T | undefined {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return next.value;\n            }\n            next = iterator.next();\n        }\n        return undefined;\n    }\n\n    findIndex(predicate: (value: T) => unknown): number {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n\n    includes(searchElement: T): boolean {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (next.value === searchElement) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U> {\n        type FlatMapState = { this: S, iterator?: Iterator<U, undefined> }\n        return new StreamImpl<FlatMapState, U>(\n            () => ({ this: this.startFn() }),\n            (state) => {\n                do {\n                    if (state.iterator) {\n                        const next = state.iterator.next();\n                        if (next.done) {\n                            state.iterator = undefined;\n                        } else {\n                            return next;\n                        }\n                    }\n                    const { done, value } = this.nextFn(state.this);\n                    if (!done) {\n                        const mapped = callbackfn(value);\n                        if (isIterable(mapped)) {\n                            state.iterator = mapped[Symbol.iterator]();\n                        } else {\n                            return { done: false, value: mapped };\n                        }\n                    }\n                } while (state.iterator);\n                return DONE_RESULT;\n            }\n        );\n    }\n\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D> {\n        if (depth === undefined) {\n            depth = 1 as D;\n        }\n        if (depth <= 0) {\n            return this as unknown as FlatStream<T, D>;\n        }\n        const stream = depth > 1 ? this.flat(depth - 1) as unknown as StreamImpl<S, T> : this;\n        type FlatMapState = { this: S, iterator?: Iterator<T, undefined> }\n        return new StreamImpl<FlatMapState, T>(\n            () => ({ this: stream.startFn() }),\n            (state) => {\n                do {\n                    if (state.iterator) {\n                        const next = state.iterator.next();\n                        if (next.done) {\n                            state.iterator = undefined;\n                        } else {\n                            return next;\n                        }\n                    }\n                    const { done, value } = stream.nextFn(state.this);\n                    if (!done) {\n                        if (isIterable(value)) {\n                            state.iterator = value[Symbol.iterator]() as Iterator<T>;\n                        } else {\n                            return { done: false, value: value };\n                        }\n                    }\n                } while (state.iterator);\n                return DONE_RESULT;\n            }\n        ) as unknown as FlatStream<T, D>;\n    }\n\n    head(): T | undefined {\n        const iterator = this.iterator();\n        const result = iterator.next();\n        if (result.done) {\n            return undefined;\n        }\n        return result.value;\n    }\n\n    tail(skipCount = 1): Stream<T> {\n        return new StreamImpl<S, T>(\n            () => {\n                const state = this.startFn();\n                for (let i = 0; i < skipCount; i++) {\n                    const next = this.nextFn(state);\n                    if (next.done) {\n                        return state;\n                    }\n                }\n                return state;\n            },\n            this.nextFn\n        );\n    }\n\n    limit(maxSize: number): Stream<T> {\n        return new StreamImpl<{ size: number, state: S }, T>(\n            () => ({ size: 0, state: this.startFn() }),\n            state => {\n                state.size++;\n                if (state.size > maxSize) {\n                    return DONE_RESULT;\n                }\n                return this.nextFn(state.state);\n            }\n        );\n    }\n\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T> {\n        const set = new Set<T | Key>();\n        return this.filter(e => {\n            const value = by ? by(e) : e;\n            if (set.has(value)) {\n                return false;\n            } else {\n                set.add(value);\n                return true;\n            }\n        });\n    }\n\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T> {\n        const otherKeySet = new Set<Key | T>();\n        for (const item of other) {\n            const value = key ? key(item) : item;\n            otherKeySet.add(value);\n        }\n        return this.filter(e => {\n            const ownKey = key ? key(e) : e;\n            return !otherKeySet.has(ownKey);\n        });\n    }\n}\n\nfunction toString(item: unknown): string {\n    if (typeof item === 'string') {\n        return item as string;\n    }\n    if (typeof item === 'undefined') {\n        return 'undefined';\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (typeof (item as any).toString === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return (item as any).toString();\n    }\n    return Object.prototype.toString.call(item);\n}\n\nfunction isIterable<T>(obj: unknown): obj is Iterable<T> {\n    return !!obj && typeof (obj as Iterable<T>)[Symbol.iterator] === 'function';\n}\n\n/**\n * An empty stream of any type.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const EMPTY_STREAM: Stream<any> = new StreamImpl<undefined, any>(() => undefined, () => DONE_RESULT);\n\n/**\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\n */\nexport const DONE_RESULT: IteratorReturnResult<undefined> = Object.freeze({ done: true, value: undefined });\n\n/**\n * Create a stream from one or more iterables or array-likes.\n */\nexport function stream<T>(...collections: Array<Iterable<T> | ArrayLike<T>>): Stream<T> {\n    if (collections.length === 1) {\n        const collection = collections[0];\n        if (collection instanceof StreamImpl) {\n            return collection as Stream<T>;\n        }\n        if (isIterable(collection)) {\n            return new StreamImpl<Iterator<T, undefined>, T>(\n                () => collection[Symbol.iterator](),\n                (iterator) => iterator.next()\n            );\n        }\n        if (typeof collection.length === 'number') {\n            return new StreamImpl<{ index: number }, T>(\n                () => ({ index: 0 }),\n                (state) => {\n                    if (state.index < collection.length) {\n                        return { done: false, value: collection[state.index++] };\n                    } else {\n                        return DONE_RESULT;\n                    }\n                }\n            );\n        }\n    }\n    if (collections.length > 1) {\n        type State = { collIndex: number, iterator?: Iterator<T, undefined>, array?: ArrayLike<T>, arrIndex: number };\n        return new StreamImpl<State, T>(\n            () => ({ collIndex: 0, arrIndex: 0 }),\n            (state) => {\n                do {\n                    if (state.iterator) {\n                        const next = state.iterator.next();\n                        if (!next.done) {\n                            return next;\n                        }\n                        state.iterator = undefined;\n                    }\n                    if (state.array) {\n                        if (state.arrIndex < state.array.length) {\n                            return { done: false, value: state.array[state.arrIndex++] };\n                        }\n                        state.array = undefined;\n                        state.arrIndex = 0;\n                    }\n                    if (state.collIndex < collections.length) {\n                        const collection = collections[state.collIndex++];\n                        if (isIterable(collection)) {\n                            state.iterator = collection[Symbol.iterator]();\n                        } else if (collection && typeof collection.length === 'number') {\n                            state.array = collection;\n                        }\n                    }\n                } while (state.iterator || state.array || state.collIndex < collections.length);\n                return DONE_RESULT;\n            }\n        );\n    }\n    return EMPTY_STREAM;\n}\n\n/**\n * A tree iterator adds the ability to prune the current iteration.\n */\nexport interface TreeIterator<T> extends IterableIterator<T> {\n    /**\n     * Skip the whole subtree below the last returned element. The iteration continues as if that\n     * element had no children.\n     */\n    prune(): void\n}\n\n/**\n * A tree stream is used to stream the elements of a tree, for example an AST or CST.\n */\nexport interface TreeStream<T> extends Stream<T> {\n    iterator(): TreeIterator<T>\n}\n\n/**\n * The default implementation of `TreeStream` takes a root element and a function that computes the\n * children of its argument. Whether the root node included in the stream is controlled with the\n * `includeRoot` option, which defaults to `false`.\n */\nexport class TreeStreamImpl<T>\n    extends StreamImpl<{ iterators: Array<Iterator<T>>, pruned: boolean }, T>\n    implements TreeStream<T> {\n\n    constructor(root: T, children: (node: T) => Iterable<T>, options?: { includeRoot?: boolean }) {\n        super(\n            () => ({\n                iterators: options?.includeRoot ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],\n                pruned: false\n            }),\n            state => {\n                if (state.pruned) {\n                    state.iterators.pop();\n                    state.pruned = false;\n                }\n                while (state.iterators.length > 0) {\n                    const iterator = state.iterators[state.iterators.length - 1];\n                    const next = iterator.next();\n                    if (next.done) {\n                        state.iterators.pop();\n                    } else {\n                        state.iterators.push(children(next.value)[Symbol.iterator]());\n                        return next;\n                    }\n                }\n                return DONE_RESULT;\n            }\n        );\n    }\n\n    override iterator(): TreeIterator<T> {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            prune: () => {\n                iterator.state.pruned = true;\n            },\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n}\n\n/**\n * A set of utility functions that reduce a stream to a single value.\n */\nexport namespace Reduction {\n\n    /**\n     * Compute the sum of a number stream.\n     */\n    export function sum(stream: Stream<number>): number {\n        return stream.reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Compute the product of a number stream.\n     */\n    export function product(stream: Stream<number>): number {\n        return stream.reduce((a, b) => a * b, 0);\n    }\n\n    /**\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    export function min(stream: Stream<number>): number | undefined {\n        return stream.reduce((a, b) => Math.min(a, b));\n    }\n\n    /**\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    export function max(stream: Stream<number>): number | undefined {\n        return stream.reduce((a, b) => Math.max(a, b));\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { IToken } from '@chevrotain/types';\nimport type { Range } from 'vscode-languageserver-types';\nimport type { CstNode, CompositeCstNode, LeafCstNode } from '../syntax-tree.js';\nimport type { DocumentSegment } from '../workspace/documents.js';\nimport type { Stream, TreeStream } from './stream.js';\nimport { isCompositeCstNode, isLeafCstNode, isRootCstNode } from '../syntax-tree.js';\nimport { TreeStreamImpl } from './stream.js';\n\n/**\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nexport function streamCst(node: CstNode): TreeStream<CstNode> {\n    return new TreeStreamImpl(node, element => {\n        if (isCompositeCstNode(element)) {\n            return element.content;\n        } else {\n            return [];\n        }\n    }, { includeRoot: true });\n}\n\n/**\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\n */\nexport function flattenCst(node: CstNode): Stream<LeafCstNode> {\n    return streamCst(node).filter(isLeafCstNode);\n}\n\n/**\n * Determines whether the specified cst node is a child of the specified parent node.\n */\nexport function isChildNode(child: CstNode, parent: CstNode): boolean {\n    while (child.container) {\n        child = child.container;\n        if (child === parent) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function tokenToRange(token: IToken): Range {\n    // Chevrotain uses 1-based indices everywhere\n    // So we subtract 1 from every value to align with the LSP\n    return {\n        start: {\n            character: token.startColumn! - 1,\n            line: token.startLine! - 1\n        },\n        end: {\n            character: token.endColumn!, // endColumn uses the correct index\n            line: token.endLine! - 1\n        }\n    };\n}\n\nexport function toDocumentSegment(node: CstNode): DocumentSegment;\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined;\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined {\n    if (!node) {\n        return undefined;\n    }\n    const { offset, end, range } = node;\n    return {\n        range,\n        offset,\n        end,\n        length: end - offset\n    };\n}\n\nexport enum RangeComparison {\n    Before = 0,\n    After = 1,\n    OverlapFront = 2,\n    OverlapBack = 3,\n    Inside = 4\n}\n\nexport function compareRange(range: Range, to: Range): RangeComparison {\n    if (range.end.line < to.start.line || (range.end.line === to.start.line && range.end.character < range.start.character)) {\n        return RangeComparison.Before;\n    } else if (range.start.line > to.end.line || (range.start.line === to.end.line && range.start.character > to.end.character)) {\n        return RangeComparison.After;\n    }\n    const startInside = range.start.line > to.start.line || (range.start.line === to.start.line && range.start.character >= to.start.character);\n    const endInside = range.end.line < to.end.line || (range.end.line === to.end.line && range.end.character <= to.end.character);\n    if (startInside && endInside) {\n        return RangeComparison.Inside;\n    } else if (startInside) {\n        return RangeComparison.OverlapBack;\n    } else {\n        return RangeComparison.OverlapFront;\n    }\n}\n\nexport function inRange(range: Range, to: Range): boolean {\n    const comparison = compareRange(range, to);\n    return comparison > RangeComparison.After;\n}\n\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\n// Together with \\w it matches any kind of character which can commonly appear in IDs\nexport const DefaultNameRegexp = /^[\\w\\p{L}]$/u;\n\n/**\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\n * it will instead return the leaf node at the `offset - 1` position.\n *\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\n */\nexport function findDeclarationNodeAtOffset(cstNode: CstNode | undefined, offset: number, nameRegexp = DefaultNameRegexp): LeafCstNode | undefined {\n    if (cstNode) {\n        if (offset > 0) {\n            const localOffset = offset - cstNode.offset;\n            const textAtOffset = cstNode.text.charAt(localOffset);\n            if (!nameRegexp.test(textAtOffset)) {\n                offset--;\n            }\n        }\n        return findLeafNodeAtOffset(cstNode, offset);\n    }\n    return undefined;\n}\n\nexport function findCommentNode(cstNode: CstNode | undefined, commentNames: string[]): CstNode | undefined {\n    if (cstNode) {\n        const previous = getPreviousNode(cstNode, true);\n        if (previous && isCommentNode(previous, commentNames)) {\n            return previous;\n        }\n        if (isRootCstNode(cstNode)) {\n            // Go from the first non-hidden node through all nodes in reverse order\n            // We do this to find the comment node which directly precedes the root node\n            const endIndex = cstNode.content.findIndex(e => !e.hidden);\n            for (let i = endIndex - 1; i >= 0; i--) {\n                const child = cstNode.content[i];\n                if (isCommentNode(child, commentNames)) {\n                    return child;\n                }\n            }\n        }\n    }\n    return undefined;\n}\n\nexport function isCommentNode(cstNode: CstNode, commentNames: string[]): boolean {\n    return isLeafCstNode(cstNode) && commentNames.includes(cstNode.tokenType.name);\n}\n\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * Note that the given offset will be within the range of the returned leaf node.\n *\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node at the specified offset.\n */\nexport function findLeafNodeAtOffset(node: CstNode, offset: number): LeafCstNode | undefined {\n    if (isLeafCstNode(node)) {\n        return node;\n    } else if (isCompositeCstNode(node)) {\n        const searchResult = binarySearch(node, offset, false);\n        if (searchResult) {\n            return findLeafNodeAtOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\n\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * If no CST node exists at the specified position, it will return the leaf node before it.\n *\n * If there is no leaf node before the specified offset, this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node closest to the specified offset.\n */\nexport function findLeafNodeBeforeOffset(node: CstNode, offset: number): LeafCstNode | undefined {\n    if (isLeafCstNode(node)) {\n        return node;\n    } else if (isCompositeCstNode(node)) {\n        const searchResult = binarySearch(node, offset, true);\n        if (searchResult) {\n            return findLeafNodeBeforeOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\n\nfunction binarySearch(node: CompositeCstNode, offset: number, closest: boolean): CstNode | undefined {\n    let left = 0;\n    let right = node.content.length - 1;\n    let closestNode: CstNode | undefined = undefined;\n\n    while (left <= right) {\n        const middle = Math.floor((left + right) / 2);\n        const middleNode = node.content[middle];\n\n        if (middleNode.offset <= offset && middleNode.end > offset) {\n            // Found an exact match\n            return middleNode;\n        }\n\n        if (middleNode.end <= offset) {\n            // Update the closest node (less than offset) and move to the right half\n            closestNode = closest ? middleNode : undefined;\n            left = middle + 1;\n        } else {\n            // Move to the left half\n            right = middle - 1;\n        }\n    }\n\n    return closestNode;\n}\n\nexport function getPreviousNode(node: CstNode, hidden = true): CstNode | undefined {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        while (index > 0) {\n            index--;\n            const previous = parent.content[index];\n            if (hidden || !previous.hidden) {\n                return previous;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\n\nexport function getNextNode(node: CstNode, hidden = true): CstNode | undefined {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        const last = parent.content.length - 1;\n        while (index < last) {\n            index++;\n            const next = parent.content[index];\n            if (hidden || !next.hidden) {\n                return next;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\n\nexport function getStartlineNode(node: CstNode): CstNode {\n    if (node.range.start.character === 0) {\n        return node;\n    }\n    const line = node.range.start.line;\n    let last = node;\n    let index: number | undefined;\n    while (node.container) {\n        const parent = node.container;\n        const selfIndex = index ?? parent.content.indexOf(node);\n        if (selfIndex === 0) {\n            node = parent;\n            index = undefined;\n        } else {\n            index = selfIndex - 1;\n            node = parent.content[index];\n        }\n        if (node.range.start.line !== line) {\n            break;\n        }\n        last = node;\n    }\n    return last;\n}\n\nexport function getInteriorNodes(start: CstNode, end: CstNode): CstNode[] {\n    const commonParent = getCommonParent(start, end);\n    if (!commonParent) {\n        return [];\n    }\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\n}\n\nfunction getCommonParent(a: CstNode, b: CstNode): CommonParent | undefined {\n    const aParents = getParentChain(a);\n    const bParents = getParentChain(b);\n    let current: CommonParent | undefined;\n    for (let i = 0; i < aParents.length && i < bParents.length; i++) {\n        const aParent = aParents[i];\n        const bParent = bParents[i];\n        if (aParent.parent === bParent.parent) {\n            current = {\n                parent: aParent.parent,\n                a: aParent.index,\n                b: bParent.index\n            };\n        } else {\n            break;\n        }\n    }\n    return current;\n}\n\ninterface CommonParent {\n    parent: CompositeCstNode\n    a: number\n    b: number\n}\n\nfunction getParentChain(node: CstNode): ParentLink[] {\n    const chain: ParentLink[] = [];\n    while (node.container) {\n        const parent = node.container;\n        const index = parent.content.indexOf(node);\n        chain.push({\n            parent,\n            index\n        });\n        node = parent;\n    }\n    return chain.reverse();\n}\n\ninterface ParentLink {\n    parent: CompositeCstNode\n    index: number\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { CstNode } from '../syntax-tree.js';\n\nexport class ErrorWithLocation extends Error {\n    constructor(node: CstNode | undefined, message: string) {\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\n    }\n}\n\nexport function assertUnreachable(_: never): never {\n    throw new Error('Error! The input value was not handled.');\n}\n","/******************************************************************************\n * This file was generated by langium-cli 3.0.0.\n * DO NOT EDIT MANUALLY!\n ******************************************************************************/\n\n/* eslint-disable */\nimport type { AstNode, Reference, ReferenceInfo, TypeMetaData } from '../../syntax-tree.js';\nimport { AbstractAstReflection } from '../../syntax-tree.js';\n\nexport const LangiumGrammarTerminals = {\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\n    WS: /\\s+/,\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\n};\n\nexport type AbstractRule = ParserRule | TerminalRule;\n\nexport const AbstractRule = 'AbstractRule';\n\nexport function isAbstractRule(item: unknown): item is AbstractRule {\n    return reflection.isInstance(item, AbstractRule);\n}\n\nexport type AbstractType = InferredType | Interface | ParserRule | Type;\n\nexport const AbstractType = 'AbstractType';\n\nexport function isAbstractType(item: unknown): item is AbstractType {\n    return reflection.isInstance(item, AbstractType);\n}\n\nexport type Condition = BooleanLiteral | Conjunction | Disjunction | Negation | ParameterReference;\n\nexport const Condition = 'Condition';\n\nexport function isCondition(item: unknown): item is Condition {\n    return reflection.isInstance(item, Condition);\n}\n\nexport type FeatureName = 'current' | 'entry' | 'extends' | 'false' | 'fragment' | 'grammar' | 'hidden' | 'import' | 'infer' | 'infers' | 'interface' | 'returns' | 'terminal' | 'true' | 'type' | 'with' | PrimitiveType | string;\n\nexport function isFeatureName(item: unknown): item is FeatureName {\n    return isPrimitiveType(item) || item === 'current' || item === 'entry' || item === 'extends' || item === 'false' || item === 'fragment' || item === 'grammar' || item === 'hidden' || item === 'import' || item === 'interface' || item === 'returns' || item === 'terminal' || item === 'true' || item === 'type' || item === 'infer' || item === 'infers' || item === 'with' || (typeof item === 'string' && (/\\^?[_a-zA-Z][\\w_]*/.test(item)));\n}\n\nexport type PrimitiveType = 'Date' | 'bigint' | 'boolean' | 'number' | 'string';\n\nexport function isPrimitiveType(item: unknown): item is PrimitiveType {\n    return item === 'string' || item === 'number' || item === 'boolean' || item === 'Date' || item === 'bigint';\n}\n\nexport type TypeDefinition = ArrayType | ReferenceType | SimpleType | UnionType;\n\nexport const TypeDefinition = 'TypeDefinition';\n\nexport function isTypeDefinition(item: unknown): item is TypeDefinition {\n    return reflection.isInstance(item, TypeDefinition);\n}\n\nexport type ValueLiteral = ArrayLiteral | BooleanLiteral | NumberLiteral | StringLiteral;\n\nexport const ValueLiteral = 'ValueLiteral';\n\nexport function isValueLiteral(item: unknown): item is ValueLiteral {\n    return reflection.isInstance(item, ValueLiteral);\n}\n\nexport interface AbstractElement extends AstNode {\n    readonly $type: 'AbstractElement' | 'Action' | 'Alternatives' | 'Assignment' | 'CharacterRange' | 'CrossReference' | 'EndOfFile' | 'Group' | 'Keyword' | 'NegatedToken' | 'RegexToken' | 'RuleCall' | 'TerminalAlternatives' | 'TerminalGroup' | 'TerminalRuleCall' | 'UnorderedGroup' | 'UntilToken' | 'Wildcard';\n    cardinality?: '*' | '+' | '?';\n    lookahead?: '?!' | '?<!' | '?<=' | '?=';\n}\n\nexport const AbstractElement = 'AbstractElement';\n\nexport function isAbstractElement(item: unknown): item is AbstractElement {\n    return reflection.isInstance(item, AbstractElement);\n}\n\nexport interface ArrayLiteral extends AstNode {\n    readonly $container: ArrayLiteral | TypeAttribute;\n    readonly $type: 'ArrayLiteral';\n    elements: Array<ValueLiteral>;\n}\n\nexport const ArrayLiteral = 'ArrayLiteral';\n\nexport function isArrayLiteral(item: unknown): item is ArrayLiteral {\n    return reflection.isInstance(item, ArrayLiteral);\n}\n\nexport interface ArrayType extends AstNode {\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\n    readonly $type: 'ArrayType';\n    elementType: TypeDefinition;\n}\n\nexport const ArrayType = 'ArrayType';\n\nexport function isArrayType(item: unknown): item is ArrayType {\n    return reflection.isInstance(item, ArrayType);\n}\n\nexport interface BooleanLiteral extends AstNode {\n    readonly $container: ArrayLiteral | Conjunction | Disjunction | Group | NamedArgument | Negation | TypeAttribute;\n    readonly $type: 'BooleanLiteral';\n    true: boolean;\n}\n\nexport const BooleanLiteral = 'BooleanLiteral';\n\nexport function isBooleanLiteral(item: unknown): item is BooleanLiteral {\n    return reflection.isInstance(item, BooleanLiteral);\n}\n\nexport interface Conjunction extends AstNode {\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\n    readonly $type: 'Conjunction';\n    left: Condition;\n    right: Condition;\n}\n\nexport const Conjunction = 'Conjunction';\n\nexport function isConjunction(item: unknown): item is Conjunction {\n    return reflection.isInstance(item, Conjunction);\n}\n\nexport interface Disjunction extends AstNode {\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\n    readonly $type: 'Disjunction';\n    left: Condition;\n    right: Condition;\n}\n\nexport const Disjunction = 'Disjunction';\n\nexport function isDisjunction(item: unknown): item is Disjunction {\n    return reflection.isInstance(item, Disjunction);\n}\n\nexport interface Grammar extends AstNode {\n    readonly $type: 'Grammar';\n    definesHiddenTokens: boolean;\n    hiddenTokens: Array<Reference<AbstractRule>>;\n    imports: Array<GrammarImport>;\n    interfaces: Array<Interface>;\n    isDeclared: boolean;\n    name?: string;\n    rules: Array<AbstractRule>;\n    types: Array<Type>;\n    usedGrammars: Array<Reference<Grammar>>;\n}\n\nexport const Grammar = 'Grammar';\n\nexport function isGrammar(item: unknown): item is Grammar {\n    return reflection.isInstance(item, Grammar);\n}\n\nexport interface GrammarImport extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'GrammarImport';\n    path: string;\n}\n\nexport const GrammarImport = 'GrammarImport';\n\nexport function isGrammarImport(item: unknown): item is GrammarImport {\n    return reflection.isInstance(item, GrammarImport);\n}\n\nexport interface InferredType extends AstNode {\n    readonly $container: Action | ParserRule;\n    readonly $type: 'InferredType';\n    name: string;\n}\n\nexport const InferredType = 'InferredType';\n\nexport function isInferredType(item: unknown): item is InferredType {\n    return reflection.isInstance(item, InferredType);\n}\n\nexport interface Interface extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'Interface';\n    attributes: Array<TypeAttribute>;\n    name: string;\n    superTypes: Array<Reference<AbstractType>>;\n}\n\nexport const Interface = 'Interface';\n\nexport function isInterface(item: unknown): item is Interface {\n    return reflection.isInstance(item, Interface);\n}\n\nexport interface NamedArgument extends AstNode {\n    readonly $container: RuleCall;\n    readonly $type: 'NamedArgument';\n    calledByName: boolean;\n    parameter?: Reference<Parameter>;\n    value: Condition;\n}\n\nexport const NamedArgument = 'NamedArgument';\n\nexport function isNamedArgument(item: unknown): item is NamedArgument {\n    return reflection.isInstance(item, NamedArgument);\n}\n\nexport interface Negation extends AstNode {\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\n    readonly $type: 'Negation';\n    value: Condition;\n}\n\nexport const Negation = 'Negation';\n\nexport function isNegation(item: unknown): item is Negation {\n    return reflection.isInstance(item, Negation);\n}\n\nexport interface NumberLiteral extends AstNode {\n    readonly $container: ArrayLiteral | TypeAttribute;\n    readonly $type: 'NumberLiteral';\n    value: number;\n}\n\nexport const NumberLiteral = 'NumberLiteral';\n\nexport function isNumberLiteral(item: unknown): item is NumberLiteral {\n    return reflection.isInstance(item, NumberLiteral);\n}\n\nexport interface Parameter extends AstNode {\n    readonly $container: ParserRule;\n    readonly $type: 'Parameter';\n    name: string;\n}\n\nexport const Parameter = 'Parameter';\n\nexport function isParameter(item: unknown): item is Parameter {\n    return reflection.isInstance(item, Parameter);\n}\n\nexport interface ParameterReference extends AstNode {\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\n    readonly $type: 'ParameterReference';\n    parameter: Reference<Parameter>;\n}\n\nexport const ParameterReference = 'ParameterReference';\n\nexport function isParameterReference(item: unknown): item is ParameterReference {\n    return reflection.isInstance(item, ParameterReference);\n}\n\nexport interface ParserRule extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'ParserRule';\n    dataType?: PrimitiveType;\n    definesHiddenTokens: boolean;\n    definition: AbstractElement;\n    entry: boolean;\n    fragment: boolean;\n    hiddenTokens: Array<Reference<AbstractRule>>;\n    inferredType?: InferredType;\n    name: string;\n    parameters: Array<Parameter>;\n    returnType?: Reference<AbstractType>;\n    wildcard: boolean;\n}\n\nexport const ParserRule = 'ParserRule';\n\nexport function isParserRule(item: unknown): item is ParserRule {\n    return reflection.isInstance(item, ParserRule);\n}\n\nexport interface ReferenceType extends AstNode {\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\n    readonly $type: 'ReferenceType';\n    referenceType: TypeDefinition;\n}\n\nexport const ReferenceType = 'ReferenceType';\n\nexport function isReferenceType(item: unknown): item is ReferenceType {\n    return reflection.isInstance(item, ReferenceType);\n}\n\nexport interface ReturnType extends AstNode {\n    readonly $container: TerminalRule;\n    readonly $type: 'ReturnType';\n    name: PrimitiveType | string;\n}\n\nexport const ReturnType = 'ReturnType';\n\nexport function isReturnType(item: unknown): item is ReturnType {\n    return reflection.isInstance(item, ReturnType);\n}\n\nexport interface SimpleType extends AstNode {\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\n    readonly $type: 'SimpleType';\n    primitiveType?: PrimitiveType;\n    stringType?: string;\n    typeRef?: Reference<AbstractType>;\n}\n\nexport const SimpleType = 'SimpleType';\n\nexport function isSimpleType(item: unknown): item is SimpleType {\n    return reflection.isInstance(item, SimpleType);\n}\n\nexport interface StringLiteral extends AstNode {\n    readonly $container: ArrayLiteral | TypeAttribute;\n    readonly $type: 'StringLiteral';\n    value: string;\n}\n\nexport const StringLiteral = 'StringLiteral';\n\nexport function isStringLiteral(item: unknown): item is StringLiteral {\n    return reflection.isInstance(item, StringLiteral);\n}\n\nexport interface TerminalRule extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'TerminalRule';\n    definition: AbstractElement;\n    fragment: boolean;\n    hidden: boolean;\n    name: string;\n    type?: ReturnType;\n}\n\nexport const TerminalRule = 'TerminalRule';\n\nexport function isTerminalRule(item: unknown): item is TerminalRule {\n    return reflection.isInstance(item, TerminalRule);\n}\n\nexport interface Type extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'Type';\n    name: string;\n    type: TypeDefinition;\n}\n\nexport const Type = 'Type';\n\nexport function isType(item: unknown): item is Type {\n    return reflection.isInstance(item, Type);\n}\n\nexport interface TypeAttribute extends AstNode {\n    readonly $container: Interface;\n    readonly $type: 'TypeAttribute';\n    defaultValue?: ValueLiteral;\n    isOptional: boolean;\n    name: FeatureName;\n    type: TypeDefinition;\n}\n\nexport const TypeAttribute = 'TypeAttribute';\n\nexport function isTypeAttribute(item: unknown): item is TypeAttribute {\n    return reflection.isInstance(item, TypeAttribute);\n}\n\nexport interface UnionType extends AstNode {\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\n    readonly $type: 'UnionType';\n    types: Array<TypeDefinition>;\n}\n\nexport const UnionType = 'UnionType';\n\nexport function isUnionType(item: unknown): item is UnionType {\n    return reflection.isInstance(item, UnionType);\n}\n\nexport interface Action extends AbstractElement {\n    readonly $type: 'Action';\n    feature?: FeatureName;\n    inferredType?: InferredType;\n    operator?: '+=' | '=';\n    type?: Reference<AbstractType>;\n}\n\nexport const Action = 'Action';\n\nexport function isAction(item: unknown): item is Action {\n    return reflection.isInstance(item, Action);\n}\n\nexport interface Alternatives extends AbstractElement {\n    readonly $type: 'Alternatives';\n    elements: Array<AbstractElement>;\n}\n\nexport const Alternatives = 'Alternatives';\n\nexport function isAlternatives(item: unknown): item is Alternatives {\n    return reflection.isInstance(item, Alternatives);\n}\n\nexport interface Assignment extends AbstractElement {\n    readonly $type: 'Assignment';\n    feature: FeatureName;\n    operator: '+=' | '=' | '?=';\n    terminal: AbstractElement;\n}\n\nexport const Assignment = 'Assignment';\n\nexport function isAssignment(item: unknown): item is Assignment {\n    return reflection.isInstance(item, Assignment);\n}\n\nexport interface CharacterRange extends AbstractElement {\n    readonly $type: 'CharacterRange';\n    left: Keyword;\n    right?: Keyword;\n}\n\nexport const CharacterRange = 'CharacterRange';\n\nexport function isCharacterRange(item: unknown): item is CharacterRange {\n    return reflection.isInstance(item, CharacterRange);\n}\n\nexport interface CrossReference extends AbstractElement {\n    readonly $type: 'CrossReference';\n    deprecatedSyntax: boolean;\n    terminal?: AbstractElement;\n    type: Reference<AbstractType>;\n}\n\nexport const CrossReference = 'CrossReference';\n\nexport function isCrossReference(item: unknown): item is CrossReference {\n    return reflection.isInstance(item, CrossReference);\n}\n\nexport interface EndOfFile extends AbstractElement {\n    readonly $type: 'EndOfFile';\n}\n\nexport const EndOfFile = 'EndOfFile';\n\nexport function isEndOfFile(item: unknown): item is EndOfFile {\n    return reflection.isInstance(item, EndOfFile);\n}\n\nexport interface Group extends AbstractElement {\n    readonly $type: 'Group';\n    elements: Array<AbstractElement>;\n    guardCondition?: Condition;\n}\n\nexport const Group = 'Group';\n\nexport function isGroup(item: unknown): item is Group {\n    return reflection.isInstance(item, Group);\n}\n\nexport interface Keyword extends AbstractElement {\n    readonly $container: CharacterRange;\n    readonly $type: 'Keyword';\n    value: string;\n}\n\nexport const Keyword = 'Keyword';\n\nexport function isKeyword(item: unknown): item is Keyword {\n    return reflection.isInstance(item, Keyword);\n}\n\nexport interface NegatedToken extends AbstractElement {\n    readonly $type: 'NegatedToken';\n    terminal: AbstractElement;\n}\n\nexport const NegatedToken = 'NegatedToken';\n\nexport function isNegatedToken(item: unknown): item is NegatedToken {\n    return reflection.isInstance(item, NegatedToken);\n}\n\nexport interface RegexToken extends AbstractElement {\n    readonly $type: 'RegexToken';\n    regex: string;\n}\n\nexport const RegexToken = 'RegexToken';\n\nexport function isRegexToken(item: unknown): item is RegexToken {\n    return reflection.isInstance(item, RegexToken);\n}\n\nexport interface RuleCall extends AbstractElement {\n    readonly $type: 'RuleCall';\n    arguments: Array<NamedArgument>;\n    rule: Reference<AbstractRule>;\n}\n\nexport const RuleCall = 'RuleCall';\n\nexport function isRuleCall(item: unknown): item is RuleCall {\n    return reflection.isInstance(item, RuleCall);\n}\n\nexport interface TerminalAlternatives extends AbstractElement {\n    readonly $type: 'TerminalAlternatives';\n    elements: Array<AbstractElement>;\n}\n\nexport const TerminalAlternatives = 'TerminalAlternatives';\n\nexport function isTerminalAlternatives(item: unknown): item is TerminalAlternatives {\n    return reflection.isInstance(item, TerminalAlternatives);\n}\n\nexport interface TerminalGroup extends AbstractElement {\n    readonly $type: 'TerminalGroup';\n    elements: Array<AbstractElement>;\n}\n\nexport const TerminalGroup = 'TerminalGroup';\n\nexport function isTerminalGroup(item: unknown): item is TerminalGroup {\n    return reflection.isInstance(item, TerminalGroup);\n}\n\nexport interface TerminalRuleCall extends AbstractElement {\n    readonly $type: 'TerminalRuleCall';\n    rule: Reference<TerminalRule>;\n}\n\nexport const TerminalRuleCall = 'TerminalRuleCall';\n\nexport function isTerminalRuleCall(item: unknown): item is TerminalRuleCall {\n    return reflection.isInstance(item, TerminalRuleCall);\n}\n\nexport interface UnorderedGroup extends AbstractElement {\n    readonly $type: 'UnorderedGroup';\n    elements: Array<AbstractElement>;\n}\n\nexport const UnorderedGroup = 'UnorderedGroup';\n\nexport function isUnorderedGroup(item: unknown): item is UnorderedGroup {\n    return reflection.isInstance(item, UnorderedGroup);\n}\n\nexport interface UntilToken extends AbstractElement {\n    readonly $type: 'UntilToken';\n    terminal: AbstractElement;\n}\n\nexport const UntilToken = 'UntilToken';\n\nexport function isUntilToken(item: unknown): item is UntilToken {\n    return reflection.isInstance(item, UntilToken);\n}\n\nexport interface Wildcard extends AbstractElement {\n    readonly $type: 'Wildcard';\n}\n\nexport const Wildcard = 'Wildcard';\n\nexport function isWildcard(item: unknown): item is Wildcard {\n    return reflection.isInstance(item, Wildcard);\n}\n\nexport type LangiumGrammarAstType = {\n    AbstractElement: AbstractElement\n    AbstractRule: AbstractRule\n    AbstractType: AbstractType\n    Action: Action\n    Alternatives: Alternatives\n    ArrayLiteral: ArrayLiteral\n    ArrayType: ArrayType\n    Assignment: Assignment\n    BooleanLiteral: BooleanLiteral\n    CharacterRange: CharacterRange\n    Condition: Condition\n    Conjunction: Conjunction\n    CrossReference: CrossReference\n    Disjunction: Disjunction\n    EndOfFile: EndOfFile\n    Grammar: Grammar\n    GrammarImport: GrammarImport\n    Group: Group\n    InferredType: InferredType\n    Interface: Interface\n    Keyword: Keyword\n    NamedArgument: NamedArgument\n    NegatedToken: NegatedToken\n    Negation: Negation\n    NumberLiteral: NumberLiteral\n    Parameter: Parameter\n    ParameterReference: ParameterReference\n    ParserRule: ParserRule\n    ReferenceType: ReferenceType\n    RegexToken: RegexToken\n    ReturnType: ReturnType\n    RuleCall: RuleCall\n    SimpleType: SimpleType\n    StringLiteral: StringLiteral\n    TerminalAlternatives: TerminalAlternatives\n    TerminalGroup: TerminalGroup\n    TerminalRule: TerminalRule\n    TerminalRuleCall: TerminalRuleCall\n    Type: Type\n    TypeAttribute: TypeAttribute\n    TypeDefinition: TypeDefinition\n    UnionType: UnionType\n    UnorderedGroup: UnorderedGroup\n    UntilToken: UntilToken\n    ValueLiteral: ValueLiteral\n    Wildcard: Wildcard\n}\n\nexport class LangiumGrammarAstReflection extends AbstractAstReflection {\n\n    getAllTypes(): string[] {\n        return ['AbstractElement', 'AbstractRule', 'AbstractType', 'Action', 'Alternatives', 'ArrayLiteral', 'ArrayType', 'Assignment', 'BooleanLiteral', 'CharacterRange', 'Condition', 'Conjunction', 'CrossReference', 'Disjunction', 'EndOfFile', 'Grammar', 'GrammarImport', 'Group', 'InferredType', 'Interface', 'Keyword', 'NamedArgument', 'NegatedToken', 'Negation', 'NumberLiteral', 'Parameter', 'ParameterReference', 'ParserRule', 'ReferenceType', 'RegexToken', 'ReturnType', 'RuleCall', 'SimpleType', 'StringLiteral', 'TerminalAlternatives', 'TerminalGroup', 'TerminalRule', 'TerminalRuleCall', 'Type', 'TypeAttribute', 'TypeDefinition', 'UnionType', 'UnorderedGroup', 'UntilToken', 'ValueLiteral', 'Wildcard'];\n    }\n\n    protected override computeIsSubtype(subtype: string, supertype: string): boolean {\n        switch (subtype) {\n            case Action:\n            case Alternatives:\n            case Assignment:\n            case CharacterRange:\n            case CrossReference:\n            case EndOfFile:\n            case Group:\n            case Keyword:\n            case NegatedToken:\n            case RegexToken:\n            case RuleCall:\n            case TerminalAlternatives:\n            case TerminalGroup:\n            case TerminalRuleCall:\n            case UnorderedGroup:\n            case UntilToken:\n            case Wildcard: {\n                return this.isSubtype(AbstractElement, supertype);\n            }\n            case ArrayLiteral:\n            case NumberLiteral:\n            case StringLiteral: {\n                return this.isSubtype(ValueLiteral, supertype);\n            }\n            case ArrayType:\n            case ReferenceType:\n            case SimpleType:\n            case UnionType: {\n                return this.isSubtype(TypeDefinition, supertype);\n            }\n            case BooleanLiteral: {\n                return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\n            }\n            case Conjunction:\n            case Disjunction:\n            case Negation:\n            case ParameterReference: {\n                return this.isSubtype(Condition, supertype);\n            }\n            case InferredType:\n            case Interface:\n            case Type: {\n                return this.isSubtype(AbstractType, supertype);\n            }\n            case ParserRule: {\n                return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\n            }\n            case TerminalRule: {\n                return this.isSubtype(AbstractRule, supertype);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    getReferenceType(refInfo: ReferenceInfo): string {\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n        switch (referenceId) {\n            case 'Action:type':\n            case 'CrossReference:type':\n            case 'Interface:superTypes':\n            case 'ParserRule:returnType':\n            case 'SimpleType:typeRef': {\n                return AbstractType;\n            }\n            case 'Grammar:hiddenTokens':\n            case 'ParserRule:hiddenTokens':\n            case 'RuleCall:rule': {\n                return AbstractRule;\n            }\n            case 'Grammar:usedGrammars': {\n                return Grammar;\n            }\n            case 'NamedArgument:parameter':\n            case 'ParameterReference:parameter': {\n                return Parameter;\n            }\n            case 'TerminalRuleCall:rule': {\n                return TerminalRule;\n            }\n            default: {\n                throw new Error(`${referenceId} is not a valid reference id.`);\n            }\n        }\n    }\n\n    getTypeMetaData(type: string): TypeMetaData {\n        switch (type) {\n            case 'AbstractElement': {\n                return {\n                    name: 'AbstractElement',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'ArrayLiteral': {\n                return {\n                    name: 'ArrayLiteral',\n                    properties: [\n                        { name: 'elements', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'ArrayType': {\n                return {\n                    name: 'ArrayType',\n                    properties: [\n                        { name: 'elementType' }\n                    ]\n                };\n            }\n            case 'BooleanLiteral': {\n                return {\n                    name: 'BooleanLiteral',\n                    properties: [\n                        { name: 'true', defaultValue: false }\n                    ]\n                };\n            }\n            case 'Conjunction': {\n                return {\n                    name: 'Conjunction',\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case 'Disjunction': {\n                return {\n                    name: 'Disjunction',\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case 'Grammar': {\n                return {\n                    name: 'Grammar',\n                    properties: [\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'imports', defaultValue: [] },\n                        { name: 'interfaces', defaultValue: [] },\n                        { name: 'isDeclared', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'rules', defaultValue: [] },\n                        { name: 'types', defaultValue: [] },\n                        { name: 'usedGrammars', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'GrammarImport': {\n                return {\n                    name: 'GrammarImport',\n                    properties: [\n                        { name: 'path' }\n                    ]\n                };\n            }\n            case 'InferredType': {\n                return {\n                    name: 'InferredType',\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case 'Interface': {\n                return {\n                    name: 'Interface',\n                    properties: [\n                        { name: 'attributes', defaultValue: [] },\n                        { name: 'name' },\n                        { name: 'superTypes', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'NamedArgument': {\n                return {\n                    name: 'NamedArgument',\n                    properties: [\n                        { name: 'calledByName', defaultValue: false },\n                        { name: 'parameter' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'Negation': {\n                return {\n                    name: 'Negation',\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'NumberLiteral': {\n                return {\n                    name: 'NumberLiteral',\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'Parameter': {\n                return {\n                    name: 'Parameter',\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case 'ParameterReference': {\n                return {\n                    name: 'ParameterReference',\n                    properties: [\n                        { name: 'parameter' }\n                    ]\n                };\n            }\n            case 'ParserRule': {\n                return {\n                    name: 'ParserRule',\n                    properties: [\n                        { name: 'dataType' },\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'definition' },\n                        { name: 'entry', defaultValue: false },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'inferredType' },\n                        { name: 'name' },\n                        { name: 'parameters', defaultValue: [] },\n                        { name: 'returnType' },\n                        { name: 'wildcard', defaultValue: false }\n                    ]\n                };\n            }\n            case 'ReferenceType': {\n                return {\n                    name: 'ReferenceType',\n                    properties: [\n                        { name: 'referenceType' }\n                    ]\n                };\n            }\n            case 'ReturnType': {\n                return {\n                    name: 'ReturnType',\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case 'SimpleType': {\n                return {\n                    name: 'SimpleType',\n                    properties: [\n                        { name: 'primitiveType' },\n                        { name: 'stringType' },\n                        { name: 'typeRef' }\n                    ]\n                };\n            }\n            case 'StringLiteral': {\n                return {\n                    name: 'StringLiteral',\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'TerminalRule': {\n                return {\n                    name: 'TerminalRule',\n                    properties: [\n                        { name: 'definition' },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hidden', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'Type': {\n                return {\n                    name: 'Type',\n                    properties: [\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'TypeAttribute': {\n                return {\n                    name: 'TypeAttribute',\n                    properties: [\n                        { name: 'defaultValue' },\n                        { name: 'isOptional', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'UnionType': {\n                return {\n                    name: 'UnionType',\n                    properties: [\n                        { name: 'types', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'Action': {\n                return {\n                    name: 'Action',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'inferredType' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'Alternatives': {\n                return {\n                    name: 'Alternatives',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'Assignment': {\n                return {\n                    name: 'Assignment',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case 'CharacterRange': {\n                return {\n                    name: 'CharacterRange',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'left' },\n                        { name: 'lookahead' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case 'CrossReference': {\n                return {\n                    name: 'CrossReference',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'deprecatedSyntax', defaultValue: false },\n                        { name: 'lookahead' },\n                        { name: 'terminal' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'EndOfFile': {\n                return {\n                    name: 'EndOfFile',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'Group': {\n                return {\n                    name: 'Group',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'guardCondition' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'Keyword': {\n                return {\n                    name: 'Keyword',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'NegatedToken': {\n                return {\n                    name: 'NegatedToken',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case 'RegexToken': {\n                return {\n                    name: 'RegexToken',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'regex' }\n                    ]\n                };\n            }\n            case 'RuleCall': {\n                return {\n                    name: 'RuleCall',\n                    properties: [\n                        { name: 'arguments', defaultValue: [] },\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case 'TerminalAlternatives': {\n                return {\n                    name: 'TerminalAlternatives',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'TerminalGroup': {\n                return {\n                    name: 'TerminalGroup',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'TerminalRuleCall': {\n                return {\n                    name: 'TerminalRuleCall',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case 'UnorderedGroup': {\n                return {\n                    name: 'UnorderedGroup',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'UntilToken': {\n                return {\n                    name: 'UntilToken',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case 'Wildcard': {\n                return {\n                    name: 'Wildcard',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            default: {\n                return {\n                    name: type,\n                    properties: []\n                };\n            }\n        }\n    }\n}\n\nexport const reflection = new LangiumGrammarAstReflection();\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { Range } from 'vscode-languageserver-types';\nimport type { AstNode, AstReflection, CstNode, GenericAstNode, Mutable, PropertyType, Reference, ReferenceInfo } from '../syntax-tree.js';\nimport type { Stream, TreeStream } from './stream.js';\nimport type { LangiumDocument } from '../workspace/documents.js';\nimport { isAstNode, isReference } from '../syntax-tree.js';\nimport { DONE_RESULT, stream, StreamImpl, TreeStreamImpl } from './stream.js';\nimport { inRange } from './cst-utils.js';\n\n/**\n * Link the `$container` and other related properties of every AST node that is directly contained\n * in the given `node`.\n */\nexport function linkContentToContainer(node: AstNode): void {\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if (Array.isArray(value)) {\n                value.forEach((item, index) => {\n                    if (isAstNode(item)) {\n                        (item as Mutable<AstNode>).$container = node;\n                        (item as Mutable<AstNode>).$containerProperty = name;\n                        (item as Mutable<AstNode>).$containerIndex = index;\n                    }\n                });\n            } else if (isAstNode(value)) {\n                (value as Mutable<AstNode>).$container = node;\n                (value as Mutable<AstNode>).$containerProperty = name;\n            }\n        }\n    }\n}\n\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\n * node that matches the type predicate. If the start node itself matches, it is returned.\n * If no container matches, `undefined` is returned.\n */\nexport function getContainerOfType<T extends AstNode>(node: AstNode | undefined, typePredicate: (n: AstNode) => n is T): T | undefined {\n    let item = node;\n    while (item) {\n        if (typePredicate(item)) {\n            return item;\n        }\n        item = item.$container;\n    }\n    return undefined;\n}\n\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\n * of a container that matches the given predicate. The start node is included in the checks.\n */\nexport function hasContainerOfType(node: AstNode | undefined, predicate: (n: AstNode) => boolean): boolean {\n    let item = node;\n    while (item) {\n        if (predicate(item)) {\n            return true;\n        }\n        item = item.$container;\n    }\n    return false;\n}\n\n/**\n * Retrieve the document in which the given AST node is contained. A reference to the document is\n * usually held by the root node of the AST.\n *\n * @throws an error if the node is not contained in a document.\n */\nexport function getDocument<T extends AstNode = AstNode>(node: AstNode): LangiumDocument<T> {\n    const rootNode = findRootNode(node);\n    const result = rootNode.$document;\n    if (!result) {\n        throw new Error('AST node has no document.');\n    }\n    return result as LangiumDocument<T>;\n}\n\n/**\n * Returns the root node of the given AST node by following the `$container` references.\n */\nexport function findRootNode(node: AstNode): AstNode {\n    while (node.$container) {\n        node = node.$container;\n    }\n    return node;\n}\n\nexport interface AstStreamOptions {\n    /**\n     * Optional target range that the nodes in the stream need to intersect\n     */\n    range?: Range\n}\n\n/**\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nexport function streamContents(node: AstNode, options?: AstStreamOptions): Stream<AstNode> {\n    if (!node) {\n        throw new Error('Node must be an AstNode.');\n    }\n    const range = options?.range;\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\n    return new StreamImpl<State, AstNode>(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = (node as GenericAstNode)[property];\n                if (isAstNode(value)) {\n                    state.keyIndex++;\n                    if (isAstNodeInRange(value, range)) {\n                        return { done: false, value };\n                    }\n                } else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if (isAstNode(element) && isAstNodeInRange(element, range)) {\n                            return { done: false, value: element };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return DONE_RESULT;\n    });\n}\n\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\n * This does not include the root node itself.\n */\nexport function streamAllContents(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    }\n    return new TreeStreamImpl(root, node => streamContents(node, options));\n}\n\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nexport function streamAst(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    } else if (options?.range && !isAstNodeInRange(root, options.range)) {\n        // Return an empty stream if the root node isn't in range\n        return new TreeStreamImpl(root, () => []);\n    }\n    return new TreeStreamImpl(root, node => streamContents(node, options), { includeRoot: true });\n}\n\nfunction isAstNodeInRange(astNode: AstNode, range?: Range): boolean {\n    if (!range) {\n        return true;\n    }\n    const nodeRange = astNode.$cstNode?.range;\n    if (!nodeRange) {\n        return false;\n    }\n    return inRange(nodeRange, range);\n}\n\n/**\n * Create a stream of all cross-references that are held by the given AST node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nexport function streamReferences(node: AstNode): Stream<ReferenceInfo> {\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\n    return new StreamImpl<State, ReferenceInfo>(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = (node as GenericAstNode)[property];\n                if (isReference(value)) {\n                    state.keyIndex++;\n                    return { done: false, value: { reference: value, container: node, property } };\n                } else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if (isReference(element)) {\n                            return { done: false, value: { reference: element, container: node, property, index } };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return DONE_RESULT;\n    });\n}\n\n/**\n * Returns a Stream of references to the target node from the AstNode tree\n *\n * @param targetNode AstNode we are looking for\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\n */\nexport function findLocalReferences(targetNode: AstNode, lookup = getDocument(targetNode).parseResult.value): Stream<Reference> {\n    const refs: Reference[] = [];\n    streamAst(lookup).forEach(node => {\n        streamReferences(node).forEach(refInfo => {\n            if (refInfo.reference.ref === targetNode) {\n                refs.push(refInfo.reference);\n            }\n        });\n    });\n    return stream(refs);\n}\n\n/**\n * Assigns all mandatory AST properties to the specified node.\n *\n * @param reflection Reflection object used to gather mandatory properties for the node.\n * @param node Specified node is modified in place and properties are directly assigned.\n */\nexport function assignMandatoryProperties(reflection: AstReflection, node: AstNode): void {\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\n    const genericNode = node as GenericAstNode;\n    for (const property of typeMetaData.properties) {\n        // Only set the value if the property is not already set and if it has a default value\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\n        }\n    }\n}\n\nfunction copyDefaultValue(propertyType: PropertyType): PropertyType {\n    if (Array.isArray(propertyType)) {\n        return [...propertyType.map(copyDefaultValue)];\n    } else {\n        return propertyType;\n    }\n}\n\n/**\n * Creates a deep copy of the specified AST node.\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\n *\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\n */\nexport function copyAstNode<T extends AstNode = AstNode>(node: T, buildReference: (node: AstNode, property: string, refNode: CstNode | undefined, refText: string) => Reference<AstNode>): T {\n    const copy: GenericAstNode = { $type: node.$type };\n\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if (isAstNode(value)) {\n                copy[name] = copyAstNode(value, buildReference);\n            } else if (isReference(value)) {\n                copy[name] = buildReference(\n                    copy,\n                    name,\n                    value.$refNode,\n                    value.$refText\n                );\n            } else if (Array.isArray(value)) {\n                const copiedArray: unknown[] = [];\n                for (const element of value) {\n                    if (isAstNode(element)) {\n                        copiedArray.push(copyAstNode(element, buildReference));\n                    } else if (isReference(element)) {\n                        copiedArray.push(\n                            buildReference(\n                                copy,\n                                name,\n                                element.$refNode,\n                                element.$refText\n                            )\n                        );\n                    } else {\n                        copiedArray.push(element);\n                    }\n                }\n                copy[name] = copiedArray;\n            } else {\n                copy[name] = value;\n            }\n        }\n    }\n\n    linkContentToContainer(copy);\n    return copy as unknown as T;\n}\n","import type { Character, IRegExpAST, RegExpFlags } from \"../types\";\n\nexport function cc(char: string): number {\n  return char.charCodeAt(0);\n}\n\nexport function insertToSet<T>(item: T | T[], set: T[]) {\n  if (Array.isArray(item)) {\n    item.forEach(function (subItem) {\n      set.push(subItem);\n    });\n  } else {\n    set.push(item);\n  }\n}\n\nexport function addFlag(\n  flagObj: RegExpFlags,\n  flagKey: keyof Omit<RegExpFlags, keyof IRegExpAST>,\n) {\n  if (flagObj[flagKey] === true) {\n    throw \"duplicate flag \" + flagKey;\n  }\n\n  const x: boolean = flagObj[flagKey];\n  flagObj[flagKey] = true;\n}\n\nexport function ASSERT_EXISTS<T = Object>(obj: any): obj is T {\n  // istanbul ignore next\n  if (obj === undefined) {\n    throw Error(\"Internal Error - Should never get here!\");\n  }\n  return true;\n}\n\n// istanbul ignore next\nexport function ASSERT_NEVER_REACH_HERE(): any {\n  throw Error(\"Internal Error - Should never get here!\");\n}\n\nexport function isCharacter(obj: { type: string }): obj is Character {\n  return obj[\"type\"] === \"Character\";\n}\n","import { cc } from \"./utils.js\";\n\nexport const digitsCharCodes: number[] = [];\nfor (let i = cc(\"0\"); i <= cc(\"9\"); i++) {\n  digitsCharCodes.push(i);\n}\n\nexport const wordCharCodes: number[] = [cc(\"_\")].concat(digitsCharCodes);\nfor (let i = cc(\"a\"); i <= cc(\"z\"); i++) {\n  wordCharCodes.push(i);\n}\n\nfor (let i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n  wordCharCodes.push(i);\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\nexport const whitespaceCodes: number[] = [\n  cc(\" \"),\n  cc(\"\\f\"),\n  cc(\"\\n\"),\n  cc(\"\\r\"),\n  cc(\"\\t\"),\n  cc(\"\\v\"),\n  cc(\"\\t\"),\n  cc(\"\\u00a0\"),\n  cc(\"\\u1680\"),\n  cc(\"\\u2000\"),\n  cc(\"\\u2001\"),\n  cc(\"\\u2002\"),\n  cc(\"\\u2003\"),\n  cc(\"\\u2004\"),\n  cc(\"\\u2005\"),\n  cc(\"\\u2006\"),\n  cc(\"\\u2007\"),\n  cc(\"\\u2008\"),\n  cc(\"\\u2009\"),\n  cc(\"\\u200a\"),\n  cc(\"\\u2028\"),\n  cc(\"\\u2029\"),\n  cc(\"\\u202f\"),\n  cc(\"\\u205f\"),\n  cc(\"\\u3000\"),\n  cc(\"\\ufeff\"),\n];\n","import type {\n  Alternative,\n  Assertion,\n  Atom,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  Location,\n  Quantifier,\n  Range,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n  Term,\n} from \"../types\";\nimport {\n  addFlag,\n  ASSERT_EXISTS,\n  ASSERT_NEVER_REACH_HERE,\n  cc,\n  insertToSet,\n  isCharacter,\n} from \"./utils.js\";\nimport {\n  digitsCharCodes,\n  whitespaceCodes,\n  wordCharCodes,\n} from \"./character-classes.js\";\n\n// consts and utilities\nconst hexDigitPattern = /[0-9a-fA-F]/;\nconst decimalPattern = /[0-9]/;\nconst decimalPatternNoZero = /[1-9]/;\n\n// https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n// https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\nexport class RegExpParser {\n  protected idx: number = 0;\n  protected input: string = \"\";\n  protected groupIdx: number = 0;\n\n  protected saveState() {\n    return {\n      idx: this.idx,\n      input: this.input,\n      groupIdx: this.groupIdx,\n    };\n  }\n\n  protected restoreState(newState: {\n    idx: number;\n    input: string;\n    groupIdx: number;\n  }) {\n    this.idx = newState.idx;\n    this.input = newState.input;\n    this.groupIdx = newState.groupIdx;\n  }\n\n  public pattern(input: string): RegExpPattern {\n    // parser state\n    this.idx = 0;\n    this.input = input;\n    this.groupIdx = 0;\n\n    this.consumeChar(\"/\");\n    const value = this.disjunction();\n    this.consumeChar(\"/\");\n\n    const flags: RegExpFlags = {\n      type: \"Flags\",\n      loc: { begin: this.idx, end: input.length },\n      global: false,\n      ignoreCase: false,\n      multiLine: false,\n      unicode: false,\n      sticky: false,\n    };\n\n    while (this.isRegExpFlag()) {\n      switch (this.popChar()) {\n        case \"g\":\n          addFlag(flags, \"global\");\n          break;\n        case \"i\":\n          addFlag(flags, \"ignoreCase\");\n          break;\n        case \"m\":\n          addFlag(flags, \"multiLine\");\n          break;\n        case \"u\":\n          addFlag(flags, \"unicode\");\n          break;\n        case \"y\":\n          addFlag(flags, \"sticky\");\n          break;\n      }\n    }\n\n    if (this.idx !== this.input.length) {\n      throw Error(\"Redundant input: \" + this.input.substring(this.idx));\n    }\n    return {\n      type: \"Pattern\",\n      flags: flags,\n      value: value,\n      loc: this.loc(0),\n    };\n  }\n\n  protected disjunction(): Disjunction {\n    const alts = [];\n    const begin = this.idx;\n\n    alts.push(this.alternative());\n\n    while (this.peekChar() === \"|\") {\n      this.consumeChar(\"|\");\n      alts.push(this.alternative());\n    }\n\n    return { type: \"Disjunction\", value: alts, loc: this.loc(begin) };\n  }\n\n  protected alternative(): Alternative {\n    const terms = [];\n    const begin = this.idx;\n\n    while (this.isTerm()) {\n      terms.push(this.term());\n    }\n\n    return { type: \"Alternative\", value: terms, loc: this.loc(begin) };\n  }\n\n  protected term(): Term {\n    if (this.isAssertion()) {\n      return this.assertion();\n    } else {\n      return this.atom();\n    }\n  }\n\n  protected assertion(): Assertion {\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"^\":\n        return {\n          type: \"StartAnchor\",\n          loc: this.loc(begin),\n        };\n      case \"$\":\n        return { type: \"EndAnchor\", loc: this.loc(begin) };\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.popChar()) {\n          case \"b\":\n            return {\n              type: \"WordBoundary\",\n              loc: this.loc(begin),\n            };\n          case \"B\":\n            return {\n              type: \"NonWordBoundary\",\n              loc: this.loc(begin),\n            };\n        }\n        // istanbul ignore next\n        throw Error(\"Invalid Assertion Escape\");\n      // '(?=' or '(?!'\n      case \"(\":\n        this.consumeChar(\"?\");\n\n        let type: \"Lookahead\" | \"NegativeLookahead\" | undefined;\n        switch (this.popChar()) {\n          case \"=\":\n            type = \"Lookahead\";\n            break;\n          case \"!\":\n            type = \"NegativeLookahead\";\n            break;\n        }\n        ASSERT_EXISTS(type);\n\n        const disjunction = this.disjunction();\n\n        this.consumeChar(\")\");\n\n        return {\n          type: type!,\n          value: disjunction,\n          loc: this.loc(begin),\n        };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected quantifier(\n    isBacktracking: boolean = false,\n  ): Quantifier | undefined {\n    let range: Partial<Quantifier> | undefined = undefined;\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"*\":\n        range = {\n          atLeast: 0,\n          atMost: Infinity,\n        };\n        break;\n      case \"+\":\n        range = {\n          atLeast: 1,\n          atMost: Infinity,\n        };\n        break;\n      case \"?\":\n        range = {\n          atLeast: 0,\n          atMost: 1,\n        };\n        break;\n      case \"{\":\n        const atLeast = this.integerIncludingZero();\n        switch (this.popChar()) {\n          case \"}\":\n            range = {\n              atLeast: atLeast,\n              atMost: atLeast,\n            };\n            break;\n          case \",\":\n            let atMost;\n            if (this.isDigit()) {\n              atMost = this.integerIncludingZero();\n              range = {\n                atLeast: atLeast,\n                atMost: atMost,\n              };\n            } else {\n              range = {\n                atLeast: atLeast,\n                atMost: Infinity,\n              };\n            }\n            this.consumeChar(\"}\");\n            break;\n        }\n        // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n        // causes severe performance degradations\n        if (isBacktracking === true && range === undefined) {\n          return undefined;\n        }\n        ASSERT_EXISTS(range);\n        break;\n    }\n\n    // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n    // causes severe performance degradations\n    if (isBacktracking === true && range === undefined) {\n      return undefined;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(range)) {\n      if (this.peekChar(0) === \"?\") {\n        this.consumeChar(\"?\");\n        range.greedy = false;\n      } else {\n        range.greedy = true;\n      }\n\n      range.type = \"Quantifier\";\n      range.loc = this.loc(begin);\n      return range as Quantifier;\n    }\n  }\n\n  protected atom(): Atom {\n    let atom: Omit<Atom, \"loc\" | \"type\"> | undefined;\n    const begin = this.idx;\n    switch (this.peekChar()) {\n      case \".\":\n        atom = this.dotAll();\n        break;\n      case \"\\\\\":\n        atom = this.atomEscape();\n        break;\n      case \"[\":\n        atom = this.characterClass();\n        break;\n      case \"(\":\n        atom = this.group();\n        break;\n    }\n\n    if (atom === undefined && this.isPatternCharacter()) {\n      atom = this.patternCharacter();\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS<Atom>(atom)) {\n      atom.loc = this.loc(begin);\n\n      if (this.isQuantifier()) {\n        atom.quantifier = this.quantifier();\n      }\n\n      return atom;\n    }\n\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected dotAll(): Omit<Set, \"loc\"> {\n    this.consumeChar(\".\");\n    return {\n      type: \"Set\",\n      complement: true,\n      value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")],\n    };\n  }\n\n  protected atomEscape(): Omit<GroupBackReference | Set | Character, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n\n    switch (this.peekChar()) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        return this.decimalEscapeAtom();\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected decimalEscapeAtom(): Omit<GroupBackReference, \"loc\"> {\n    const value = this.positiveInteger();\n\n    return { type: \"GroupBackReference\", value: value };\n  }\n\n  protected characterClassEscape(): Omit<Set, \"loc\"> {\n    let set: (number | Range)[] | undefined;\n    let complement = false;\n    switch (this.popChar()) {\n      case \"d\":\n        set = digitsCharCodes;\n        break;\n      case \"D\":\n        set = digitsCharCodes;\n        complement = true;\n        break;\n      case \"s\":\n        set = whitespaceCodes;\n        break;\n      case \"S\":\n        set = whitespaceCodes;\n        complement = true;\n        break;\n      case \"w\":\n        set = wordCharCodes;\n        break;\n      case \"W\":\n        set = wordCharCodes;\n        complement = true;\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(set)) {\n      return { type: \"Set\", value: set, complement: complement };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlEscapeAtom(): Omit<Character, \"loc\"> {\n    let escapeCode;\n    switch (this.popChar()) {\n      case \"f\":\n        escapeCode = cc(\"\\f\");\n        break;\n      case \"n\":\n        escapeCode = cc(\"\\n\");\n        break;\n      case \"r\":\n        escapeCode = cc(\"\\r\");\n        break;\n      case \"t\":\n        escapeCode = cc(\"\\t\");\n        break;\n      case \"v\":\n        escapeCode = cc(\"\\v\");\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(escapeCode)) {\n      return { type: \"Character\", value: escapeCode };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlLetterEscapeAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"c\");\n    const letter = this.popChar();\n    if (/[a-zA-Z]/.test(letter) === false) {\n      throw Error(\"Invalid \");\n    }\n\n    const letterCode = letter.toUpperCase().charCodeAt(0) - 64;\n    return { type: \"Character\", value: letterCode };\n  }\n\n  protected nulCharacterAtom(): Omit<Character, \"loc\"> {\n    // TODO implement '[lookahead ∉ DecimalDigit]'\n    // TODO: for the deprecated octal escape sequence\n    this.consumeChar(\"0\");\n    return { type: \"Character\", value: cc(\"\\0\") };\n  }\n\n  protected hexEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"x\");\n    return this.parseHexDigits(2);\n  }\n\n  protected regExpUnicodeEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"u\");\n    return this.parseHexDigits(4);\n  }\n\n  protected identityEscapeAtom(): Omit<Character, \"loc\"> {\n    // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n    // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n    const escapedChar = this.popChar();\n    return { type: \"Character\", value: cc(escapedChar) };\n  }\n\n  protected classPatternCharacterAtom(): Omit<Character, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \"]\":\n        throw Error(\"TBD\");\n      default:\n        const nextChar = this.popChar();\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n\n  protected characterClass(): Omit<Set, \"loc\"> {\n    const set: (number | Range)[] = [];\n    let complement = false;\n    this.consumeChar(\"[\");\n    if (this.peekChar(0) === \"^\") {\n      this.consumeChar(\"^\");\n      complement = true;\n    }\n\n    while (this.isClassAtom()) {\n      const from = this.classAtom();\n      const isFromSingleChar = from.type === \"Character\";\n      if (isCharacter(from) && this.isRangeDash()) {\n        this.consumeChar(\"-\");\n        const to = this.classAtom();\n        const isToSingleChar = to.type === \"Character\";\n\n        // a range can only be used when both sides are single characters\n        if (isCharacter(to)) {\n          if (to.value < from.value) {\n            throw Error(\"Range out of order in character class\");\n          }\n          set.push({ from: from.value, to: to.value });\n        } else {\n          // literal dash\n          insertToSet(from.value, set);\n          set.push(cc(\"-\"));\n          insertToSet(to.value, set);\n        }\n      } else {\n        insertToSet(from.value, set);\n      }\n    }\n\n    this.consumeChar(\"]\");\n\n    return { type: \"Set\", complement: complement, value: set };\n  }\n\n  protected classAtom(): Omit<Character | Set, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"]\":\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n        throw Error(\"TBD\");\n      case \"\\\\\":\n        return this.classEscape();\n      default:\n        return this.classPatternCharacterAtom();\n    }\n  }\n\n  protected classEscape(): Omit<Character | Set, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n    switch (this.peekChar()) {\n      // Matches a backspace.\n      // (Not to be confused with \\b word boundary outside characterClass)\n      case \"b\":\n        this.consumeChar(\"b\");\n        return { type: \"Character\", value: cc(\"\\u0008\") };\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected group(): Omit<Group, \"loc\"> {\n    let capturing = true;\n    this.consumeChar(\"(\");\n    switch (this.peekChar(0)) {\n      case \"?\":\n        this.consumeChar(\"?\");\n        this.consumeChar(\":\");\n        capturing = false;\n        break;\n      default:\n        this.groupIdx++;\n        break;\n    }\n    const value = this.disjunction();\n    this.consumeChar(\")\");\n\n    const groupAst: Omit<Group, \"loc\"> = {\n      type: \"Group\",\n      capturing: capturing,\n      value: value,\n    };\n\n    if (capturing) {\n      groupAst[\"idx\"] = this.groupIdx;\n    }\n\n    return groupAst;\n  }\n\n  protected positiveInteger(): number {\n    let number = this.popChar();\n\n    // istanbul ignore next - can't ever get here due to previous lookahead checks\n    // still implementing this error checking in case this ever changes.\n    if (decimalPatternNoZero.test(number) === false) {\n      throw Error(\"Expecting a positive integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected integerIncludingZero(): number {\n    let number = this.popChar();\n    if (decimalPattern.test(number) === false) {\n      throw Error(\"Expecting an integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected patternCharacter(): Omit<Character, \"loc\"> {\n    const nextChar = this.popChar();\n    switch (nextChar) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"^\":\n      // istanbul ignore next\n      case \"$\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \".\":\n      // istanbul ignore next\n      case \"*\":\n      // istanbul ignore next\n      case \"+\":\n      // istanbul ignore next\n      case \"?\":\n      // istanbul ignore next\n      case \"(\":\n      // istanbul ignore next\n      case \")\":\n      // istanbul ignore next\n      case \"[\":\n      // istanbul ignore next\n      case \"|\":\n        // istanbul ignore next\n        throw Error(\"TBD\");\n      default:\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n  protected isRegExpFlag(): boolean {\n    switch (this.peekChar(0)) {\n      case \"g\":\n      case \"i\":\n      case \"m\":\n      case \"u\":\n      case \"y\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isRangeDash(): boolean {\n    return this.peekChar() === \"-\" && this.isClassAtom(1);\n  }\n\n  protected isDigit(): boolean {\n    return decimalPattern.test(this.peekChar(0));\n  }\n\n  protected isClassAtom(howMuch = 0): boolean {\n    switch (this.peekChar(howMuch)) {\n      case \"]\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected isTerm() {\n    return this.isAtom() || this.isAssertion();\n  }\n\n  protected isAtom(): boolean {\n    if (this.isPatternCharacter()) {\n      return true;\n    }\n\n    switch (this.peekChar(0)) {\n      case \".\":\n      case \"\\\\\": // atomEscape\n      case \"[\": // characterClass\n      // TODO: isAtom must be called before isAssertion - disambiguate\n      case \"(\": // group\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isAssertion(): boolean {\n    switch (this.peekChar(0)) {\n      case \"^\":\n      case \"$\":\n        return true;\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.peekChar(1)) {\n          case \"b\":\n          case \"B\":\n            return true;\n          default:\n            return false;\n        }\n      // '(?=' or '(?!'\n      case \"(\":\n        return (\n          this.peekChar(1) === \"?\" &&\n          (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\")\n        );\n      default:\n        return false;\n    }\n  }\n\n  protected isQuantifier(): boolean {\n    const prevState = this.saveState();\n    try {\n      return this.quantifier(true) !== undefined;\n    } catch (e) {\n      return false;\n    } finally {\n      this.restoreState(prevState);\n    }\n  }\n\n  protected isPatternCharacter(): boolean {\n    switch (this.peekChar()) {\n      case \"^\":\n      case \"$\":\n      case \"\\\\\":\n      case \".\":\n      case \"*\":\n      case \"+\":\n      case \"?\":\n      case \"(\":\n      case \")\":\n      case \"[\":\n      case \"|\":\n      case \"/\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected parseHexDigits(howMany: number): Omit<Character, \"loc\"> {\n    let hexString = \"\";\n    for (let i = 0; i < howMany; i++) {\n      const hexChar = this.popChar();\n      if (hexDigitPattern.test(hexChar) === false) {\n        throw Error(\"Expecting a HexDecimal digits\");\n      }\n      hexString += hexChar;\n    }\n    const charCode = parseInt(hexString, 16);\n    return { type: \"Character\", value: charCode };\n  }\n\n  protected peekChar(howMuch = 0): string {\n    return this.input[this.idx + howMuch];\n  }\n\n  protected popChar(): string {\n    const nextChar = this.peekChar(0);\n    this.consumeChar(undefined);\n    return nextChar;\n  }\n\n  protected consumeChar(char: string | undefined): void {\n    if (char !== undefined && this.input[this.idx] !== char) {\n      throw Error(\n        \"Expected: '\" +\n          char +\n          \"' but found: '\" +\n          this.input[this.idx] +\n          \"' at offset: \" +\n          this.idx,\n      );\n    }\n\n    if (this.idx >= this.input.length) {\n      throw Error(\"Unexpected end of input\");\n    }\n    this.idx++;\n  }\n\n  protected loc(begin: number): Location {\n    return { begin: begin, end: this.idx };\n  }\n}\n","import type {\n  Alternative,\n  Assertion,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  IRegExpAST,\n  Quantifier,\n  RegExpAstPart,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n} from \"../types\";\n\nexport class BaseRegExpVisitor {\n  public visitChildren(node: IRegExpAST) {\n    for (const key in node) {\n      const child = (node as any)[key];\n      /* istanbul ignore else */\n      if (node.hasOwnProperty(key)) {\n        if (child.type !== undefined) {\n          this.visit(child);\n        } else if (Array.isArray(child)) {\n          child.forEach((subChild) => {\n            this.visit(subChild);\n          }, this);\n        }\n      }\n    }\n  }\n\n  public visit(node: RegExpAstPart): void {\n    switch (node.type) {\n      case \"Pattern\":\n        this.visitPattern(node);\n        break;\n      case \"Flags\":\n        this.visitFlags(node);\n        break;\n      case \"Disjunction\":\n        this.visitDisjunction(node);\n        break;\n      case \"Alternative\":\n        this.visitAlternative(node);\n        break;\n      case \"StartAnchor\":\n        this.visitStartAnchor(node);\n        break;\n      case \"EndAnchor\":\n        this.visitEndAnchor(node);\n        break;\n      case \"WordBoundary\":\n        this.visitWordBoundary(node);\n        break;\n      case \"NonWordBoundary\":\n        this.visitNonWordBoundary(node);\n        break;\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        break;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        break;\n      case \"Character\":\n        this.visitCharacter(node);\n        break;\n      case \"Set\":\n        this.visitSet(node);\n        break;\n      case \"Group\":\n        this.visitGroup(node);\n        break;\n      case \"GroupBackReference\":\n        this.visitGroupBackReference(node);\n        break;\n      case \"Quantifier\":\n        this.visitQuantifier(node);\n        break;\n    }\n\n    this.visitChildren(node);\n  }\n\n  public visitPattern(node: RegExpPattern): void {}\n\n  public visitFlags(node: RegExpFlags): void {}\n\n  public visitDisjunction(node: Disjunction): void {}\n\n  public visitAlternative(node: Alternative): void {}\n\n  // Assertion\n  public visitStartAnchor(node: Assertion): void {}\n\n  public visitEndAnchor(node: Assertion): void {}\n\n  public visitWordBoundary(node: Assertion): void {}\n\n  public visitNonWordBoundary(node: Assertion): void {}\n\n  public visitLookahead(node: Assertion): void {}\n\n  public visitNegativeLookahead(node: Assertion): void {}\n\n  // atoms\n  public visitCharacter(node: Character): void {}\n\n  public visitSet(node: Set): void {}\n\n  public visitGroup(node: Group): void {}\n\n  public visitGroupBackReference(node: GroupBackReference): void {}\n\n  public visitQuantifier(node: Quantifier): void {}\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { Set, Group, Character, IRegExpAST } from '@chevrotain/regexp-to-ast';\nimport { RegExpParser, BaseRegExpVisitor } from '@chevrotain/regexp-to-ast';\n\nexport const NEWLINE_REGEXP = /\\r?\\n/gm;\n\nconst regexpParser = new RegExpParser();\n\n/**\n * This class is in charge of heuristically identifying start/end tokens of terminals.\n *\n * The way this works is by doing the following:\n * 1. Traverse the regular expression in the \"start state\"\n * 2. Add any encountered sets/single characters to the \"start regexp\"\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\n * 5. If we re-encounter any variable-length content we reset the end stack\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\n *\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\n */\nclass TerminalRegExpVisitor extends BaseRegExpVisitor {\n\n    private isStarting = true;\n    startRegexp: string;\n    private endRegexpStack: string[] = [];\n    multiline = false;\n    regex: string;\n\n    get endRegex(): string {\n        return this.endRegexpStack.join('');\n    }\n\n    reset(regex: string): void {\n        this.multiline = false;\n        this.regex = regex;\n        this.startRegexp = '';\n        this.isStarting = true;\n        this.endRegexpStack = [];\n    }\n\n    override visitGroup(node: Group) {\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n    }\n\n    override visitCharacter(node: Character): void {\n        const char = String.fromCharCode(node.value);\n        if (!this.multiline && char === '\\n') {\n            this.multiline = true;\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        } else {\n            const escapedChar = escapeRegExp(char);\n            this.endRegexpStack.push(escapedChar);\n            if (this.isStarting) {\n                this.startRegexp += escapedChar;\n            }\n        }\n    }\n\n    override visitSet(node: Set): void {\n        if (!this.multiline) {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            const regex = new RegExp(set);\n            this.multiline = Boolean('\\n'.match(regex));\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        } else {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            this.endRegexpStack.push(set);\n            if (this.isStarting) {\n                this.startRegexp += set;\n            }\n        }\n    }\n\n    override visitChildren(node: IRegExpAST): void {\n        if (node.type === 'Group') {\n            // Ignore children of groups with quantifier (+/*/?)\n            // These groups are unrelated to start/end tokens of terminals\n            const group = node as Group;\n            if (group.quantifier) {\n                return;\n            }\n        }\n        super.visitChildren(node);\n    }\n}\n\nconst visitor = new TerminalRegExpVisitor();\n\nexport function getTerminalParts(regexp: RegExp | string): Array<{ start: string, end: string }> {\n    try {\n        if (typeof regexp !== 'string') {\n            regexp = regexp.source;\n        }\n        regexp = `/${regexp}/`;\n        const pattern = regexpParser.pattern(regexp);\n        const parts: Array<{ start: string, end: string }> = [];\n        for (const alternative of pattern.value.value) {\n            visitor.reset(regexp);\n            visitor.visit(alternative);\n            parts.push({\n                start: visitor.startRegexp,\n                end: visitor.endRegex\n            });\n        }\n        return parts;\n    } catch {\n        return [];\n    }\n}\n\nexport function isMultilineComment(regexp: RegExp | string): boolean {\n    try {\n        if (typeof regexp === 'string') {\n            regexp = new RegExp(regexp);\n        }\n        regexp = regexp.toString();\n        visitor.reset(regexp);\n        // Parsing the pattern might fail (since it's user code)\n        visitor.visit(regexpParser.pattern(regexp));\n        return visitor.multiline;\n    } catch {\n        return false;\n    }\n}\n\nexport function isWhitespace(value: RegExp | string): boolean {\n    const regexp = typeof value === 'string' ? new RegExp(value) : value;\n    return regexp.test(' ');\n}\n\nexport function escapeRegExp(value: string): string {\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nexport function getCaseInsensitivePattern(keyword: string): string {\n    return Array.prototype.map.call(keyword, letter =>\n        /\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)\n    ).join('');\n}\n\n/**\n * Determines whether the given input has a partial match with the specified regex.\n * @param regex The regex to partially match against\n * @param input The input string\n * @returns Whether any match exists.\n */\nexport function partialMatches(regex: RegExp | string, input: string): boolean {\n    const partial = partialRegExp(regex);\n    const match = input.match(partial);\n    return !!match && match[0].length > 0;\n}\n\n/**\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\n * @param regex The input regex to be converted.\n * @returns A partial regex constructed from the input regex.\n */\nexport function partialRegExp(regex: RegExp | string): RegExp {\n    if (typeof regex === 'string') {\n        regex = new RegExp(regex);\n    }\n    const re = regex, source = regex.source;\n    let i = 0;\n\n    function process() {\n        let result = '',\n            tmp;\n\n        function appendRaw(nbChars: number) {\n            result += source.substr(i, nbChars);\n            i += nbChars;\n        }\n\n        function appendOptional(nbChars: number) {\n            result += '(?:' + source.substr(i, nbChars) + '|$)';\n            i += nbChars;\n        }\n\n        while (i < source.length) {\n            switch (source[i]) {\n                case '\\\\':\n                    switch (source[i + 1]) {\n                        case 'c':\n                            appendOptional(3);\n                            break;\n                        case 'x':\n                            appendOptional(4);\n                            break;\n                        case 'u':\n                            if (re.unicode) {\n                                if (source[i + 2] === '{') {\n                                    appendOptional(source.indexOf('}', i) - i + 1);\n                                } else {\n                                    appendOptional(6);\n                                }\n                            } else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'p':\n                        case 'P':\n                            if (re.unicode) {\n                                appendOptional(source.indexOf('}', i) - i + 1);\n                            } else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'k':\n                            appendOptional(source.indexOf('>', i) - i + 1);\n                            break;\n                        default:\n                            appendOptional(2);\n                            break;\n                    }\n                    break;\n\n                case '[':\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source) || [];\n                    appendOptional(tmp[0].length);\n                    break;\n\n                case '|':\n                case '^':\n                case '$':\n                case '*':\n                case '+':\n                case '?':\n                    appendRaw(1);\n                    break;\n                case '{':\n                    tmp = /\\{\\d+,?\\d*\\}/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source);\n                    if (tmp) {\n                        appendRaw(tmp[0].length);\n                    } else {\n                        appendOptional(1);\n                    }\n                    break;\n                case '(':\n                    if (source[i + 1] === '?') {\n                        switch (source[i + 2]) {\n                            case ':':\n                                result += '(?:';\n                                i += 3;\n                                result += process() + '|$)';\n                                break;\n                            case '=':\n                                result += '(?=';\n                                i += 3;\n                                result += process() + ')';\n                                break;\n                            case '!':\n                                tmp = i;\n                                i += 3;\n                                process();\n                                result += source.substr(tmp, i - tmp);\n                                break;\n                            case '<':\n                                switch (source[i + 3]) {\n                                    case '=':\n                                    case '!':\n                                        tmp = i;\n                                        i += 4;\n                                        process();\n                                        result += source.substr(tmp, i - tmp);\n                                        break;\n                                    default:\n                                        appendRaw(source.indexOf('>', i) - i + 1);\n                                        result += process() + '|$)';\n                                        break;\n                                }\n                                break;\n                        }\n                    } else {\n                        appendRaw(1);\n                        result += process() + '|$)';\n                    }\n                    break;\n                case ')':\n                    ++i;\n                    return result;\n                default:\n                    appendOptional(1);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    return new RegExp(process(), regex.flags);\n}\n","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { assertUnreachable } from '../utils/errors.js';\nimport * as ast from '../languages/generated/ast.js';\nimport type { AstNode, CstNode } from '../syntax-tree.js';\nimport { isCompositeCstNode } from '../syntax-tree.js';\nimport { getContainerOfType, streamAllContents } from './ast-utils.js';\nimport { streamCst } from './cst-utils.js';\nimport { escapeRegExp } from './regexp-utils.js';\n\n/**\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\n * the result is `undefined`.\n */\nexport function getEntryRule(grammar: ast.Grammar): ast.ParserRule | undefined {\n    return grammar.rules.find(e => ast.isParserRule(e) && e.entry) as ast.ParserRule;\n}\n\n/**\n * Returns all hidden terminal rules of the given grammar, if any.\n */\nexport function getHiddenRules(grammar: ast.Grammar) {\n    return grammar.rules.filter((e): e is ast.TerminalRule => ast.isTerminalRule(e) && e.hidden);\n}\n\n/**\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\n *\n * @param grammar The grammar that contains all rules\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\n *      this function returns all rules of the specified grammar.\n */\nexport function getAllReachableRules(grammar: ast.Grammar, allTerminals: boolean): Set<ast.AbstractRule> {\n    const ruleNames = new Set<string>();\n    const entryRule = getEntryRule(grammar);\n    if (!entryRule) {\n        return new Set(grammar.rules);\n    }\n\n    const topMostRules = [entryRule as ast.AbstractRule].concat(getHiddenRules(grammar));\n    for (const rule of topMostRules) {\n        ruleDfs(rule, ruleNames, allTerminals);\n    }\n\n    const rules = new Set<ast.AbstractRule>();\n    for (const rule of grammar.rules) {\n        if (ruleNames.has(rule.name) || (ast.isTerminalRule(rule) && rule.hidden)) {\n            rules.add(rule);\n        }\n    }\n    return rules;\n}\n\nfunction ruleDfs(rule: ast.AbstractRule, visitedSet: Set<string>, allTerminals: boolean): void {\n    visitedSet.add(rule.name);\n    streamAllContents(rule).forEach(node => {\n        if (ast.isRuleCall(node) || (allTerminals && ast.isTerminalRuleCall(node))) {\n            const refRule = node.rule.ref;\n            if (refRule && !visitedSet.has(refRule.name)) {\n                ruleDfs(refRule, visitedSet, allTerminals);\n            }\n        }\n    });\n}\n\n/**\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\n *\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\n * and cannot be inferred.\n */\nexport function getCrossReferenceTerminal(crossRef: ast.CrossReference): ast.AbstractElement | undefined {\n    if (crossRef.terminal) {\n        return crossRef.terminal;\n    } else if (crossRef.type.ref) {\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\n        return nameAssigment?.terminal;\n    }\n    return undefined;\n}\n\n/**\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\n * that contains visible characters is considered a comment.\n */\nexport function isCommentTerminal(terminalRule: ast.TerminalRule): boolean {\n    return terminalRule.hidden && !terminalRegex(terminalRule).test(' ');\n}\n\n/**\n * Find all CST nodes within the given node that contribute to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\n */\nexport function findNodesForProperty(node: CstNode | undefined, property: string | undefined): CstNode[] {\n    if (!node || !property) {\n        return [];\n    }\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\n}\n\n/**\n * Find a single CST node within the given node that contributes to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nexport function findNodeForProperty(node: CstNode | undefined, property: string | undefined, index?: number): CstNode | undefined {\n    if (!node || !property) {\n        return undefined;\n    }\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    } else {\n        index = 0;\n    }\n    return nodes[index];\n}\n\nfunction findNodesForPropertyInternal(node: CstNode, property: string, element: AstNode | undefined, first: boolean): CstNode[] {\n    if (!first) {\n        const nodeFeature = getContainerOfType(node.grammarSource, ast.isAssignment);\n        if (nodeFeature && nodeFeature.feature === property) {\n            return [node];\n        }\n    }\n    if (isCompositeCstNode(node) && node.astNode === element) {\n        return node.content.flatMap(e => findNodesForPropertyInternal(e, property, element, false));\n    }\n    return [];\n}\n\n/**\n * Find all CST nodes within the given node that correspond to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\n * @param keyword A keyword as specified in the grammar.\n */\nexport function findNodesForKeyword(node: CstNode | undefined, keyword: string): CstNode[] {\n    if (!node) {\n        return [];\n    }\n    return findNodesForKeywordInternal(node, keyword, node?.astNode);\n}\n\n/**\n * Find a single CST node within the given node that corresponds to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\n * @param keyword A keyword as specified in the grammar.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nexport function findNodeForKeyword(node: CstNode | undefined, keyword: string, index?: number): CstNode | undefined {\n    if (!node) {\n        return undefined;\n    }\n    const nodes = findNodesForKeywordInternal(node, keyword, node?.astNode);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    } else {\n        index = 0;\n    }\n    return nodes[index];\n}\n\nexport function findNodesForKeywordInternal(node: CstNode, keyword: string, element: AstNode | undefined): CstNode[] {\n    if (node.astNode !== element) {\n        return [];\n    }\n    if (ast.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\n        return [node];\n    }\n    const treeIterator = streamCst(node).iterator();\n    let result: IteratorResult<CstNode>;\n    const keywordNodes: CstNode[] = [];\n    do {\n        result = treeIterator.next();\n        if (!result.done) {\n            const childNode = result.value;\n            if (childNode.astNode === element) {\n                if (ast.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\n                    keywordNodes.push(childNode);\n                }\n            } else {\n                treeIterator.prune();\n            }\n        }\n    } while (!result.done);\n    return keywordNodes;\n}\n\n/**\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\n * node is returned. If no assignment is found, the result is `undefined`.\n *\n * @param cstNode A CST node for which to find a property assignment.\n */\nexport function findAssignment(cstNode: CstNode): ast.Assignment | undefined {\n    const astNode = cstNode.astNode;\n    // Only search until the ast node of the parent cst node is no longer the original ast node\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\n    while (astNode === cstNode.container?.astNode) {\n        const assignment = getContainerOfType(cstNode.grammarSource, ast.isAssignment);\n        if (assignment) {\n            return assignment;\n        }\n        cstNode = cstNode.container;\n    }\n    return undefined;\n}\n\n/**\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\n * this function returns `undefined`.\n */\nexport function findNameAssignment(type: ast.AbstractType): ast.Assignment | undefined {\n    let startNode: AstNode = type;\n    if (ast.isInferredType(startNode)) {\n        // for inferred types, the location to start searching for the name-assignment is different\n        if (ast.isAction(startNode.$container)) {\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\n            startNode = startNode.$container.$container!;\n        } else if (ast.isParserRule(startNode.$container)) {\n            // investigate the parser rule with the explicitly inferred type\n            startNode = startNode.$container;\n        } else {\n            assertUnreachable(startNode.$container);\n        }\n    }\n    return findNameAssignmentInternal(type, startNode, new Map());\n}\n\nfunction findNameAssignmentInternal(type: ast.AbstractType, startNode: AstNode, cache: Map<ast.AbstractType, ast.Assignment | undefined>): ast.Assignment | undefined {\n    // the cache is only required to prevent infinite loops\n    function go(node: AstNode, refType: ast.AbstractType): ast.Assignment | undefined {\n        let childAssignment: ast.Assignment | undefined = undefined;\n        const parentAssignment = getContainerOfType(node, ast.isAssignment);\n        // No parent assignment implies unassigned rule call\n        if (!parentAssignment) {\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\n        }\n        cache.set(type, childAssignment);\n        return childAssignment;\n    }\n\n    if (cache.has(type)) {\n        return cache.get(type);\n    }\n    cache.set(type, undefined);\n    for (const node of streamAllContents(startNode)) {\n        if (ast.isAssignment(node) && node.feature.toLowerCase() === 'name') {\n            cache.set(type, node);\n            return node;\n        } else if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {\n            return go(node, node.rule.ref);\n        } else if (ast.isSimpleType(node) && node.typeRef?.ref) {\n            return go(node, node.typeRef.ref);\n        }\n    }\n    return undefined;\n}\n\nexport function getActionAtElement(element: ast.AbstractElement): ast.Action | undefined {\n    const parent = element.$container;\n    if (ast.isGroup(parent)) {\n        const elements = parent.elements;\n        const index = elements.indexOf(element);\n        for (let i = index - 1; i >= 0; i--) {\n            const item = elements[i];\n            if (ast.isAction(item)) {\n                return item;\n            } else {\n                const action = streamAllContents(elements[i]).find(ast.isAction);\n                if (action) {\n                    return action;\n                }\n            }\n        }\n    }\n    if (ast.isAbstractElement(parent)) {\n        return getActionAtElement(parent);\n    } else {\n        return undefined;\n    }\n}\n\nexport type Cardinality = '?' | '*' | '+' | undefined;\nexport type Operator = '=' | '+=' | '?=' | undefined;\n\nexport function isOptionalCardinality(cardinality?: Cardinality, element?: ast.AbstractElement): boolean {\n    return cardinality === '?' || cardinality === '*' || (ast.isGroup(element) && Boolean(element.guardCondition));\n}\n\nexport function isArrayCardinality(cardinality?: Cardinality): boolean {\n    return cardinality === '*' || cardinality === '+';\n}\n\nexport function isArrayOperator(operator?: Operator): boolean {\n    return operator === '+=';\n}\n\n/**\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\n * primitive return type like `number`, `boolean`, etc.\n */\nexport function isDataTypeRule(rule: ast.ParserRule): boolean {\n    return isDataTypeRuleInternal(rule, new Set());\n}\n\nfunction isDataTypeRuleInternal(rule: ast.ParserRule, visited: Set<ast.ParserRule>): boolean {\n    if (visited.has(rule)) {\n        return true;\n    } else {\n        visited.add(rule);\n    }\n    for (const node of streamAllContents(rule)) {\n        if (ast.isRuleCall(node)) {\n            if (!node.rule.ref) {\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\n                return false;\n            }\n            if (ast.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\n                return false;\n            }\n        } else if (ast.isAssignment(node)) {\n            return false;\n        } else if (ast.isAction(node)) {\n            return false;\n        }\n    }\n    return Boolean(rule.definition);\n}\n\nexport function isDataType(type: ast.Type): boolean {\n    return isDataTypeInternal(type.type, new Set());\n}\n\nfunction isDataTypeInternal(type: ast.TypeDefinition, visited: Set<ast.TypeDefinition>): boolean {\n    if (visited.has(type)) {\n        return true;\n    } else {\n        visited.add(type);\n    }\n    if (ast.isArrayType(type)) {\n        return false;\n    } else if (ast.isReferenceType(type)) {\n        return false;\n    } else if (ast.isUnionType(type)) {\n        return type.types.every(e => isDataTypeInternal(e, visited));\n    } else if (ast.isSimpleType(type)) {\n        if (type.primitiveType !== undefined) {\n            return true;\n        } else if (type.stringType !== undefined) {\n            return true;\n        } else if (type.typeRef !== undefined) {\n            const ref = type.typeRef.ref;\n            if (ast.isType(ref)) {\n                return isDataTypeInternal(ref.type, visited);\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nexport function getExplicitRuleType(rule: ast.ParserRule): string | undefined {\n    if (rule.inferredType) {\n        return rule.inferredType.name;\n    } else if (rule.dataType) {\n        return rule.dataType;\n    } else if (rule.returnType) {\n        const refType = rule.returnType.ref;\n        if(refType) {\n            // check if we need to check Action as return type\n            if (ast.isParserRule(refType)) {\n                return refType.name;\n            }  else if(ast.isInterface(refType) || ast.isType(refType)) {\n                return refType.name;\n            }\n        }\n    }\n    return undefined;\n}\n\nexport function getTypeName(type: ast.AbstractType | ast.Action): string {\n    if (ast.isParserRule(type)) {\n        return isDataTypeRule(type) ? type.name : getExplicitRuleType(type) ?? type.name;\n    } else if (ast.isInterface(type) || ast.isType(type) || ast.isReturnType(type)) {\n        return type.name;\n    } else if (ast.isAction(type)) {\n        const actionType = getActionType(type);\n        if (actionType) {\n            return actionType;\n        }\n    } else if (ast.isInferredType(type)) {\n        return type.name;\n    }\n    throw new Error('Cannot get name of Unknown Type');\n}\n\nexport function getActionType(action: ast.Action): string | undefined {\n    if (action.inferredType) {\n        return action.inferredType.name;\n    } else if (action.type?.ref) {\n        return getTypeName(action.type.ref);\n    }\n    return undefined; // not inferring and not referencing a valid type\n}\n\nexport function getRuleType(rule: ast.AbstractRule): string {\n    if (ast.isTerminalRule(rule)) {\n        return rule.type?.name ?? 'string';\n    } else {\n        return isDataTypeRule(rule) ? rule.name : getExplicitRuleType(rule) ?? rule.name;\n    }\n}\n\nexport function terminalRegex(terminalRule: ast.TerminalRule): RegExp {\n    const flags: Flags = {\n        s: false,\n        i: false,\n        u: false\n    };\n    const source = abstractElementToRegex(terminalRule.definition, flags);\n    const flagText = Object.entries(flags).filter(([, value]) => value).map(([name]) => name).join('');\n    return new RegExp(source, flagText);\n}\n\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\nconst WILDCARD = /[\\s\\S]/.source;\n\ntype Flags = {\n    s: boolean;\n    i: boolean;\n    u: boolean;\n}\n\nfunction abstractElementToRegex(element: ast.AbstractElement, flags?: Flags): string {\n    if (ast.isTerminalAlternatives(element)) {\n        return terminalAlternativesToRegex(element);\n    } else if (ast.isTerminalGroup(element)) {\n        return terminalGroupToRegex(element);\n    } else if (ast.isCharacterRange(element)) {\n        return characterRangeToRegex(element);\n    } else if (ast.isTerminalRuleCall(element)) {\n        const rule = element.rule.ref;\n        if (!rule) {\n            throw new Error('Missing rule reference.');\n        }\n        return withCardinality(abstractElementToRegex(rule.definition), {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    } else if (ast.isNegatedToken(element)) {\n        return negateTokenToRegex(element);\n    } else if (ast.isUntilToken(element)) {\n        return untilTokenToRegex(element);\n    } else if (ast.isRegexToken(element)) {\n        const lastSlash = element.regex.lastIndexOf('/');\n        const source = element.regex.substring(1, lastSlash);\n        const regexFlags = element.regex.substring(lastSlash + 1);\n        if (flags) {\n            flags.i = regexFlags.includes('i');\n            flags.s = regexFlags.includes('s');\n            flags.u = regexFlags.includes('u');\n        }\n        return withCardinality(source, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead,\n            wrap: false\n        });\n    } else if (ast.isWildcard(element)) {\n        return withCardinality(WILDCARD, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    } else {\n        throw new Error(`Invalid terminal element: ${element?.$type}`);\n    }\n}\n\nfunction terminalAlternativesToRegex(alternatives: ast.TerminalAlternatives): string {\n    return withCardinality(alternatives.elements.map(e => abstractElementToRegex(e)).join('|'), {\n        cardinality: alternatives.cardinality,\n        lookahead: alternatives.lookahead\n    });\n}\n\nfunction terminalGroupToRegex(group: ast.TerminalGroup): string {\n    return withCardinality(group.elements.map(e => abstractElementToRegex(e)).join(''), {\n        cardinality: group.cardinality,\n        lookahead: group.lookahead\n    });\n}\n\nfunction untilTokenToRegex(until: ast.UntilToken): string {\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\n        cardinality: until.cardinality,\n        lookahead: until.lookahead\n    });\n}\n\nfunction negateTokenToRegex(negate: ast.NegatedToken): string {\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\n        cardinality: negate.cardinality,\n        lookahead: negate.lookahead\n    });\n}\n\nfunction characterRangeToRegex(range: ast.CharacterRange): string {\n    if (range.right) {\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\n            cardinality: range.cardinality,\n            lookahead: range.lookahead,\n            wrap: false\n        });\n    }\n    return withCardinality(keywordToRegex(range.left), {\n        cardinality: range.cardinality,\n        lookahead: range.lookahead,\n        wrap: false\n    });\n}\n\nfunction keywordToRegex(keyword: ast.Keyword): string {\n    return escapeRegExp(keyword.value);\n}\n\nfunction withCardinality(regex: string, options: {\n    cardinality?: string\n    wrap?: boolean\n    lookahead?: string\n}): string {\n    if (options.wrap !== false || options.lookahead) {\n        regex = `(${options.lookahead ?? ''}${regex})`;\n    }\n    if (options.cardinality) {\n        return `${regex}${options.cardinality}`;\n    }\n    return regex;\n}\n","// based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\nexport function toFastProperties(toBecomeFast: any) {\n  function FakeConstructor() {}\n\n  // If our object is used as a constructor, it would receive\n  FakeConstructor.prototype = toBecomeFast;\n  const fakeInstance = new (FakeConstructor as any)();\n\n  function fakeAccess() {\n    return typeof fakeInstance.bar;\n  }\n\n  // help V8 understand this is a \"real\" prototype by actually using\n  // the fake instance.\n  fakeAccess();\n  fakeAccess();\n\n  // Always true condition to suppress the Firefox warning of unreachable\n  // code after a return statement.\n  if (1) return toBecomeFast;\n\n  // Eval prevents optimization of this method (even though this is dead code)\n  // - https://esbuild.github.io/content-types/#direct-eval\n  /* istanbul ignore next */\n  // tslint:disable-next-line\n  (0, eval)(toBecomeFast);\n}\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.drop([1, 2, 3]);\n * // => [2, 3]\n *\n * _.drop([1, 2, 3], 2);\n * // => [3]\n *\n * _.drop([1, 2, 3], 5);\n * // => []\n *\n * _.drop([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction drop(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, n < 0 ? 0 : n, length);\n}\n\nexport default drop;\n","import assignValue from './_assignValue.js';\nimport copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport isArrayLike from './isArrayLike.js';\nimport isPrototype from './_isPrototype.js';\nimport keys from './keys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nexport default assign;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport basePickBy from './_basePickBy.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nexport default pickBy;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar regexpTag = '[object RegExp]';\n\n/**\n * The base implementation of `_.isRegExp` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n */\nfunction baseIsRegExp(value) {\n  return isObjectLike(value) && baseGetTag(value) == regexpTag;\n}\n\nexport default baseIsRegExp;\n","import baseIsRegExp from './_baseIsRegExp.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;\n\n/**\n * Checks if `value` is classified as a `RegExp` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n * @example\n *\n * _.isRegExp(/abc/);\n * // => true\n *\n * _.isRegExp('/abc/');\n * // => false\n */\nvar isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\nexport default isRegExp;\n","import { assign, forEach, isRegExp, isString, map, pickBy } from \"lodash-es\";\nimport type {\n  IGASTVisitor,\n  IProduction,\n  IProductionWithOccurrence,\n  ISerializedGast,\n  TokenType,\n} from \"@chevrotain/types\";\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nexport abstract class AbstractProduction<T extends IProduction = IProduction>\n  implements IProduction\n{\n  public get definition(): T[] {\n    return this._definition;\n  }\n  public set definition(value: T[]) {\n    this._definition = value;\n  }\n\n  constructor(protected _definition: T[]) {}\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    forEach(this.definition, (prod) => {\n      prod.accept(visitor);\n    });\n  }\n}\n\nexport class NonTerminal\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public nonTerminalName!: string;\n  public label?: string;\n  public referencedRule!: Rule;\n  public idx: number = 1;\n\n  constructor(options: {\n    nonTerminalName: string;\n    label?: string;\n    referencedRule?: Rule;\n    idx?: number;\n  }) {\n    super([]);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  set definition(definition: IProduction[]) {\n    // immutable\n  }\n\n  get definition(): IProduction[] {\n    if (this.referencedRule !== undefined) {\n      return this.referencedRule.definition;\n    }\n    return [];\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    // don't visit children of a reference, we will get cyclic infinite loops if we do so\n  }\n}\n\nexport class Rule extends AbstractProduction {\n  public name!: string;\n  public orgText: string = \"\";\n\n  constructor(options: {\n    name: string;\n    definition: IProduction[];\n    orgText?: string;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternative extends AbstractProduction {\n  public ignoreAmbiguities: boolean = false;\n\n  constructor(options: {\n    definition: IProduction[];\n    ignoreAmbiguities?: boolean;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Option\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatory\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatoryWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Repetition\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternation\n  extends AbstractProduction<Alternative>\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public ignoreAmbiguities: boolean = false;\n  public hasPredicates: boolean = false;\n  public maxLookahead?: number;\n\n  public get definition(): Alternative[] {\n    return this._definition;\n  }\n  public set definition(value: Alternative[]) {\n    this._definition = value;\n  }\n\n  constructor(options: {\n    definition: Alternative[];\n    idx?: number;\n    ignoreAmbiguities?: boolean;\n    hasPredicates?: boolean;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Terminal implements IProductionWithOccurrence {\n  public terminalType!: TokenType;\n  public label?: string;\n  public idx: number = 1;\n\n  constructor(options: {\n    terminalType: TokenType;\n    label?: string;\n    idx?: number;\n  }) {\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n  }\n}\n\nexport interface ISerializedBasic extends ISerializedGast {\n  type:\n    | \"Alternative\"\n    | \"Option\"\n    | \"RepetitionMandatory\"\n    | \"Repetition\"\n    | \"Alternation\";\n  idx?: number;\n}\n\nexport interface ISerializedGastRule extends ISerializedGast {\n  type: \"Rule\";\n  name: string;\n  orgText: string;\n}\n\nexport interface ISerializedNonTerminal extends ISerializedGast {\n  type: \"NonTerminal\";\n  name: string;\n  label?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminal extends ISerializedGast {\n  type: \"Terminal\";\n  name: string;\n  terminalLabel?: string;\n  label?: string;\n  pattern?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminalWithSeparator extends ISerializedGast {\n  type: \"RepetitionMandatoryWithSeparator\" | \"RepetitionWithSeparator\";\n  idx: number;\n  separator: ISerializedTerminal;\n}\n\nexport type ISerializedGastAny =\n  | ISerializedBasic\n  | ISerializedGastRule\n  | ISerializedNonTerminal\n  | ISerializedTerminal\n  | ISerializedTerminalWithSeparator;\n\nexport function serializeGrammar(topRules: Rule[]): ISerializedGast[] {\n  return map(topRules, serializeProduction);\n}\n\nexport function serializeProduction(node: IProduction): ISerializedGast {\n  function convertDefinition(definition: IProduction[]): ISerializedGast[] {\n    return map(definition, serializeProduction);\n  }\n  /* istanbul ignore else */\n  if (node instanceof NonTerminal) {\n    const serializedNonTerminal: ISerializedNonTerminal = {\n      type: \"NonTerminal\",\n      name: node.nonTerminalName,\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedNonTerminal.label = node.label;\n    }\n\n    return serializedNonTerminal;\n  } else if (node instanceof Alternative) {\n    return <ISerializedBasic>{\n      type: \"Alternative\",\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Option) {\n    return <ISerializedBasic>{\n      type: \"Option\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatory) {\n    return <ISerializedBasic>{\n      type: \"RepetitionMandatory\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatoryWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionMandatoryWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Repetition) {\n    return <ISerializedBasic>{\n      type: \"Repetition\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Alternation) {\n    return <ISerializedBasic>{\n      type: \"Alternation\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Terminal) {\n    const serializedTerminal = <ISerializedTerminal>{\n      type: \"Terminal\",\n      name: node.terminalType.name,\n      label: tokenLabel(node.terminalType),\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedTerminal.terminalLabel = node.label;\n    }\n\n    const pattern = node.terminalType.PATTERN;\n    if (node.terminalType.PATTERN) {\n      serializedTerminal.pattern = isRegExp(pattern)\n        ? (<any>pattern).source\n        : pattern;\n    }\n\n    return serializedTerminal;\n  } else if (node instanceof Rule) {\n    return <ISerializedGastRule>{\n      type: \"Rule\",\n      name: node.name,\n      orgText: node.orgText,\n      definition: convertDefinition(node.definition),\n    };\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction } from \"@chevrotain/types\";\n\nexport abstract class GAstVisitor {\n  public visit(node: IProduction): any {\n    const nodeAny: any = node;\n    switch (nodeAny.constructor) {\n      case NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n      case Alternative:\n        return this.visitAlternative(nodeAny);\n      case Option:\n        return this.visitOption(nodeAny);\n      case RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n      case RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n      case RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n      case Repetition:\n        return this.visitRepetition(nodeAny);\n      case Alternation:\n        return this.visitAlternation(nodeAny);\n      case Terminal:\n        return this.visitTerminal(nodeAny);\n      case Rule:\n        return this.visitRule(nodeAny);\n      /* c8 ignore next 2 */\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  }\n\n  /* c8 ignore next */\n  public visitNonTerminal(node: NonTerminal): any {}\n\n  /* c8 ignore next */\n  public visitAlternative(node: Alternative): any {}\n\n  /* c8 ignore next */\n  public visitOption(node: Option): any {}\n\n  /* c8 ignore next */\n  public visitRepetition(node: Repetition): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\n\n  /* c8 ignore next 3 */\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\n\n  /* c8 ignore next */\n  public visitAlternation(node: Alternation): any {}\n\n  /* c8 ignore next */\n  public visitTerminal(node: Terminal): any {}\n\n  /* c8 ignore next */\n  public visitRule(node: Rule): any {}\n}\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.some` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction baseSome(collection, predicate) {\n  var result;\n\n  baseEach(collection, function(value, index, collection) {\n    result = predicate(value, index, collection);\n    return !result;\n  });\n  return !!result;\n}\n\nexport default baseSome;\n","import arraySome from './_arraySome.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseSome from './_baseSome.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **any** element of `collection`.\n * Iteration is stopped once `predicate` returns truthy. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n * @example\n *\n * _.some([null, 0, 'yes', false], Boolean);\n * // => true\n *\n * var users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'fred',   'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.some(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.some(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.some(users, 'active');\n * // => true\n */\nfunction some(collection, predicate, guard) {\n  var func = isArray(collection) ? arraySome : baseSome;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default some;\n","import baseIndexOf from './_baseIndexOf.js';\nimport isArrayLike from './isArrayLike.js';\nimport isString from './isString.js';\nimport toInteger from './toInteger.js';\nimport values from './values.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\nexport default includes;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default arrayEvery;\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nexport default baseEvery;\n","import arrayEvery from './_arrayEvery.js';\nimport baseEvery from './_baseEvery.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default every;\n","import { every, includes, some } from \"lodash-es\";\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction, IProductionWithOccurrence } from \"@chevrotain/types\";\n\nexport function isSequenceProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return (\n    prod instanceof Alternative ||\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionMandatory ||\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod instanceof RepetitionWithSeparator ||\n    prod instanceof Terminal ||\n    prod instanceof Rule\n  );\n}\n\nexport function isOptionalProd(\n  prod: IProduction,\n  alreadyVisited: NonTerminal[] = [],\n): boolean {\n  const isDirectlyOptional =\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionWithSeparator;\n  if (isDirectlyOptional) {\n    return true;\n  }\n\n  // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some((<Alternation>prod).definition, (subProd: IProduction) => {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n    return every(\n      (<AbstractProduction>prod).definition,\n      (subProd: IProduction) => {\n        return isOptionalProd(subProd, alreadyVisited);\n      },\n    );\n  } else {\n    return false;\n  }\n}\n\nexport function isBranchingProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return prod instanceof Alternation;\n}\n\nexport function getProductionDslName(prod: IProductionWithOccurrence): string {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof Option) {\n    return \"OPTION\";\n  } else if (prod instanceof Alternation) {\n    return \"OR\";\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\";\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import { drop, forEach } from \"lodash-es\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction } from \"@chevrotain/types\";\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport abstract class RestWalker {\n  walk(prod: { definition: IProduction[] }, prevRest: any[] = []): void {\n    forEach(prod.definition, (subProd: IProduction, index) => {\n      const currRest = drop(prod.definition, index + 1);\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof Terminal) {\n        this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternative) {\n        this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof Option) {\n        this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatory) {\n        this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof Repetition) {\n        this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternation) {\n        this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkFlat(\n    flatProd: Alternative,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABCDEF => after the D the rest is EF\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, <any>fullOrRest);\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, <any>fullOrRest);\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    const fullAtLeastOneRest: IProduction[] = [\n      new Option({ definition: atLeastOneProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    const fullAtLeastOneSepRest = restForRepetitionWithSeparator(\n      atLeastOneSepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    const fullManyRest: IProduction[] = [\n      new Option({ definition: manyProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(manyProd, fullManyRest);\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    const fullManySepRest = restForRepetitionWithSeparator(\n      manySepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(manySepProd, fullManySepRest);\n  }\n\n  walkOr(\n    orProd: Alternation,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    const fullOrRest = currRest.concat(prevRest);\n    // walk all different alternatives\n    forEach(orProd.definition, (alt) => {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      const prodWrapper = new Alternative({ definition: [alt] });\n      this.walk(prodWrapper, <any>fullOrRest);\n    });\n  }\n}\n\nfunction restForRepetitionWithSeparator(\n  repSepProd: RepetitionWithSeparator,\n  currRest: IProduction[],\n  prevRest: IProduction[],\n) {\n  const repSepRest = [\n    new Option({\n      definition: [\n        new Terminal({ terminalType: repSepProd.separator }) as IProduction,\n      ].concat(repSepProd.definition),\n    }) as IProduction,\n  ];\n  const fullRepSepRest: IProduction[] = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}\n","import baseUniq from './_baseUniq.js';\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nexport default uniq;\n","import { flatten, map, uniq } from \"lodash-es\";\nimport {\n  isBranchingProd,\n  isOptionalProd,\n  isSequenceProd,\n  NonTerminal,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\nexport function first(prod: IProduction): TokenType[] {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first((<NonTerminal>prod).referencedRule);\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(<Terminal>prod);\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function firstForSequence(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  let firstSet: TokenType[] = [];\n  const seq = prod.definition;\n  let nextSubProdIdx = 0;\n  let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  let currSubProd;\n  // so we enter the loop at least once (if the definition is not empty\n  let isLastInnerProdOptional = true;\n  // scan a sequence until it's end or until we have found a NONE optional production in it\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n\n  return uniq(firstSet);\n}\n\nexport function firstForBranching(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  const allAlternativesFirsts: TokenType[][] = map(\n    prod.definition,\n    (innerProd) => {\n      return first(innerProd);\n    },\n  );\n  return uniq(flatten<TokenType>(allAlternativesFirsts));\n}\n\nexport function firstForTerminal(terminal: Terminal): TokenType[] {\n  return [terminal.terminalType];\n}\n","// TODO: can this be removed? where is it used?\nexport const IN = \"_~IN~_\";\n","import { RestWalker } from \"./rest.js\";\nimport { first } from \"./first.js\";\nimport { assign, forEach } from \"lodash-es\";\nimport { IN } from \"../constants.js\";\nimport { Alternative, NonTerminal, Rule, Terminal } from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nexport class ResyncFollowsWalker extends RestWalker {\n  public follows: Record<string, TokenType[]> = {};\n\n  constructor(private topProd: Rule) {\n    super();\n  }\n\n  startWalking(): Record<string, TokenType[]> {\n    this.walk(this.topProd);\n    return this.follows;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // do nothing! just like in the public sector after 13:00\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    const followName =\n      buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +\n      this.topProd.name;\n    const fullRest: IProduction[] = currRest.concat(prevRest);\n    const restProd = new Alternative({ definition: fullRest });\n    const t_in_topProd_follows = first(restProd);\n    this.follows[followName] = t_in_topProd_follows;\n  }\n}\n\nexport function computeAllProdsFollows(\n  topProductions: Rule[],\n): Record<string, TokenType[]> {\n  const reSyncFollows = {};\n\n  forEach(topProductions, (topProd) => {\n    const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n    assign(reSyncFollows, currRefsFollow);\n  });\n  return reSyncFollows;\n}\n\nexport function buildBetweenProdsFollowPrefix(\n  inner: Rule,\n  occurenceInParent: number,\n): string {\n  return inner.name + occurenceInParent + IN;\n}\n\nexport function buildInProdFollowPrefix(terminal: Terminal): string {\n  const terminalName = terminal.terminalType.name;\n  return terminalName + terminal.idx + IN;\n}\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nexport default negate;\n","import arrayFilter from './_arrayFilter.js';\nimport baseFilter from './_baseFilter.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport negate from './negate.js';\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nexport default reject;\n","import baseIndexOf from './_baseIndexOf.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nexport default indexOf;\n","import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n","import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nexport default difference;\n","/**\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.compact([0, 1, false, 2, '', 3]);\n * // => [1, 2, 3]\n */\nfunction compact(array) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default compact;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nexport default head;\n","export function PRINT_ERROR(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js */\n  if (console && console.error) {\n    console.error(`Error: ${msg}`);\n  }\n}\n\nexport function PRINT_WARNING(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js*/\n  if (console && console.warn) {\n    // TODO: modify docs accordingly\n    console.warn(`Warning: ${msg}`);\n  }\n}\n","import {\n  Alternative,\n  Assertion,\n  Atom,\n  Disjunction,\n  RegExpParser,\n  RegExpPattern,\n} from \"@chevrotain/regexp-to-ast\";\n\nlet regExpAstCache: { [regex: string]: RegExpPattern } = {};\nconst regExpParser = new RegExpParser();\n\n// this should be moved to regexp-to-ast\nexport type ASTNode =\n  | RegExpPattern\n  | Disjunction\n  | Alternative\n  | Assertion\n  | Atom;\n\nexport function getRegExpAst(regExp: RegExp): RegExpPattern {\n  const regExpStr = regExp.toString();\n  if (regExpAstCache.hasOwnProperty(regExpStr)) {\n    return regExpAstCache[regExpStr];\n  } else {\n    const regExpAst = regExpParser.pattern(regExpStr);\n    regExpAstCache[regExpStr] = regExpAst;\n    return regExpAst;\n  }\n}\n\nexport function clearRegExpParserCache() {\n  regExpAstCache = {};\n}\n","import {\n  Alternative,\n  Atom,\n  BaseRegExpVisitor,\n  Character,\n  Disjunction,\n  Group,\n  Set,\n} from \"@chevrotain/regexp-to-ast\";\nimport { every, find, forEach, includes, isArray, values } from \"lodash-es\";\nimport { PRINT_ERROR, PRINT_WARNING } from \"@chevrotain/utils\";\nimport { ASTNode, getRegExpAst } from \"./reg_exp_parser.js\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer.js\";\n\nconst complementErrorMessage =\n  \"Complement Sets are not supported for first char optimization\";\nexport const failedOptimizationPrefixMsg =\n  'Unable to use \"first char\" lexer optimizations:\\n';\n\nexport function getOptimizedStartCodesIndices(\n  regExp: RegExp,\n  ensureOptimizations = false,\n): number[] {\n  try {\n    const ast = getRegExpAst(regExp);\n    const firstChars = firstCharOptimizedIndices(\n      ast.value,\n      {},\n      ast.flags.ignoreCase,\n    );\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        PRINT_WARNING(\n          `${failedOptimizationPrefixMsg}` +\n            `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n            \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\",\n        );\n      }\n    } else {\n      let msgSuffix = \"\";\n      if (ensureOptimizations) {\n        msgSuffix =\n          \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n      PRINT_ERROR(\n        `${failedOptimizationPrefixMsg}\\n` +\n          `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n          `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n          \"\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\" +\n          msgSuffix,\n      );\n    }\n  }\n\n  return [];\n}\n\nexport function firstCharOptimizedIndices(\n  ast: ASTNode,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n): number[] {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (let i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n      break;\n    case \"Alternative\":\n      const terms = ast.value;\n      for (let i = 0; i < terms.length; i++) {\n        const term = terms[i];\n\n        // skip terms that cannot effect the first char results\n        switch (term.type) {\n          case \"EndAnchor\":\n          // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n          case \"GroupBackReference\":\n          // assertions do not affect potential starting codes\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n\n        const atom = term;\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n            forEach(atom.value, (code) => {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                const range = code as any;\n                // cannot optimize when ignoreCase is\n                if (ignoreCase === true) {\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                }\n                // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to && rangeCode < minOptimizationVal;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n\n                  // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                  if (range.to >= minOptimizationVal) {\n                    const minUnOptVal =\n                      range.from >= minOptimizationVal\n                        ? range.from\n                        : minOptimizationVal;\n                    const maxUnOptVal = range.to;\n                    const minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                    const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n\n                    for (\n                      let currOptIdx = minOptIdx;\n                      currOptIdx <= maxOptIdx;\n                      currOptIdx++\n                    ) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n          /* istanbul ignore next */\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        }\n\n        // reached a mandatory production, no more **start** codes can be found on this alternative\n        const isOptionalQuantifier =\n          atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n        if (\n          // A group may be optional due to empty contents /(?:)/\n          // or if everything inside it is optional /((a)?)/\n          (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n          // If this term is not a group it may only be optional if it has an optional quantifier\n          (atom.type !== \"Group\" && isOptionalQuantifier === false)\n        ) {\n          break;\n        }\n      }\n      break;\n    /* istanbul ignore next */\n    default:\n      throw Error(\"non exhaustive match!\");\n  }\n\n  // console.log(Object.keys(result).length)\n  return values(result);\n}\n\nfunction addOptimizedIdxToResult(\n  code: number,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n) {\n  const optimizedCharIdx = charCodeToOptimizedIndex(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\n\nfunction handleIgnoreCase(\n  code: number,\n  result: { [charCode: number]: number },\n) {\n  const char = String.fromCharCode(code);\n  const upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n  if (upperChar !== char) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    const lowerChar = char.toLowerCase();\n    if (lowerChar !== char) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(\n        lowerChar.charCodeAt(0),\n      );\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\n\nfunction findCode(setNode: Set, targetCharCodes: number[]) {\n  return find(setNode.value, (codeOrRange) => {\n    if (typeof codeOrRange === \"number\") {\n      return includes(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      const range = <any>codeOrRange;\n      return (\n        find(\n          targetCharCodes,\n          (targetCode) => range.from <= targetCode && targetCode <= range.to,\n        ) !== undefined\n      );\n    }\n  });\n}\n\nfunction isWholeOptional(ast: any): boolean {\n  const quantifier = (ast as Atom).quantifier;\n  if (quantifier && quantifier.atLeast === 0) {\n    return true;\n  }\n\n  if (!ast.value) {\n    return false;\n  }\n\n  return isArray(ast.value)\n    ? every(ast.value, isWholeOptional)\n    : isWholeOptional(ast.value);\n}\n\nclass CharCodeFinder extends BaseRegExpVisitor {\n  found: boolean = false;\n\n  constructor(private targetCharCodes: number[]) {\n    super();\n  }\n\n  visitChildren(node: ASTNode) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    }\n\n    // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n\n    super.visitChildren(node);\n  }\n\n  visitCharacter(node: Character) {\n    if (includes(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  }\n\n  visitSet(node: Set) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  }\n}\n\nexport function canMatchCharCode(\n  charCodes: number[],\n  pattern: RegExp | string,\n) {\n  if (pattern instanceof RegExp) {\n    const ast = getRegExpAst(pattern);\n    const charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return (\n      find(<any>pattern, (char) => {\n        return includes(charCodes, (<string>char).charCodeAt(0));\n      }) !== undefined\n    );\n  }\n}\n","import { BaseRegExpVisitor } from \"@chevrotain/regexp-to-ast\";\nimport {\n  IRegExpExec,\n  Lexer,\n  LexerDefinitionErrorType,\n} from \"./lexer_public.js\";\nimport {\n  compact,\n  defaults,\n  difference,\n  filter,\n  find,\n  first,\n  flatten,\n  forEach,\n  has,\n  includes,\n  indexOf,\n  isArray,\n  isEmpty,\n  isFunction,\n  isRegExp,\n  isString,\n  isUndefined,\n  keys,\n  map,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport { PRINT_ERROR } from \"@chevrotain/utils\";\nimport {\n  canMatchCharCode,\n  failedOptimizationPrefixMsg,\n  getOptimizedStartCodesIndices,\n} from \"./reg_exp.js\";\nimport {\n  ILexerDefinitionError,\n  ILineTerminatorsTester,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { getRegExpAst } from \"./reg_exp_parser.js\";\n\nconst PATTERN = \"PATTERN\";\nexport const DEFAULT_MODE = \"defaultMode\";\nexport const MODES = \"modes\";\n\nexport interface IPatternConfig {\n  pattern: IRegExpExec | string;\n  longerAlt: number[] | undefined;\n  canLineTerminator: boolean;\n  isCustom: boolean;\n  short: number | false;\n  group: string | undefined | false;\n  push: string | undefined;\n  pop: boolean;\n  tokenType: TokenType;\n  tokenTypeIdx: number;\n}\n\nexport interface IAnalyzeResult {\n  patternIdxToConfig: IPatternConfig[];\n  charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] };\n  emptyGroups: { [groupName: string]: IToken[] };\n  hasCustom: boolean;\n  canBeOptimized: boolean;\n}\n\nexport let SUPPORT_STICKY =\n  typeof (<any>new RegExp(\"(?:)\")).sticky === \"boolean\";\n\nexport function disableSticky() {\n  SUPPORT_STICKY = false;\n}\n\nexport function enableSticky() {\n  SUPPORT_STICKY = true;\n}\n\nexport function analyzeTokenTypes(\n  tokenTypes: TokenType[],\n  options: {\n    positionTracking?: \"full\" | \"onlyStart\" | \"onlyOffset\";\n    ensureOptimizations?: boolean;\n    lineTerminatorCharacters?: (number | string)[];\n    // TODO: should `useSticky` be an argument here?\n    useSticky?: boolean;\n    safeMode?: boolean;\n    tracer?: (msg: string, action: () => void) => void;\n  },\n): IAnalyzeResult {\n  options = defaults(options, {\n    useSticky: SUPPORT_STICKY,\n    debug: false as boolean,\n    safeMode: false as boolean,\n    positionTracking: \"full\",\n    lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n    tracer: (msg: string, action: Function) => action(),\n  });\n\n  const tracer = options.tracer!;\n\n  tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n    initCharCodeToOptimizedIndexMap();\n  });\n\n  let onlyRelevantTypes: TokenType[];\n  tracer(\"Reject Lexer.NA\", () => {\n    onlyRelevantTypes = reject(tokenTypes, (currType) => {\n      return currType[PATTERN] === Lexer.NA;\n    });\n  });\n\n  let hasCustom = false;\n  let allTransformedPatterns: (IRegExpExec | string)[];\n  tracer(\"Transform Patterns\", () => {\n    hasCustom = false;\n    allTransformedPatterns = map(\n      onlyRelevantTypes,\n      (currType): IRegExpExec | string => {\n        const currPattern = currType[PATTERN];\n\n        /* istanbul ignore else */\n        if (isRegExp(currPattern)) {\n          const regExpSource = currPattern.source;\n          if (\n            regExpSource.length === 1 &&\n            // only these regExp meta characters which can appear in a length one regExp\n            regExpSource !== \"^\" &&\n            regExpSource !== \"$\" &&\n            regExpSource !== \".\" &&\n            !currPattern.ignoreCase\n          ) {\n            return regExpSource;\n          } else if (\n            regExpSource.length === 2 &&\n            regExpSource[0] === \"\\\\\" &&\n            // not a meta character\n            !includes(\n              [\n                \"d\",\n                \"D\",\n                \"s\",\n                \"S\",\n                \"t\",\n                \"r\",\n                \"n\",\n                \"t\",\n                \"0\",\n                \"c\",\n                \"b\",\n                \"B\",\n                \"f\",\n                \"v\",\n                \"w\",\n                \"W\",\n              ],\n              regExpSource[1],\n            )\n          ) {\n            // escaped meta Characters: /\\+/ /\\[/\n            // or redundant escaping: /\\a/\n            // without the escaping \"\\\"\n            return regExpSource[1];\n          } else {\n            return options.useSticky\n              ? addStickyFlag(currPattern)\n              : addStartOfInput(currPattern);\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true;\n          // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n          return { exec: currPattern };\n        } else if (typeof currPattern === \"object\") {\n          hasCustom = true;\n          // ICustomPattern\n          return currPattern;\n        } else if (typeof currPattern === \"string\") {\n          if (currPattern.length === 1) {\n            return currPattern;\n          } else {\n            const escapedRegExpString = currPattern.replace(\n              /[\\\\^$.*+?()[\\]{}|]/g,\n              \"\\\\$&\",\n            );\n            const wrappedRegExp = new RegExp(escapedRegExpString);\n            return options.useSticky\n              ? addStickyFlag(wrappedRegExp)\n              : addStartOfInput(wrappedRegExp);\n          }\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      },\n    );\n  });\n\n  let patternIdxToType: number[];\n  let patternIdxToGroup: (string | undefined | false)[];\n  let patternIdxToLongerAltIdxArr: (number[] | undefined)[];\n  let patternIdxToPushMode: (string | undefined)[];\n  let patternIdxToPopMode: boolean[];\n  tracer(\"misc mapping\", () => {\n    patternIdxToType = map(\n      onlyRelevantTypes,\n      (currType) => currType.tokenTypeIdx!,\n    );\n\n    patternIdxToGroup = map(onlyRelevantTypes, (clazz: any) => {\n      const groupName = clazz.GROUP;\n      /* istanbul ignore next */\n      if (groupName === Lexer.SKIPPED) {\n        return undefined;\n      } else if (isString(groupName)) {\n        return groupName;\n      } else if (isUndefined(groupName)) {\n        return false;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n\n    patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz: any) => {\n      const longerAltType = clazz.LONGER_ALT;\n\n      if (longerAltType) {\n        const longerAltIdxArr = isArray(longerAltType)\n          ? map(longerAltType, (type: any) => indexOf(onlyRelevantTypes, type))\n          : [indexOf(onlyRelevantTypes, longerAltType)];\n        return longerAltIdxArr;\n      }\n    });\n\n    patternIdxToPushMode = map(\n      onlyRelevantTypes,\n      (clazz: any) => clazz.PUSH_MODE,\n    );\n\n    patternIdxToPopMode = map(onlyRelevantTypes, (clazz: any) =>\n      has(clazz, \"POP_MODE\"),\n    );\n  });\n\n  let patternIdxToCanLineTerminator: boolean[];\n  tracer(\"Line Terminator Handling\", () => {\n    const lineTerminatorCharCodes = getCharCodes(\n      options.lineTerminatorCharacters!,\n    );\n    patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false);\n    if (options.positionTracking !== \"onlyOffset\") {\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n        if (has(tokType, \"LINE_BREAKS\")) {\n          return !!tokType.LINE_BREAKS;\n        } else {\n          return (\n            checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n            canMatchCharCode(\n              lineTerminatorCharCodes,\n              tokType.PATTERN as RegExp | string,\n            )\n          );\n        }\n      });\n    }\n  });\n\n  let patternIdxToIsCustom: boolean[];\n  let patternIdxToShort: (number | false)[];\n  let emptyGroups!: { [groupName: string]: IToken[] };\n  let patternIdxToConfig!: IPatternConfig[];\n  tracer(\"Misc Mapping #2\", () => {\n    patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n    patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n\n    emptyGroups = reduce(\n      onlyRelevantTypes,\n      (acc, clazz: any) => {\n        const groupName = clazz.GROUP;\n        if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n          acc[groupName] = [];\n        }\n        return acc;\n      },\n      {} as { [groupName: string]: IToken[] },\n    );\n\n    patternIdxToConfig = map(\n      allTransformedPatterns,\n      (x, idx): IPatternConfig => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx],\n        };\n      },\n    );\n  });\n\n  let canBeOptimized = true;\n  let charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] } =\n    [];\n\n  if (!options.safeMode) {\n    tracer(\"First Char Optimization\", () => {\n      charCodeToPatternIdxToConfig = reduce(\n        onlyRelevantTypes,\n        (result, currTokType, idx) => {\n          if (typeof currTokType.PATTERN === \"string\") {\n            const charCode = currTokType.PATTERN.charCodeAt(0);\n            const optimizedIdx = charCodeToOptimizedIndex(charCode);\n            addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n          } else if (isArray(currTokType.START_CHARS_HINT)) {\n            let lastOptimizedIdx: number;\n            forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n              const charCode =\n                typeof charOrInt === \"string\"\n                  ? charOrInt.charCodeAt(0)\n                  : charOrInt;\n              const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n              // Avoid adding the config multiple times\n              /* istanbul ignore else */\n              // - Difficult to check this scenario effects as it is only a performance\n              //   optimization that does not change correctness\n              if (lastOptimizedIdx !== currOptimizedIdx) {\n                lastOptimizedIdx = currOptimizedIdx;\n                addToMapOfArrays(\n                  result,\n                  currOptimizedIdx,\n                  patternIdxToConfig[idx],\n                );\n              }\n            });\n          } else if (isRegExp(currTokType.PATTERN)) {\n            if (currTokType.PATTERN.unicode) {\n              canBeOptimized = false;\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(\n                  `${failedOptimizationPrefixMsg}` +\n                    `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                    \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\",\n                );\n              }\n            } else {\n              const optimizedCodes = getOptimizedStartCodesIndices(\n                currTokType.PATTERN,\n                options.ensureOptimizations,\n              );\n              /* istanbul ignore if */\n              // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n              // the first should be a different validation and the second cannot be tested.\n              if (isEmpty(optimizedCodes)) {\n                // we cannot understand what codes may start possible matches\n                // The optimization correctness requires knowing start codes for ALL patterns.\n                // Not actually sure this is an error, no debug message\n                canBeOptimized = false;\n              }\n              forEach(optimizedCodes, (code) => {\n                addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n              });\n            }\n          } else {\n            if (options.ensureOptimizations) {\n              PRINT_ERROR(\n                `${failedOptimizationPrefixMsg}` +\n                  `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                  \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                  \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\",\n              );\n            }\n            canBeOptimized = false;\n          }\n\n          return result;\n        },\n        [] as { [charCode: number]: IPatternConfig[] },\n      );\n    });\n  }\n\n  return {\n    emptyGroups: emptyGroups,\n    patternIdxToConfig: patternIdxToConfig,\n    charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n    hasCustom: hasCustom,\n    canBeOptimized: canBeOptimized,\n  };\n}\n\nexport function validatePatterns(\n  tokenTypes: TokenType[],\n  validModesNames: string[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n\n  const missingResult = findMissingPatterns(tokenTypes);\n  errors = errors.concat(missingResult.errors);\n\n  const invalidResult = findInvalidPatterns(missingResult.valid);\n  const validTokenTypes = invalidResult.valid;\n  errors = errors.concat(invalidResult.errors);\n\n  errors = errors.concat(validateRegExpPattern(validTokenTypes));\n\n  errors = errors.concat(findInvalidGroupType(validTokenTypes));\n\n  errors = errors.concat(\n    findModesThatDoNotExist(validTokenTypes, validModesNames),\n  );\n\n  errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n\n  return errors;\n}\n\nfunction validateRegExpPattern(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n  const withRegExpPatterns = filter(tokenTypes, (currTokType) =>\n    isRegExp(currTokType[PATTERN]),\n  );\n\n  errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n\n  errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n\n  errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n\n  return errors;\n}\n\nexport interface ILexerFilterResult {\n  errors: ILexerDefinitionError[];\n  valid: TokenType[];\n}\n\nexport function findMissingPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n    return !has(currType, PATTERN);\n  });\n\n  const errors = map(tokenTypesWithMissingPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- missing static 'PATTERN' property\",\n      type: LexerDefinitionErrorType.MISSING_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithMissingPattern);\n  return { errors, valid };\n}\n\nexport function findInvalidPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return (\n      !isRegExp(pattern) &&\n      !isFunction(pattern) &&\n      !has(pattern, \"exec\") &&\n      !isString(pattern)\n    );\n  });\n\n  const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' can only be a RegExp, a\" +\n        \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n      type: LexerDefinitionErrorType.INVALID_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithInvalidPattern);\n  return { errors, valid };\n}\n\nconst end_of_input = /[^\\\\][$]/;\n\nexport function findEndOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class EndAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitEndAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN;\n\n    try {\n      const regexpAst = getRegExpAst(pattern as RegExp);\n      const endAnchorVisitor = new EndAnchorFinder();\n      endAnchorVisitor.visit(regexpAst);\n\n      return endAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return end_of_input.test((pattern as RegExp).source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n        \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findEmptyMatchRegExps(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const matchesEmptyString = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    return pattern.test(\"\");\n  });\n\n  const errors = map(matchesEmptyString, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' must not match an empty string\",\n      type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nconst start_of_input = /[^\\\\[][\\^]|^\\^/;\n\nexport function findStartOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class StartAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitStartAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    try {\n      const regexpAst = getRegExpAst(pattern);\n      const startAnchorVisitor = new StartAnchorFinder();\n      startAnchorVisitor.visit(regexpAst);\n\n      return startAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return start_of_input.test(pattern.source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnsupportedFlags(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidFlags = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n  });\n\n  const errors = map(invalidFlags, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n      type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const found: TokenType[] = [];\n  let identicalPatterns = map(tokenTypes, (outerType: any) => {\n    return reduce(\n      tokenTypes,\n      (result, innerType) => {\n        if (\n          outerType.PATTERN.source === (innerType.PATTERN as RegExp).source &&\n          !includes(found, innerType) &&\n          innerType.PATTERN !== Lexer.NA\n        ) {\n          // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n          // in essence we are creating Equivalence classes on equality relation.\n          found.push(innerType);\n          result.push(innerType);\n          return result;\n        }\n        return result;\n      },\n      [] as TokenType[],\n    );\n  });\n\n  identicalPatterns = compact(identicalPatterns);\n\n  const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n    return currIdenticalSet.length > 1;\n  });\n\n  const errors = map(duplicatePatterns, (setOfIdentical: any) => {\n    const tokenTypeNames = map(setOfIdentical, (currType: any) => {\n      return currType.name;\n    });\n\n    const dupPatternSrc = (<any>first(setOfIdentical)).PATTERN;\n    return {\n      message:\n        `The same RegExp pattern ->${dupPatternSrc}<-` +\n        `has been used in all of the following Token Types: ${tokenTypeNames.join(\n          \", \",\n        )} <-`,\n      type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n      tokenTypes: setOfIdentical,\n    };\n  });\n\n  return errors;\n}\n\nexport function findInvalidGroupType(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidTypes = filter(tokenTypes, (clazz: any) => {\n    if (!has(clazz, \"GROUP\")) {\n      return false;\n    }\n    const group = clazz.GROUP;\n\n    return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group);\n  });\n\n  const errors = map(invalidTypes, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n      type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findModesThatDoNotExist(\n  tokenTypes: TokenType[],\n  validModes: string[],\n): ILexerDefinitionError[] {\n  const invalidModes = filter(tokenTypes, (clazz: any) => {\n    return (\n      clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE)\n    );\n  });\n\n  const errors = map(invalidModes, (tokType) => {\n    const msg =\n      `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n      `which does not exist`;\n    return {\n      message: msg,\n      type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n      tokenTypes: [tokType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnreachablePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  const canBeTested = reduce(\n    tokenTypes,\n    (result, tokType, idx) => {\n      const pattern = tokType.PATTERN;\n\n      if (pattern === Lexer.NA) {\n        return result;\n      }\n\n      // a more comprehensive validation for all forms of regExps would require\n      // deeper regExp analysis capabilities\n      if (isString(pattern)) {\n        result.push({ str: pattern, idx, tokenType: tokType });\n      } else if (isRegExp(pattern) && noMetaChar(pattern)) {\n        result.push({ str: pattern.source, idx, tokenType: tokType });\n      }\n      return result;\n    },\n    [] as { str: string; idx: number; tokenType: TokenType }[],\n  );\n\n  forEach(tokenTypes, (tokType, testIdx) => {\n    forEach(canBeTested, ({ str, idx, tokenType }) => {\n      if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n        const msg =\n          `Token: ->${tokenType.name}<- can never be matched.\\n` +\n          `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n          `in the lexer's definition.\\n` +\n          `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n        errors.push({\n          message: msg,\n          type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n          tokenTypes: [tokType, tokenType],\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nfunction testTokenType(str: string, pattern: any): boolean {\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    const regExpArray = pattern.exec(str);\n    return regExpArray !== null && regExpArray.index === 0;\n  } else if (isFunction(pattern)) {\n    // maintain the API of custom patterns\n    return pattern(str, 0, [], {});\n  } else if (has(pattern, \"exec\")) {\n    // maintain the API of custom patterns\n    return pattern.exec(str, 0, [], {});\n  } else if (typeof pattern === \"string\") {\n    return pattern === str;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction noMetaChar(regExp: RegExp): boolean {\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n  const metaChars = [\n    \".\",\n    \"\\\\\",\n    \"[\",\n    \"]\",\n    \"|\",\n    \"^\",\n    \"$\",\n    \"(\",\n    \")\",\n    \"?\",\n    \"*\",\n    \"+\",\n    \"{\",\n  ];\n  return (\n    find(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined\n  );\n}\n\nexport function addStartOfInput(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"i\" : \"\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`^(?:${pattern.source})`, flags);\n}\n\nexport function addStickyFlag(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`${pattern.source}`, flags);\n}\n\nexport function performRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  // some run time checks to help the end users.\n  if (!has(lexerDefinition, DEFAULT_MODE)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        DEFAULT_MODE +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n    });\n  }\n  if (!has(lexerDefinition, MODES)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        MODES +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n    });\n  }\n\n  if (\n    has(lexerDefinition, MODES) &&\n    has(lexerDefinition, DEFAULT_MODE) &&\n    !has(lexerDefinition.modes, lexerDefinition.defaultMode)\n  ) {\n    errors.push({\n      message:\n        `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n        `which does not exist\\n`,\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n    });\n  }\n\n  if (has(lexerDefinition, MODES)) {\n    forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n      forEach(currModeValue, (currTokType, currIdx) => {\n        if (isUndefined(currTokType)) {\n          errors.push({\n            message:\n              `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n              `<${currModeName}> at index: <${currIdx}>\\n`,\n            type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n          });\n        } else if (has(currTokType, \"LONGER_ALT\")) {\n          const longerAlt = isArray(currTokType.LONGER_ALT)\n            ? currTokType.LONGER_ALT\n            : [currTokType.LONGER_ALT];\n          forEach(longerAlt, (currLongerAlt) => {\n            if (\n              !isUndefined(currLongerAlt) &&\n              !includes(currModeValue, currLongerAlt)\n            ) {\n              errors.push({\n                message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n              });\n            }\n          });\n        }\n      });\n    });\n  }\n\n  return errors;\n}\n\nexport function performWarningRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const warnings = [];\n  let hasAnyLineBreak = false;\n  const allTokenTypes = compact(flatten(values(lexerDefinition.modes)));\n\n  const concreteTokenTypes = reject(\n    allTokenTypes,\n    (currType) => currType[PATTERN] === Lexer.NA,\n  );\n  const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n  if (trackLines) {\n    forEach(concreteTokenTypes, (tokType) => {\n      const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n      if (currIssue !== false) {\n        const message = buildLineBreakIssueMessage(tokType, currIssue);\n        const warningDescriptor = {\n          message,\n          type: currIssue.issue,\n          tokenType: tokType,\n        };\n        warnings.push(warningDescriptor);\n      } else {\n        // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n        if (has(tokType, \"LINE_BREAKS\")) {\n          if (tokType.LINE_BREAKS === true) {\n            hasAnyLineBreak = true;\n          }\n        } else {\n          if (\n            canMatchCharCode(terminatorCharCodes, tokType.PATTERN as RegExp)\n          ) {\n            hasAnyLineBreak = true;\n          }\n        }\n      }\n    });\n  }\n\n  if (trackLines && !hasAnyLineBreak) {\n    warnings.push({\n      message:\n        \"Warning: No LINE_BREAKS Found.\\n\" +\n        \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n        \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n    });\n  }\n  return warnings;\n}\n\nexport function cloneEmptyGroups(emptyGroups: {\n  [groupName: string]: IToken;\n}): { [groupName: string]: IToken } {\n  const clonedResult: any = {};\n  const groupKeys = keys(emptyGroups);\n\n  forEach(groupKeys, (currKey) => {\n    const currGroupValue = emptyGroups[currKey];\n\n    /* istanbul ignore else */\n    if (isArray(currGroupValue)) {\n      clonedResult[currKey] = [];\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  });\n\n  return clonedResult;\n}\n\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType: TokenType): boolean {\n  const pattern = tokenType.PATTERN;\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    return false;\n  } else if (isFunction(pattern)) {\n    // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n    return true;\n  } else if (has(pattern, \"exec\")) {\n    // ICustomPattern\n    return true;\n  } else if (isString(pattern)) {\n    return false;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function isShortPattern(pattern: any): number | false {\n  if (isString(pattern) && pattern.length === 1) {\n    return pattern.charCodeAt(0);\n  } else {\n    return false;\n  }\n}\n\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport const LineTerminatorOptimizedTester: ILineTerminatorsTester = {\n  // implements /\\n|\\r\\n?/g.test\n  test: function (text) {\n    const len = text.length;\n    for (let i = this.lastIndex; i < len; i++) {\n      const c = text.charCodeAt(i);\n      if (c === 10) {\n        this.lastIndex = i + 1;\n        return true;\n      } else if (c === 13) {\n        if (text.charCodeAt(i + 1) === 10) {\n          this.lastIndex = i + 2;\n        } else {\n          this.lastIndex = i + 1;\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n\n  lastIndex: 0,\n};\n\nfunction checkLineBreaksIssues(\n  tokType: TokenType,\n  lineTerminatorCharCodes: number[],\n):\n  | {\n      issue:\n        | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n        | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n      errMsg?: string;\n    }\n  | false {\n  if (has(tokType, \"LINE_BREAKS\")) {\n    // if the user explicitly declared the line_breaks option we will respect their choice\n    // and assume it is correct.\n    return false;\n  } else {\n    /* istanbul ignore else */\n    if (isRegExp(tokType.PATTERN)) {\n      try {\n        // TODO: why is the casting suddenly needed?\n        canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN as RegExp);\n      } catch (e) {\n        /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n        return {\n          issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n          errMsg: (e as Error).message,\n        };\n      }\n      return false;\n    } else if (isString(tokType.PATTERN)) {\n      // string literal patterns can always be analyzed to detect line terminator usage\n      return false;\n    } else if (isCustomPattern(tokType)) {\n      // custom token types\n      return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK };\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n}\n\nexport function buildLineBreakIssueMessage(\n  tokType: TokenType,\n  details: {\n    issue:\n      | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n      | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n    errMsg?: string;\n  },\n): string {\n  /* istanbul ignore else */\n  if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n    return (\n      \"Warning: unable to identify line terminator usage in pattern.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      `\\t Root cause: ${details.errMsg}.\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\"\n    );\n  } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n    return (\n      \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\"\n    );\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction getCharCodes(charsOrCodes: (number | string)[]): number[] {\n  const charCodes = map(charsOrCodes, (numOrString) => {\n    if (isString(numOrString)) {\n      return numOrString.charCodeAt(0);\n    } else {\n      return numOrString;\n    }\n  });\n\n  return charCodes;\n}\n\nfunction addToMapOfArrays<T>(\n  map: Record<number, T[]>,\n  key: number,\n  value: T,\n): void {\n  if (map[key] === undefined) {\n    map[key] = [value];\n  } else {\n    map[key].push(value);\n  }\n}\n\nexport const minOptimizationVal = 256;\n\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nlet charCodeToOptimizedIdxMap: number[] = [];\nexport function charCodeToOptimizedIndex(charCode: number): number {\n  return charCode < minOptimizationVal\n    ? charCode\n    : charCodeToOptimizedIdxMap[charCode];\n}\n\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nfunction initCharCodeToOptimizedIndexMap() {\n  if (isEmpty(charCodeToOptimizedIdxMap)) {\n    charCodeToOptimizedIdxMap = new Array(65536);\n    for (let i = 0; i < 65536; i++) {\n      charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n    }\n  }\n}\n","export function timer<T>(func: () => T): { time: number; value: T } {\n  const start = new Date().getTime();\n  const val = func();\n  const end = new Date().getTime();\n  const total = end - start;\n  return { time: total, value: val };\n}\n","import {\n  clone,\n  compact,\n  difference,\n  flatten,\n  forEach,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport { IToken, TokenType } from \"@chevrotain/types\";\n\nexport function tokenStructuredMatcher(\n  tokInstance: IToken,\n  tokConstructor: TokenType,\n) {\n  const instanceType = tokInstance.tokenTypeIdx;\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return (\n      tokConstructor.isParent === true &&\n      tokConstructor.categoryMatchesMap![instanceType] === true\n    );\n  }\n}\n\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(\n  token: IToken,\n  tokType: TokenType,\n) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexport let tokenShortNameIdx = 1;\nexport const tokenIdxToClass: { [tokenIdx: number]: TokenType } = {};\n\nexport function augmentTokenTypes(tokenTypes: TokenType[]): void {\n  // collect the parent Token Types as well.\n  const tokenTypesAndParents = expandCategories(tokenTypes);\n\n  // add required tokenType and categoryMatches properties\n  assignTokenDefaultProps(tokenTypesAndParents);\n\n  // fill up the categoryMatches\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n\n  forEach(tokenTypesAndParents, (tokType) => {\n    tokType.isParent = tokType.categoryMatches!.length > 0;\n  });\n}\n\nexport function expandCategories(tokenTypes: TokenType[]): TokenType[] {\n  let result = clone(tokenTypes);\n\n  let categories = tokenTypes;\n  let searching = true;\n  while (searching) {\n    categories = compact(\n      flatten(map(categories, (currTokType) => currTokType.CATEGORIES)),\n    );\n\n    const newCategories = difference(categories, result);\n\n    result = result.concat(newCategories);\n\n    if (isEmpty(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n  return result;\n}\n\nexport function assignTokenDefaultProps(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    if (!hasShortKeyProperty(currTokType)) {\n      tokenIdxToClass[tokenShortNameIdx] = currTokType;\n      (<any>currTokType).tokenTypeIdx = tokenShortNameIdx++;\n    }\n\n    // CATEGORIES? : TokenType | TokenType[]\n    if (\n      hasCategoriesProperty(currTokType) &&\n      !isArray(currTokType.CATEGORIES)\n      // &&\n      // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES as unknown as TokenType];\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexport function assignCategoriesTokensProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    forEach(currTokType.categoryMatchesMap!, (val, key) => {\n      currTokType.categoryMatches!.push(\n        tokenIdxToClass[key as unknown as number].tokenTypeIdx!,\n      );\n    });\n  });\n}\n\nexport function assignCategoriesMapProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexport function singleAssignCategoriesToksMap(\n  path: TokenType[],\n  nextNode: TokenType,\n): void {\n  forEach(path, (pathNode) => {\n    nextNode.categoryMatchesMap![pathNode.tokenTypeIdx!] = true;\n  });\n\n  forEach(nextNode.CATEGORIES, (nextCategory) => {\n    const newPath = path.concat(nextNode);\n    // avoids infinite loops due to cyclic categories.\n    if (!includes(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexport function hasShortKeyProperty(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n\nexport function hasCategoriesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"CATEGORIES\");\n}\n\nexport function hasExtendingTokensTypesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"categoryMatches\");\n}\n\nexport function hasExtendingTokensTypesMapProperty(\n  tokType: TokenType,\n): boolean {\n  return has(tokType, \"categoryMatchesMap\");\n}\n\nexport function isTokenType(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n","import { ILexerErrorMessageProvider, IToken } from \"@chevrotain/types\";\n\nexport const defaultLexerErrorProvider: ILexerErrorMessageProvider = {\n  buildUnableToPopLexerModeMessage(token: IToken): string {\n    return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n  },\n\n  buildUnexpectedCharactersMessage(\n    fullText: string,\n    startOffset: number,\n    length: number,\n    line?: number,\n    column?: number,\n  ): string {\n    return (\n      `unexpected character: ->${fullText.charAt(\n        startOffset,\n      )}<- at offset: ${startOffset},` + ` skipped ${length} characters.`\n    );\n  },\n};\n","import {\n  analyzeTokenTypes,\n  charCodeToOptimizedIndex,\n  cloneEmptyGroups,\n  DEFAULT_MODE,\n  IAnalyzeResult,\n  IPatternConfig,\n  LineTerminatorOptimizedTester,\n  performRuntimeChecks,\n  performWarningRuntimeChecks,\n  SUPPORT_STICKY,\n  validatePatterns,\n} from \"./lexer.js\";\nimport {\n  assign,\n  clone,\n  forEach,\n  identity,\n  isArray,\n  isEmpty,\n  isUndefined,\n  keys,\n  last,\n  map,\n  noop,\n  reduce,\n  reject,\n} from \"lodash-es\";\nimport { PRINT_WARNING, timer, toFastProperties } from \"@chevrotain/utils\";\nimport { augmentTokenTypes } from \"./tokens.js\";\nimport {\n  CustomPatternMatcherFunc,\n  CustomPatternMatcherReturn,\n  ILexerConfig,\n  ILexerDefinitionError,\n  ILexingError,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { defaultLexerErrorProvider } from \"./lexer_errors_public.js\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser.js\";\n\nexport interface ILexingResult {\n  tokens: IToken[];\n  groups: { [groupName: string]: IToken[] };\n  errors: ILexingError[];\n}\n\nexport enum LexerDefinitionErrorType {\n  MISSING_PATTERN,\n  INVALID_PATTERN,\n  EOI_ANCHOR_FOUND,\n  UNSUPPORTED_FLAGS_FOUND,\n  DUPLICATE_PATTERNS_FOUND,\n  INVALID_GROUP_TYPE_FOUND,\n  PUSH_MODE_DOES_NOT_EXIST,\n  MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n  MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n  MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n  LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n  SOI_ANCHOR_FOUND,\n  EMPTY_MATCH_PATTERN,\n  NO_LINE_BREAKS_FLAGS,\n  UNREACHABLE_PATTERN,\n  IDENTIFY_TERMINATOR,\n  CUSTOM_LINE_BREAK,\n  MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n}\n\nexport interface IRegExpExec {\n  exec: CustomPatternMatcherFunc;\n}\n\nconst DEFAULT_LEXER_CONFIG: Required<ILexerConfig> = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false,\n  recoveryEnabled: true,\n};\n\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nexport class Lexer {\n  public static SKIPPED =\n    \"This marks a skipped Token pattern, this means each token identified by it will\" +\n    \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n\n  public static NA = /NOT_APPLICABLE/;\n  public lexerDefinitionErrors: ILexerDefinitionError[] = [];\n  public lexerDefinitionWarning: ILexerDefinitionError[] = [];\n\n  protected patternIdxToConfig: Record<string, IPatternConfig[]> = {};\n  protected charCodeToPatternIdxToConfig: {\n    [modeName: string]: { [charCode: number]: IPatternConfig[] };\n  } = {};\n\n  protected modes: string[] = [];\n  protected defaultMode!: string;\n  protected emptyGroups: { [groupName: string]: IToken } = {};\n\n  private config: Required<ILexerConfig>;\n  private trackStartLines: boolean = true;\n  private trackEndLines: boolean = true;\n  private hasCustom: boolean = false;\n  private canModeBeOptimized: Record<string, boolean> = {};\n\n  private traceInitPerf!: boolean | number;\n  private traceInitMaxIdent!: number;\n  private traceInitIndent: number;\n\n  constructor(\n    protected lexerDefinition: TokenType[] | IMultiModeLexerDefinition,\n    config: ILexerConfig = DEFAULT_LEXER_CONFIG,\n  ) {\n    if (typeof config === \"boolean\") {\n      throw Error(\n        \"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n          \"a boolean 2nd argument is no longer supported\",\n      );\n    }\n\n    // todo: defaults func?\n    this.config = assign({}, DEFAULT_LEXER_CONFIG, config) as any;\n\n    const traceInitVal = this.config.traceInitPerf;\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n    this.traceInitIndent = -1;\n\n    this.TRACE_INIT(\"Lexer Constructor\", () => {\n      let actualDefinition!: IMultiModeLexerDefinition;\n      let hasOnlySingleMode = true;\n      this.TRACE_INIT(\"Lexer Config handling\", () => {\n        if (\n          this.config.lineTerminatorsPattern ===\n          DEFAULT_LEXER_CONFIG.lineTerminatorsPattern\n        ) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n        } else {\n          if (\n            this.config.lineTerminatorCharacters ===\n            DEFAULT_LEXER_CONFIG.lineTerminatorCharacters\n          ) {\n            throw Error(\n              \"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\",\n            );\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error(\n            '\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.',\n          );\n        }\n\n        this.trackStartLines = /full|onlyStart/i.test(\n          this.config.positionTracking,\n        );\n        this.trackEndLines = /full/i.test(this.config.positionTracking);\n\n        // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n        if (isArray(lexerDefinition)) {\n          actualDefinition = {\n            modes: { defaultMode: clone(lexerDefinition) },\n            defaultMode: DEFAULT_MODE,\n          };\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = clone(<IMultiModeLexerDefinition>lexerDefinition);\n        }\n      });\n\n      if (this.config.skipValidations === false) {\n        this.TRACE_INIT(\"performRuntimeChecks\", () => {\n          this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n            performRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n\n        this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n          this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(\n            performWarningRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n      }\n\n      // for extra robustness to avoid throwing an none informative error message\n      actualDefinition.modes = actualDefinition.modes\n        ? actualDefinition.modes\n        : {};\n\n      // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n      forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n        actualDefinition.modes[currModeName] = reject<TokenType>(\n          currModeValue,\n          (currTokType) => isUndefined(currTokType),\n        );\n      });\n\n      const allModeNames = keys(actualDefinition.modes);\n\n      forEach(\n        actualDefinition.modes,\n        (currModDef: TokenType[], currModName) => {\n          this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n            this.modes.push(currModName);\n\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(`validatePatterns`, () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n                  validatePatterns(currModDef, allModeNames),\n                );\n              });\n            }\n\n            // If definition errors were encountered, the analysis phase may fail unexpectedly/\n            // Considering a lexer with definition errors may never be used, there is no point\n            // to performing the analysis anyhow...\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef);\n\n              let currAnalyzeResult!: IAnalyzeResult;\n              this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters:\n                    this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT,\n                });\n              });\n\n              this.patternIdxToConfig[currModName] =\n                currAnalyzeResult.patternIdxToConfig;\n\n              this.charCodeToPatternIdxToConfig[currModName] =\n                currAnalyzeResult.charCodeToPatternIdxToConfig;\n\n              this.emptyGroups = assign(\n                {},\n                this.emptyGroups,\n                currAnalyzeResult.emptyGroups,\n              ) as any;\n\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n\n              this.canModeBeOptimized[currModName] =\n                currAnalyzeResult.canBeOptimized;\n            }\n          });\n        },\n      );\n\n      this.defaultMode = actualDefinition.defaultMode;\n\n      if (\n        !isEmpty(this.lexerDefinitionErrors) &&\n        !this.config.deferDefinitionErrorsHandling\n      ) {\n        const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n          return error.message;\n        });\n        const allErrMessagesString = allErrMessages.join(\n          \"-----------------------\\n\",\n        );\n        throw new Error(\n          \"Errors detected in definition of Lexer:\\n\" + allErrMessagesString,\n        );\n      }\n\n      // Only print warning if there are no errors, This will avoid pl\n      forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n        PRINT_WARNING(warningDescriptor.message);\n      });\n\n      this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (SUPPORT_STICKY) {\n          this.chopInput = <any>identity;\n          this.match = this.matchWithTest;\n        } else {\n          this.updateLastIndex = noop;\n          this.match = this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          this.handleModes = noop;\n        }\n\n        if (this.trackStartLines === false) {\n          this.computeNewColumn = identity;\n        }\n\n        if (this.trackEndLines === false) {\n          this.updateTokenEndLineColumnLocation = noop;\n        }\n\n        if (/full/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createFullToken;\n        } else if (/onlyStart/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createOffsetOnlyToken;\n        } else {\n          throw Error(\n            `Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`,\n          );\n        }\n\n        if (this.hasCustom) {\n          this.addToken = this.addTokenUsingPush;\n          this.handlePayload = this.handlePayloadWithCustom;\n        } else {\n          this.addToken = this.addTokenUsingMemberAccess;\n          this.handlePayload = this.handlePayloadNoCustom;\n        }\n      });\n\n      this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n        const unOptimizedModes = reduce(\n          this.canModeBeOptimized,\n          (cannotBeOptimized, canBeOptimized, modeName) => {\n            if (canBeOptimized === false) {\n              cannotBeOptimized.push(modeName);\n            }\n            return cannotBeOptimized;\n          },\n          [] as string[],\n        );\n\n        if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n          throw Error(\n            `Lexer Modes: < ${unOptimizedModes.join(\n              \", \",\n            )} > cannot be optimized.\\n` +\n              '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n              \"\\t Or inspect the console log for details on how to resolve these issues.\",\n          );\n        }\n      });\n\n      this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n        clearRegExpParserCache();\n      });\n\n      this.TRACE_INIT(\"toFastProperties\", () => {\n        toFastProperties(this);\n      });\n    });\n  }\n\n  public tokenize(\n    text: string,\n    initialMode: string = this.defaultMode,\n  ): ILexingResult {\n    if (!isEmpty(this.lexerDefinitionErrors)) {\n      const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n        return error.message;\n      });\n      const allErrMessagesString = allErrMessages.join(\n        \"-----------------------\\n\",\n      );\n      throw new Error(\n        \"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n          allErrMessagesString,\n      );\n    }\n\n    return this.tokenizeInternal(text, initialMode);\n  }\n\n  // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n  // this method also used quite a bit of `!` none null assertions because it is too optimized\n  // for `tsc` to always understand it is \"safe\"\n  private tokenizeInternal(text: string, initialMode: string): ILexingResult {\n    let i,\n      j,\n      k,\n      matchAltImage,\n      longerAlt,\n      matchedImage: string | null,\n      payload,\n      altPayload,\n      imageLength,\n      group,\n      tokType,\n      newToken: IToken,\n      errLength,\n      droppedChar,\n      msg,\n      match;\n    const orgText = text;\n    const orgLength = orgText.length;\n    let offset = 0;\n    let matchedTokensIndex = 0;\n    // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n    const guessedNumberOfTokens = this.hasCustom\n      ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n      : Math.floor(text.length / 10);\n    const matchedTokens = new Array(guessedNumberOfTokens);\n    const errors: ILexingError[] = [];\n    let line = this.trackStartLines ? 1 : undefined;\n    let column = this.trackStartLines ? 1 : undefined;\n    const groups: any = cloneEmptyGroups(this.emptyGroups);\n    const trackLines = this.trackStartLines;\n    const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n\n    let currModePatternsLength = 0;\n    let patternIdxToConfig: IPatternConfig[] = [];\n    let currCharCodeToPatternIdxToConfig: {\n      [charCode: number]: IPatternConfig[];\n    } = [];\n\n    const modeStack: string[] = [];\n\n    const emptyArray: IPatternConfig[] = [];\n    Object.freeze(emptyArray);\n    let getPossiblePatterns!: (charCode: number) => IPatternConfig[];\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode: number): IPatternConfig[] {\n      const optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n      const possiblePatterns =\n        currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    const pop_mode = (popToken: IToken) => {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (\n        modeStack.length === 1 &&\n        // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n        // So no error should occur.\n        popToken.tokenType.PUSH_MODE === undefined\n      ) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        const msg =\n          this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(\n            popToken,\n          );\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine,\n          column: popToken.startColumn,\n          length: popToken.image.length,\n          message: msg,\n        });\n      } else {\n        modeStack.pop();\n        const newMode = last(modeStack)!;\n        patternIdxToConfig = this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig =\n          this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        const modeCanBeOptimized =\n          this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(this: Lexer, newMode: string) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig =\n        this.charCodeToPatternIdxToConfig[newMode];\n\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n\n      currModePatternsLength = patternIdxToConfig.length;\n      const modeCanBeOptimized =\n        this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    }\n\n    // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n    push_mode.call(this, initialMode);\n\n    let currConfig!: IPatternConfig;\n\n    const recoveryEnabled = this.config.recoveryEnabled;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n\n      const nextCharCode = orgText.charCodeAt(offset);\n      const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      const chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        const currPattern = currConfig.pattern;\n        payload = null;\n\n        // manually in-lined because > 600 chars won't be in-lined in V8\n        const singleCharCode = currConfig.short;\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern as string;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = (currPattern as IRegExpExec).exec(\n            orgText,\n            offset,\n            matchedTokens,\n            groups,\n          );\n          if (match !== null) {\n            matchedImage = match[0];\n            if ((match as CustomPatternMatcherReturn).payload !== undefined) {\n              payload = (match as CustomPatternMatcherReturn).payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern as RegExp, offset);\n          matchedImage = this.match(currPattern as RegExp, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAlt = currConfig.longerAlt;\n          if (longerAlt !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            const longerAltLength = longerAlt.length;\n            for (k = 0; k < longerAltLength; k++) {\n              const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n              const longerAltPattern = longerAltConfig.pattern;\n              altPayload = null;\n\n              // single Char can never be a longer alt so no need to test it.\n              // manually in-lined because > 600 chars won't be in-lined in V8\n              if (longerAltConfig.isCustom === true) {\n                match = (longerAltPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                );\n                if (match !== null) {\n                  matchAltImage = match[0];\n                  if (\n                    (match as CustomPatternMatcherReturn).payload !== undefined\n                  ) {\n                    altPayload = (match as CustomPatternMatcherReturn).payload;\n                  }\n                } else {\n                  matchAltImage = null;\n                }\n              } else {\n                this.updateLastIndex(longerAltPattern as RegExp, offset);\n                matchAltImage = this.match(\n                  longerAltPattern as RegExp,\n                  text,\n                  offset,\n                );\n              }\n\n              if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                matchedImage = matchAltImage;\n                payload = altPayload;\n                currConfig = longerAltConfig;\n                // Exit the loop early after matching one of the longer alternatives\n                // The first matched alternative takes precedence\n                break;\n              }\n            }\n          }\n          break;\n        }\n      }\n\n      // successful match\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx;\n          // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n          newToken = this.createTokenInstance(\n            matchedImage,\n            offset,\n            tokType,\n            currConfig.tokenType,\n            line,\n            column,\n            imageLength,\n          );\n\n          this.handlePayload(newToken, payload);\n\n          // TODO: optimize NOOP in case there are no special groups?\n          if (group === false) {\n            matchedTokensIndex = this.addToken(\n              matchedTokens,\n              matchedTokensIndex,\n              newToken,\n            );\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength;\n\n        // TODO: with newlines the column may be assigned twice\n        column = this.computeNewColumn(column!, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          let numOfLTsInMatch = 0;\n          let foundTerminator;\n          let lastLTEndOffset: number;\n          lineTerminatorPattern.lastIndex = 0;\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line! + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset!;\n            this.updateTokenEndLineColumnLocation(\n              newToken!,\n              group!,\n              lastLTEndOffset!,\n              numOfLTsInMatch,\n              line,\n              column,\n              imageLength,\n            );\n          }\n        }\n        // will be NOOP if no modes present\n        this.handleModes(currConfig, pop_mode, push_mode, newToken!);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        const errorStartOffset = offset;\n        const errorLine = line;\n        const errorColumn = column;\n        let foundResyncPoint = recoveryEnabled === false;\n\n        while (foundResyncPoint === false && offset < orgLength) {\n          // Identity Func (when sticky flag is enabled)\n          text = this.chopInput(text, 1);\n          offset++;\n          for (j = 0; j < currModePatternsLength; j++) {\n            const currConfig = patternIdxToConfig[j];\n            const currPattern = currConfig.pattern;\n\n            // manually in-lined because > 600 chars won't be in-lined in V8\n            const singleCharCode = currConfig.short;\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig.isCustom === true) {\n              foundResyncPoint =\n                (currPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                ) !== null;\n            } else {\n              this.updateLastIndex(currPattern as RegExp, offset);\n              foundResyncPoint = (currPattern as RegExp).exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset;\n        column = this.computeNewColumn(column!, errLength);\n        // at this point we either re-synced or reached the end of the input text\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(\n          orgText,\n          errorStartOffset,\n          errLength,\n          errorLine,\n          errorColumn,\n        );\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg,\n        });\n\n        if (recoveryEnabled === false) {\n          break;\n        }\n      }\n    }\n\n    // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors,\n    };\n  }\n\n  private handleModes(\n    config: IPatternConfig,\n    pop_mode: (tok: IToken) => void,\n    push_mode: (this: Lexer, pushMode: string) => void,\n    newToken: IToken,\n  ) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      const pushMode = config.push;\n      pop_mode(newToken);\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  }\n\n  private chopInput(text: string, length: number): string {\n    return text.substring(length);\n  }\n\n  private updateLastIndex(regExp: RegExp, newLastIndex: number): void {\n    regExp.lastIndex = newLastIndex;\n  }\n\n  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n  private updateTokenEndLineColumnLocation(\n    newToken: IToken,\n    group: string | false,\n    lastLTIdx: number,\n    numOfLTsInMatch: number,\n    line: number,\n    column: number,\n    imageLength: number,\n  ): void {\n    let lastCharIsLT, fixForEndingInLT;\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT;\n        // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      }\n      // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n    }\n  }\n\n  private computeNewColumn(oldColumn: number, imageLength: number) {\n    return oldColumn + imageLength;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private createTokenInstance!: (...args: any[]) => IToken;\n\n  private createOffsetOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n  ) {\n    return {\n      image,\n      startOffset,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createStartOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n  ) {\n    return {\n      image,\n      startOffset,\n      startLine,\n      startColumn,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createFullToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n    imageLength: number,\n  ): IToken {\n    return {\n      image,\n      startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine,\n      endLine: startLine,\n      startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private addToken!: (\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ) => number;\n\n  private addTokenUsingPush(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector.push(tokenToAdd);\n    return index;\n  }\n\n  private addTokenUsingMemberAccess(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n  private handlePayload: (token: IToken, payload: any) => void;\n\n  private handlePayloadNoCustom(token: IToken, payload: any): void {}\n\n  private handlePayloadWithCustom(token: IToken, payload: any): void {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  }\n\n  // place holder to be replaced with chosen alternative at runtime\n  private match!: (\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ) => string | null;\n\n  private matchWithTest(\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ): string | null {\n    const found = pattern.test(text);\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n    return null;\n  }\n\n  private matchWithExec(pattern: RegExp, text: string): string | null {\n    const regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : null;\n  }\n\n  // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n  TRACE_INIT = <T>(phaseDesc: string, phaseImpl: () => T): T => {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n}\n","import { has, isString, isUndefined } from \"lodash-es\";\nimport { Lexer } from \"./lexer_public.js\";\nimport { augmentTokenTypes, tokenStructuredMatcher } from \"./tokens.js\";\nimport { IToken, ITokenConfig, TokenType } from \"@chevrotain/types\";\n\nexport function tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\nexport function tokenName(tokType: TokenType): string {\n  return tokType.name;\n}\n\nexport function hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nconst PARENT = \"parent\";\nconst CATEGORIES = \"categories\";\nconst LABEL = \"label\";\nconst GROUP = \"group\";\nconst PUSH_MODE = \"push_mode\";\nconst POP_MODE = \"pop_mode\";\nconst LONGER_ALT = \"longer_alt\";\nconst LINE_BREAKS = \"line_breaks\";\nconst START_CHARS_HINT = \"start_chars_hint\";\n\nexport function createToken(config: ITokenConfig): TokenType {\n  return createTokenInternal(config);\n}\n\nfunction createTokenInternal(config: ITokenConfig): TokenType {\n  const pattern = config.pattern;\n\n  const tokenType: TokenType = <any>{};\n  tokenType.name = config.name;\n\n  if (!isUndefined(pattern)) {\n    tokenType.PATTERN = pattern;\n  }\n\n  if (has(config, PARENT)) {\n    throw (\n      \"The parent property is no longer supported.\\n\" +\n      \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\"\n    );\n  }\n\n  if (has(config, CATEGORIES)) {\n    // casting to ANY as this will be fixed inside `augmentTokenTypes``\n    tokenType.CATEGORIES = <any>config[CATEGORIES];\n  }\n\n  augmentTokenTypes([tokenType]);\n\n  if (has(config, LABEL)) {\n    tokenType.LABEL = config[LABEL];\n  }\n\n  if (has(config, GROUP)) {\n    tokenType.GROUP = config[GROUP];\n  }\n\n  if (has(config, POP_MODE)) {\n    tokenType.POP_MODE = config[POP_MODE];\n  }\n\n  if (has(config, PUSH_MODE)) {\n    tokenType.PUSH_MODE = config[PUSH_MODE];\n  }\n\n  if (has(config, LONGER_ALT)) {\n    tokenType.LONGER_ALT = config[LONGER_ALT];\n  }\n\n  if (has(config, LINE_BREAKS)) {\n    tokenType.LINE_BREAKS = config[LINE_BREAKS];\n  }\n\n  if (has(config, START_CHARS_HINT)) {\n    tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n  }\n\n  return tokenType;\n}\n\nexport const EOF = createToken({ name: \"EOF\", pattern: Lexer.NA });\naugmentTokenTypes([EOF]);\n\nexport function createTokenInstance(\n  tokType: TokenType,\n  image: string,\n  startOffset: number,\n  endOffset: number,\n  startLine: number,\n  endLine: number,\n  startColumn: number,\n  endColumn: number,\n): IToken {\n  return {\n    image,\n    startOffset,\n    endOffset,\n    startLine,\n    endLine,\n    startColumn,\n    endColumn,\n    tokenTypeIdx: (<any>tokType).tokenTypeIdx,\n    tokenType: tokType,\n  };\n}\n\nexport function tokenMatcher(token: IToken, tokType: TokenType): boolean {\n  return tokenStructuredMatcher(token, tokType);\n}\n","import { hasTokenLabel, tokenLabel } from \"../scan/tokens_public.js\";\nimport { first, map, reduce } from \"lodash-es\";\nimport {\n  Alternation,\n  getProductionDslName,\n  NonTerminal,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IParserErrorMessageProvider,\n  IProductionWithOccurrence,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n} from \"./grammar/types.js\";\n\nexport const defaultParserErrorProvider: IParserErrorMessageProvider = {\n  buildMismatchTokenMessage({ expected, actual, previous, ruleName }): string {\n    const hasLabel = hasTokenLabel(expected);\n    const expectedMsg = hasLabel\n      ? `--> ${tokenLabel(expected)} <--`\n      : `token of type --> ${expected.name} <--`;\n\n    const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n\n    return msg;\n  },\n\n  buildNotAllInputParsedMessage({ firstRedundant, ruleName }): string {\n    return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n  },\n\n  buildNoViableAltMessage({\n    expectedPathsPerAlt,\n    actual,\n    previous,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const allLookAheadPaths = reduce(\n        expectedPathsPerAlt,\n        (result, currAltPaths) => result.concat(currAltPaths),\n        [] as TokenType[][],\n      );\n      const nextValidTokenSequences = map(\n        allLookAheadPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \", \",\n          )}]`,\n      );\n      const nextValidSequenceItems = map(\n        nextValidTokenSequences,\n        (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`,\n      );\n      const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\n        \"\\n\",\n      )}`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n\n  buildEarlyExitMessage({\n    expectedIterationPaths,\n    actual,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const nextValidTokenSequences = map(\n        expectedIterationPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \",\",\n          )}]`,\n      );\n      const calculatedDescription =\n        `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n        `<${nextValidTokenSequences.join(\" ,\")}>`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n};\n\nObject.freeze(defaultParserErrorProvider);\n\nexport const defaultGrammarResolverErrorProvider: IGrammarResolverErrorMessageProvider =\n  {\n    buildRuleNotFoundError(\n      topLevelRule: Rule,\n      undefinedRule: NonTerminal,\n    ): string {\n      const msg =\n        \"Invalid grammar, reference to a rule which is not defined: ->\" +\n        undefinedRule.nonTerminalName +\n        \"<-\\n\" +\n        \"inside top level rule: ->\" +\n        topLevelRule.name +\n        \"<-\";\n      return msg;\n    },\n  };\n\nexport const defaultGrammarValidatorErrorProvider: IGrammarValidatorErrorMessageProvider =\n  {\n    buildDuplicateFoundError(\n      topLevelRule: Rule,\n      duplicateProds: IProductionWithOccurrence[],\n    ): string {\n      function getExtraProductionArgument(\n        prod: IProductionWithOccurrence,\n      ): string {\n        if (prod instanceof Terminal) {\n          return prod.terminalType.name;\n        } else if (prod instanceof NonTerminal) {\n          return prod.nonTerminalName;\n        } else {\n          return \"\";\n        }\n      }\n\n      const topLevelName = topLevelRule.name;\n      const duplicateProd = first(duplicateProds)!;\n      const index = duplicateProd.idx;\n      const dslName = getProductionDslName(duplicateProd);\n      const extraArgument = getExtraProductionArgument(duplicateProd);\n\n      const hasExplicitIndex = index > 0;\n      let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${\n        extraArgument ? `with argument: ->${extraArgument}<-` : \"\"\n      }\n                  appears more than once (${\n                    duplicateProds.length\n                  } times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n\n      // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n      msg = msg.replace(/[ \\t]+/g, \" \");\n      msg = msg.replace(/\\s\\s+/g, \"\\n\");\n\n      return msg;\n    },\n\n    buildNamespaceConflictError(rule: Rule): string {\n      const errMsg =\n        `Namespace conflict found in grammar.\\n` +\n        `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n        `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n        `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n        `and Non-Terminal names start with a lower case letter.`;\n\n      return errMsg;\n    },\n\n    buildAlternationPrefixAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currTok) =>\n        tokenLabel(currTok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      const errMsg =\n        `Ambiguous alternatives: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> due to common lookahead prefix\\n` +\n        `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n        `For Further details.`;\n\n      return errMsg;\n    },\n\n    buildAlternationAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currtok) =>\n        tokenLabel(currtok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      let currMessage =\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> in <OR${occurrence}>` +\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n\n      currMessage =\n        currMessage +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n        `For Further details.`;\n      return currMessage;\n    },\n\n    buildEmptyRepetitionError(options: {\n      topLevelRule: Rule;\n      repetition: IProductionWithOccurrence;\n    }): string {\n      let dslName = getProductionDslName(options.repetition);\n      if (options.repetition.idx !== 0) {\n        dslName += options.repetition.idx;\n      }\n\n      const errMsg =\n        `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n        `This could lead to an infinite loop.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options: {\n      tokenType: TokenType;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildEmptyAlternationError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n      emptyChoiceIdx: number;\n    }): string {\n      const errMsg =\n        `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n        ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n        `Only the last alternative may be an empty alternative.`;\n\n      return errMsg;\n    },\n\n    buildTooManyAlternativesError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n    }): string {\n      const errMsg =\n        `An Alternation cannot have more than 256 alternatives:\\n` +\n        `<OR${options.alternation.idx}> inside <${\n          options.topLevelRule.name\n        }> Rule.\\n has ${\n          options.alternation.definition.length + 1\n        } alternatives.`;\n\n      return errMsg;\n    },\n\n    buildLeftRecursionError(options: {\n      topLevelRule: Rule;\n      leftRecursionPath: Rule[];\n    }): string {\n      const ruleName = options.topLevelRule.name;\n      const pathNames = map(\n        options.leftRecursionPath,\n        (currRule) => currRule.name,\n      );\n      const leftRecursivePath = `${ruleName} --> ${pathNames\n        .concat([ruleName])\n        .join(\" --> \")}`;\n      const errMsg =\n        `Left Recursion found in grammar.\\n` +\n        `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n        `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n        ` To fix this refactor your grammar to remove the left recursion.\\n` +\n        `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options: {\n      topLevelRule: Rule;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildDuplicateRuleNameError(options: {\n      topLevelRule: Rule | string;\n      grammarName: string;\n    }): string {\n      let ruleName;\n      if (options.topLevelRule instanceof Rule) {\n        ruleName = options.topLevelRule.name;\n      } else {\n        ruleName = options.topLevelRule;\n      }\n\n      const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n\n      return errMsg;\n    },\n  };\n","import {\n  IParserUnresolvedRefDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport { forEach, values } from \"lodash-es\";\nimport { GAstVisitor, NonTerminal, Rule } from \"@chevrotain/gast\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\n\nexport function resolveGrammar(\n  topLevels: Record<string, Rule>,\n  errMsgProvider: IGrammarResolverErrorMessageProvider,\n): IParserDefinitionError[] {\n  const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n  refResolver.resolveRefs();\n  return refResolver.errors;\n}\n\nexport class GastRefResolverVisitor extends GAstVisitor {\n  public errors: IParserUnresolvedRefDefinitionError[] = [];\n  private currTopLevel: Rule;\n\n  constructor(\n    private nameToTopRule: Record<string, Rule>,\n    private errMsgProvider: IGrammarResolverErrorMessageProvider,\n  ) {\n    super();\n  }\n\n  public resolveRefs(): void {\n    forEach(values(this.nameToTopRule), (prod) => {\n      this.currTopLevel = prod;\n      prod.accept(this);\n    });\n  }\n\n  public visitNonTerminal(node: NonTerminal): void {\n    const ref = this.nameToTopRule[node.nonTerminalName];\n\n    if (!ref) {\n      const msg = this.errMsgProvider.buildRuleNotFoundError(\n        this.currTopLevel,\n        node,\n      );\n      this.errors.push({\n        message: msg,\n        type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n        ruleName: this.currTopLevel.name,\n        unresolvedRefName: node.nonTerminalName,\n      });\n    } else {\n      node.referencedRule = ref;\n    }\n  }\n}\n","import baseFlatten from './_baseFlatten.js';\nimport map from './map.js';\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nexport default flatMap;\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n","import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n","import arrayAggregator from './_arrayAggregator.js';\nimport baseAggregator from './_baseAggregator.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nexport default createAggregator;\n","import baseAssignValue from './_baseAssignValue.js';\nimport createAggregator from './_createAggregator.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nexport default groupBy;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.dropRight([1, 2, 3]);\n * // => [1, 2]\n *\n * _.dropRight([1, 2, 3], 2);\n * // => [1]\n *\n * _.dropRight([1, 2, 3], 5);\n * // => []\n *\n * _.dropRight([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction dropRight(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  n = length - n;\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nexport default dropRight;\n","import {\n  clone,\n  drop,\n  dropRight,\n  first as _first,\n  forEach,\n  isEmpty,\n  last,\n} from \"lodash-es\";\nimport { first } from \"./first.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { TokenMatcher } from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IGrammarPath,\n  IProduction,\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport abstract class AbstractNextPossibleTokensWalker extends RestWalker {\n  protected possibleTokTypes: TokenType[] = [];\n  protected ruleStack: string[];\n  protected occurrenceStack: number[];\n\n  protected nextProductionName = \"\";\n  protected nextProductionOccurrence = 0;\n  protected found = false;\n  protected isAtEndOfPath = false;\n\n  constructor(\n    protected topProd: Rule,\n    protected path: IGrammarPath,\n  ) {\n    super();\n  }\n\n  startWalking(): TokenType[] {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    }\n\n    // immutable for the win\n    this.ruleStack = clone(this.path.ruleStack).reverse(); // intelij bug requires assertion\n    this.occurrenceStack = clone(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n\n    // already verified that the first production is valid, we now seek the 2nd production\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n\n    return this.possibleTokTypes;\n  }\n\n  walk(\n    prod: { definition: IProduction[] },\n    prevRest: IProduction[] = [],\n  ): void {\n    // stop scanning once we found the path\n    if (!this.found) {\n      super.walk(prod, prevRest);\n    }\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // found the next production, need to keep walking in it\n    if (\n      refProd.referencedRule.name === this.nextProductionName &&\n      refProd.idx === this.nextProductionOccurrence\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, <any>fullRest);\n    }\n  }\n\n  updateExpectedNext(): void {\n    // need to consume the Terminal\n    if (isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop()!;\n      this.nextProductionOccurrence = this.occurrenceStack.pop()!;\n    }\n  }\n}\n\nexport class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n  private nextTerminalName = \"\";\n  private nextTerminalOccurrence = 0;\n\n  constructor(\n    topProd: Rule,\n    protected path: ITokenGrammarPath,\n  ) {\n    super(topProd, path);\n    this.nextTerminalName = this.path.lastTok.name;\n    this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      this.isAtEndOfPath &&\n      terminal.terminalType.name === this.nextTerminalName &&\n      terminal.idx === this.nextTerminalOccurrence &&\n      !this.found\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      const restProd = new Alternative({ definition: fullRest });\n      this.possibleTokTypes = first(restProd);\n      this.found = true;\n    }\n  }\n}\n\nexport type AlternativesFirstTokens = TokenType[][];\n\nexport interface IFirstAfterRepetition {\n  token: TokenType | undefined;\n  occurrence: number | undefined;\n  isEndOfRule: boolean | undefined;\n}\n\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nexport class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n  protected result: IFirstAfterRepetition = {\n    token: undefined,\n    occurrence: undefined,\n    isEndOfRule: undefined,\n  };\n\n  constructor(\n    protected topRule: Rule,\n    protected occurrence: number,\n  ) {\n    super();\n  }\n\n  startWalking(): IFirstAfterRepetition {\n    this.walk(this.topRule);\n    return this.result;\n  }\n}\n\nexport class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manyProd.idx === this.occurrence) {\n      const firstAfterMany = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n      if (firstAfterMany instanceof Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      super.walkMany(manyProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manySepProd.idx === this.occurrence) {\n      const firstAfterManySep = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n      if (firstAfterManySep instanceof Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      super.walkManySep(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atLeastOneProd.idx === this.occurrence) {\n      const firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n      if (firstAfterAtLeastOne instanceof Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n    }\n  }\n}\n\n// TODO: reduce code duplication in the AfterWalkers\nexport class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOneSep(\n    atleastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      const firstAfterfirstAfterAtLeastOneSep = _first(\n        currRest.concat(prevRest),\n      );\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n      if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport interface PartialPathAndSuffixes {\n  partialPath: TokenType[];\n  suffixDef: IProduction[];\n}\n\nexport function possiblePathsFrom(\n  targetDef: IProduction[],\n  maxLength: number,\n  currPath: TokenType[] = [],\n): PartialPathAndSuffixes[] {\n  // avoid side effects\n  currPath = clone(currPath);\n  let result: PartialPathAndSuffixes[] = [];\n  let i = 0;\n\n  // TODO: avoid inner funcs\n  function remainingPathWith(nextDef: IProduction[]) {\n    return nextDef.concat(drop(targetDef, i + 1));\n  }\n\n  // TODO: avoid inner funcs\n  function getAlternativesForProd(definition: IProduction[]) {\n    const alternatives = possiblePathsFrom(\n      remainingPathWith(definition),\n      maxLength,\n      currPath,\n    );\n    return result.concat(alternatives);\n  }\n\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n  while (currPath.length < maxLength && i < targetDef.length) {\n    const prod = targetDef[i];\n\n    /* istanbul ignore else */\n    if (prod instanceof Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof RepetitionMandatory) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      const newDef = [\n        new Alternative({ definition: prod.definition }),\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Repetition) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Alternation) {\n      forEach(prod.definition, (currAlt) => {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n  result.push({\n    partialPath: currPath,\n    suffixDef: drop(targetDef, i),\n  });\n\n  return result;\n}\n\ninterface IPathToExamine {\n  idx: number;\n  def: IProduction[];\n  ruleStack: string[];\n  occurrenceStack: number[];\n}\n\nexport function nextPossibleTokensAfter(\n  initialDef: IProduction[],\n  tokenVector: IToken[],\n  tokMatcher: TokenMatcher,\n  maxLookAhead: number,\n): ISyntacticContentAssistPath[] {\n  const EXIT_NON_TERMINAL: any = \"EXIT_NONE_TERMINAL\";\n  // to avoid creating a new Array each time.\n  const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  const EXIT_ALTERNATIVE: any = \"EXIT_ALTERNATIVE\";\n  let foundCompletePath = false;\n\n  const tokenVectorLength = tokenVector.length;\n  const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n\n  const result: ISyntacticContentAssistPath[] = [];\n\n  const possiblePaths: IPathToExamine[] = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: [],\n  });\n\n  while (!isEmpty(possiblePaths)) {\n    const currPath = possiblePaths.pop()!;\n\n    // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (\n        foundCompletePath &&\n        last(possiblePaths)!.idx <= minimalAlternativesIndex\n      ) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n      continue;\n    }\n\n    const currDef = currPath.def;\n    const currIdx = currPath.idx;\n    const currRuleStack = currPath.ruleStack;\n    const currOccurrenceStack = currPath.occurrenceStack;\n\n    // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n    if (isEmpty(currDef)) {\n      continue;\n    }\n\n    const prod = currDef[0];\n    /* istanbul ignore else */\n    if (prod === EXIT_NON_TERMINAL) {\n      const nextPath = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: dropRight(currRuleStack),\n        occurrenceStack: dropRight(currOccurrenceStack),\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        const nextIdx = currIdx + 1;\n        const actualToken = tokenVector[nextIdx];\n        if (tokMatcher!(actualToken, prod.terminalType)) {\n          const nextPath = {\n            idx: nextIdx,\n            def: drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack,\n          };\n          possiblePaths.push(nextPath);\n        }\n        // end of the line\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof NonTerminal) {\n      const newRuleStack = clone(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n\n      const newOccurrenceStack = clone(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n\n      const nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const secondIteration = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const secondIteration = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const nthRepetition = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n      const nthRepetition = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (let i = prod.definition.length - 1; i >= 0; i--) {\n        const currAlt: any = prod.definition[i];\n        const currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      });\n    } else if (prod instanceof Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(\n        expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack),\n      );\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  return result;\n}\n\nfunction expandTopLevelRule(\n  topRule: Rule,\n  currIdx: number,\n  currRuleStack: string[],\n  currOccurrenceStack: number[],\n): IPathToExamine {\n  const newRuleStack = clone(currRuleStack);\n  newRuleStack.push(topRule.name);\n\n  const newCurrOccurrenceStack = clone(currOccurrenceStack);\n  // top rule is always assumed to have been called with occurrence index 1\n  newCurrOccurrenceStack.push(1);\n\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack,\n  };\n}\n","import { every, flatten, forEach, has, isEmpty, map, reduce } from \"lodash-es\";\nimport { possiblePathsFrom } from \"./interpreter.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { Predicate, TokenMatcher } from \"../parser/parser.js\";\nimport {\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../scan/tokens.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n} from \"@chevrotain/gast\";\nimport {\n  BaseParser,\n  IOrAlt,\n  IProduction,\n  IProductionWithOccurrence,\n  LookaheadProductionType,\n  LookaheadSequence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport enum PROD_TYPE {\n  OPTION,\n  REPETITION,\n  REPETITION_MANDATORY,\n  REPETITION_MANDATORY_WITH_SEPARATOR,\n  REPETITION_WITH_SEPARATOR,\n  ALTERNATION,\n}\n\nexport function getProdType(\n  prod: IProduction | LookaheadProductionType,\n): PROD_TYPE {\n  /* istanbul ignore else */\n  if (prod instanceof Option || prod === \"Option\") {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof Repetition || prod === \"Repetition\") {\n    return PROD_TYPE.REPETITION;\n  } else if (\n    prod instanceof RepetitionMandatory ||\n    prod === \"RepetitionMandatory\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod === \"RepetitionMandatoryWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (\n    prod instanceof RepetitionWithSeparator ||\n    prod === \"RepetitionWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof Alternation || prod === \"Alternation\") {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function getLookaheadPaths(options: {\n  occurrence: number;\n  rule: Rule;\n  prodType: LookaheadProductionType;\n  maxLookahead: number;\n}): LookaheadSequence[] {\n  const { occurrence, rule, prodType, maxLookahead } = options;\n  const type = getProdType(prodType);\n  if (type === PROD_TYPE.ALTERNATION) {\n    return getLookaheadPathsForOr(occurrence, rule, maxLookahead);\n  } else {\n    return getLookaheadPathsForOptionalProd(\n      occurrence,\n      rule,\n      type,\n      maxLookahead,\n    );\n  }\n}\n\nexport function buildLookaheadFuncForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  maxLookahead: number,\n  hasPredicates: boolean,\n  dynamicTokensEnabled: boolean,\n  laFuncBuilder: Function,\n): (orAlts?: IOrAlt<any>[]) => number | undefined {\n  const lookAheadPaths = getLookaheadPathsForOr(\n    occurrence,\n    ruleGrammar,\n    maxLookahead,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return laFuncBuilder(\n    lookAheadPaths,\n    hasPredicates,\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nexport function buildLookaheadFuncForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  dynamicTokensEnabled: boolean,\n  prodType: PROD_TYPE,\n  lookaheadBuilder: (\n    lookAheadSequence: LookaheadSequence,\n    tokenMatcher: TokenMatcher,\n    dynamicTokensEnabled: boolean,\n  ) => () => boolean,\n): () => boolean {\n  const lookAheadPaths = getLookaheadPathsForOptionalProd(\n    occurrence,\n    ruleGrammar,\n    prodType,\n    k,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return lookaheadBuilder(\n    lookAheadPaths[0],\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\nexport type Alternative = TokenType[][];\n\nexport function buildAlternativesLookAheadFunc(\n  alts: LookaheadSequence[],\n  hasPredicates: boolean,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): (orAlts: IOrAlt<any>[]) => number | undefined {\n  const numOfAlts = alts.length;\n  const areAllOneTokenLookahead = every(alts, (currAlt) => {\n    return every(currAlt, (currPath) => {\n      return currPath.length === 1;\n    });\n  });\n\n  // This version takes into account the predicates as well.\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (\n      this: BaseParser,\n      orAlts: IOrAlt<any>[],\n    ): number | undefined {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      const predicates: (Predicate | undefined)[] = map(\n        orAlts,\n        (currAlt) => currAlt.GATE,\n      );\n\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n\n        const currPredicate = predicates[t];\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    const singleTokenAlts = map(alts, (currAlt) => {\n      return flatten(currAlt);\n    });\n\n    const choiceToAlt = reduce(\n      singleTokenAlts,\n      (result, currAlt, idx) => {\n        forEach(currAlt, (currTokType) => {\n          if (!has(result, currTokType.tokenTypeIdx!)) {\n            result[currTokType.tokenTypeIdx!] = idx;\n          }\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            if (!has(result, currExtendingType)) {\n              result[currExtendingType] = idx;\n            }\n          });\n        });\n        return result;\n      },\n      {} as Record<number, number>,\n    );\n\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number {\n      const nextToken = this.LA(1);\n      return choiceToAlt[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number | undefined {\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  }\n}\n\nexport function buildSingleAlternativeLookaheadFunction(\n  alt: LookaheadSequence,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): () => boolean {\n  const areAllOneTokenLookahead = every(alt, (currPath) => {\n    return currPath.length === 1;\n  });\n\n  const numOfPaths = alt.length;\n\n  // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    const singleTokensTypes = flatten(alt);\n\n    if (\n      singleTokensTypes.length === 1 &&\n      isEmpty((<any>singleTokensTypes[0]).categoryMatches)\n    ) {\n      const expectedTokenType = singleTokensTypes[0];\n      const expectedTokenUniqueKey = (<any>expectedTokenType).tokenTypeIdx;\n\n      return function (this: BaseParser): boolean {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n      };\n    } else {\n      const choiceToAlt = reduce(\n        singleTokensTypes,\n        (result, currTokType, idx) => {\n          result[currTokType.tokenTypeIdx!] = true;\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            result[currExtendingType] = true;\n          });\n          return result;\n        },\n        [] as boolean[],\n      );\n\n      return function (this: BaseParser): boolean {\n        const nextToken = this.LA(1);\n        return choiceToAlt[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function (this: BaseParser): boolean {\n      nextPath: for (let j = 0; j < numOfPaths; j++) {\n        const currPath = alt[j];\n        const currPathLength = currPath.length;\n        for (let i = 0; i < currPathLength; i++) {\n          const nextToken = this.LA(i + 1);\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        }\n        // found a full path that matches.\n        return true;\n      }\n\n      // none of the paths matched\n      return false;\n    };\n  }\n}\n\nclass RestDefinitionFinderWalker extends RestWalker {\n  private restDef: IProduction[];\n\n  constructor(\n    private topProd: Rule,\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n  ) {\n    super();\n  }\n\n  startWalking(): IProduction[] {\n    this.walk(this.topProd);\n    return this.restDef;\n  }\n\n  private checkIsTarget(\n    node: IProductionWithOccurrence,\n    expectedProdType: PROD_TYPE,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): boolean {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdType\n    ) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    }\n    // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n    return false;\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      super.walkOption(optionProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneProd,\n        PROD_TYPE.REPETITION_MANDATORY,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneSepProd,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneSepProd, currRest, prevRest);\n    }\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)\n    ) {\n      super.walkOption(manyProd, currRest, prevRest);\n    }\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        manySepProd,\n        PROD_TYPE.REPETITION_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends GAstVisitor {\n  public result: IProduction[] = [];\n\n  constructor(\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n    private targetRef?: any,\n  ) {\n    super();\n  }\n\n  private checkIsTarget(\n    node: { definition: IProduction[] } & IProductionWithOccurrence,\n    expectedProdName: PROD_TYPE,\n  ): void {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdName &&\n      (this.targetRef === undefined || node === this.targetRef)\n    ) {\n      this.result = node.definition;\n    }\n  }\n\n  public visitOption(node: Option): void {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  }\n\n  public visitRepetition(node: Repetition): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  }\n\n  public visitRepetitionMandatory(node: RepetitionMandatory): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  }\n\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  }\n\n  public visitAlternation(node: Alternation): void {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  }\n}\n\nfunction initializeArrayOfArrays(size: number): any[][] {\n  const result = new Array(size);\n  for (let i = 0; i < size; i++) {\n    result[i] = [];\n  }\n  return result;\n}\n\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path: TokenType[]): string[] {\n  let keys = [\"\"];\n  for (let i = 0; i < path.length; i++) {\n    const tokType = path[i];\n    const longerKeys = [];\n    for (let j = 0; j < keys.length; j++) {\n      const currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n      for (let t = 0; t < tokType.categoryMatches!.length; t++) {\n        const categoriesKeySuffix = \"_\" + tokType.categoryMatches![t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n    keys = longerKeys;\n  }\n  return keys;\n}\n\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(\n  altKnownPathsKeys: Record<string, boolean>[],\n  searchPathKeys: string[],\n  idx: number,\n): boolean {\n  for (\n    let currAltIdx = 0;\n    currAltIdx < altKnownPathsKeys.length;\n    currAltIdx++\n  ) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n    const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n    for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      const searchKey = searchPathKeys[searchIdx];\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  }\n  // None of the SearchPathKeys were found in any of the other alternatives\n  return true;\n}\n\nexport function lookAheadSequenceFromAlternatives(\n  altsDefs: IProduction[],\n  k: number,\n): LookaheadSequence[] {\n  const partialAlts = map(altsDefs, (currAlt) =>\n    possiblePathsFrom([currAlt], 1),\n  );\n  const finalResult = initializeArrayOfArrays(partialAlts.length);\n  const altsHashes = map(partialAlts, (currAltPaths) => {\n    const dict: { [key: string]: boolean } = {};\n    forEach(currAltPaths, (item) => {\n      const keys = pathToHashKeys(item.partialPath);\n      forEach(keys, (currKey) => {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  let newData = partialAlts;\n\n  // maxLookahead loop\n  for (let pathLength = 1; pathLength <= k; pathLength++) {\n    const currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length);\n\n    // alternatives loop\n    for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      const currAltPathsAndSuffixes = currDataset[altIdx];\n      // paths in current alternative loop\n      for (\n        let currPathIdx = 0;\n        currPathIdx < currAltPathsAndSuffixes.length;\n        currPathIdx++\n      ) {\n        const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        const prefixKeys = pathToHashKeys(currPathPrefix);\n        const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n        // End of the line for this path.\n        if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n          const currAltResult = finalResult[altIdx];\n          // TODO: Can we implement a containsPath using Maps/Dictionaries?\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix);\n            // Update all new  keys for the current path.\n            for (let j = 0; j < prefixKeys.length; j++) {\n              const currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        }\n        // Expand longer paths\n        else {\n          const newPartialPathsAndSuffixes = possiblePathsFrom(\n            suffixDef,\n            pathLength + 1,\n            currPathPrefix,\n          );\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n\n          // Update keys for new known paths\n          forEach(newPartialPathsAndSuffixes, (item) => {\n            const prefixKeys = pathToHashKeys(item.partialPath);\n            forEach(prefixKeys, (key) => {\n              altsHashes[altIdx][key] = true;\n            });\n          });\n        }\n      }\n    }\n  }\n\n  return finalResult;\n}\n\nexport function getLookaheadPathsForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  orProd?: Alternation,\n): LookaheadSequence[] {\n  const visitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    PROD_TYPE.ALTERNATION,\n    orProd,\n  );\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\n\nexport function getLookaheadPathsForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  prodType: PROD_TYPE,\n  k: number,\n): LookaheadSequence[] {\n  const insideDefVisitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    prodType,\n  );\n  ruleGrammar.accept(insideDefVisitor);\n  const insideDef = insideDefVisitor.result;\n\n  const afterDefWalker = new RestDefinitionFinderWalker(\n    ruleGrammar,\n    occurrence,\n    prodType,\n  );\n  const afterDef = afterDefWalker.startWalking();\n\n  const insideFlat = new AlternativeGAST({ definition: insideDef });\n  const afterFlat = new AlternativeGAST({ definition: afterDef });\n\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\n\nexport function containsPath(\n  alternative: Alternative,\n  searchPath: TokenType[],\n): boolean {\n  compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n    const otherPath = alternative[i];\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n    for (let j = 0; j < otherPath.length; j++) {\n      const searchTok = searchPath[j];\n      const otherTok = otherPath[j];\n\n      const matchingTokens =\n        searchTok === otherTok ||\n        otherTok.categoryMatchesMap![searchTok.tokenTypeIdx!] !== undefined;\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nexport function isStrictPrefixOfPath(\n  prefix: TokenType[],\n  other: TokenType[],\n): boolean {\n  return (\n    prefix.length < other.length &&\n    every(prefix, (tokType, idx) => {\n      const otherTokType = other[idx];\n      return (\n        tokType === otherTokType ||\n        otherTokType.categoryMatchesMap![tokType.tokenTypeIdx!]\n      );\n    })\n  );\n}\n\nexport function areTokenCategoriesNotUsed(\n  lookAheadPaths: LookaheadSequence[],\n): boolean {\n  return every(lookAheadPaths, (singleAltPaths) =>\n    every(singleAltPaths, (singlePath) =>\n      every(singlePath, (token) => isEmpty(token.categoryMatches!)),\n    ),\n  );\n}\n","import {\n  clone,\n  compact,\n  difference,\n  drop,\n  dropRight,\n  filter,\n  first,\n  flatMap,\n  flatten,\n  forEach,\n  groupBy,\n  includes,\n  isEmpty,\n  map,\n  pickBy,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport {\n  IParserAmbiguousAlternativesDefinitionError,\n  IParserDuplicatesDefinitionError,\n  IParserEmptyAlternativeDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  getProductionDslName,\n  isOptionalProd,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  Alternative,\n  containsPath,\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  getProdType,\n  isStrictPrefixOfPath,\n} from \"./lookahead.js\";\nimport { nextPossibleTokensAfter } from \"./interpreter.js\";\nimport {\n  ILookaheadStrategy,\n  IProduction,\n  IProductionWithOccurrence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\nimport { tokenStructuredMatcher } from \"../../scan/tokens.js\";\n\nexport function validateLookahead(options: {\n  lookaheadStrategy: ILookaheadStrategy;\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n}): IParserDefinitionError[] {\n  const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n    rules: options.rules,\n    tokenTypes: options.tokenTypes,\n    grammarName: options.grammarName,\n  });\n  return map(lookaheadValidationErrorMessages, (errorMessage) => ({\n    type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION,\n    ...errorMessage,\n  }));\n}\n\nexport function validateGrammar(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  grammarName: string,\n): IParserDefinitionError[] {\n  const duplicateErrors: IParserDefinitionError[] = flatMap(\n    topLevels,\n    (currTopLevel) =>\n      validateDuplicateProductions(currTopLevel, errMsgProvider),\n  );\n\n  const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(\n    topLevels,\n    tokenTypes,\n    errMsgProvider,\n  );\n\n  const tooManyAltsErrors = flatMap(topLevels, (curRule) =>\n    validateTooManyAlts(curRule, errMsgProvider),\n  );\n\n  const duplicateRulesError = flatMap(topLevels, (curRule) =>\n    validateRuleDoesNotAlreadyExist(\n      curRule,\n      topLevels,\n      grammarName,\n      errMsgProvider,\n    ),\n  );\n\n  return duplicateErrors.concat(\n    termsNamespaceConflictErrors,\n    tooManyAltsErrors,\n    duplicateRulesError,\n  );\n}\n\nfunction validateDuplicateProductions(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDuplicatesDefinitionError[] {\n  const collectorVisitor = new OccurrenceValidationCollector();\n  topLevelRule.accept(collectorVisitor);\n  const allRuleProductions = collectorVisitor.allProductions;\n\n  const productionGroups = groupBy(\n    allRuleProductions,\n    identifyProductionForDuplicates,\n  );\n\n  const duplicates: any = pickBy(productionGroups, (currGroup) => {\n    return currGroup.length > 1;\n  });\n\n  const errors = map(values(duplicates), (currDuplicates: any) => {\n    const firstProd: any = first(currDuplicates);\n    const msg = errMsgProvider.buildDuplicateFoundError(\n      topLevelRule,\n      currDuplicates,\n    );\n    const dslName = getProductionDslName(firstProd);\n    const defError: IParserDuplicatesDefinitionError = {\n      message: msg,\n      type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n      ruleName: topLevelRule.name,\n      dslName: dslName,\n      occurrence: firstProd.idx,\n    };\n\n    const param = getExtraProductionArgument(firstProd);\n    if (param) {\n      defError.parameter = param;\n    }\n\n    return defError;\n  });\n  return errors;\n}\n\nexport function identifyProductionForDuplicates(\n  prod: IProductionWithOccurrence,\n): string {\n  return `${getProductionDslName(prod)}_#_${\n    prod.idx\n  }_#_${getExtraProductionArgument(prod)}`;\n}\n\nfunction getExtraProductionArgument(prod: IProductionWithOccurrence): string {\n  if (prod instanceof Terminal) {\n    return prod.terminalType.name;\n  } else if (prod instanceof NonTerminal) {\n    return prod.nonTerminalName;\n  } else {\n    return \"\";\n  }\n}\n\nexport class OccurrenceValidationCollector extends GAstVisitor {\n  public allProductions: IProductionWithOccurrence[] = [];\n\n  public visitNonTerminal(subrule: NonTerminal): void {\n    this.allProductions.push(subrule);\n  }\n\n  public visitOption(option: Option): void {\n    this.allProductions.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.allProductions.push(or);\n  }\n\n  public visitTerminal(terminal: Terminal): void {\n    this.allProductions.push(terminal);\n  }\n}\n\nexport function validateRuleDoesNotAlreadyExist(\n  rule: Rule,\n  allRules: Rule[],\n  className: string,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors = [];\n  const occurrences = reduce(\n    allRules,\n    (result, curRule) => {\n      if (curRule.name === rule.name) {\n        return result + 1;\n      }\n      return result;\n    },\n    0,\n  );\n  if (occurrences > 1) {\n    const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n      topLevelRule: rule,\n      grammarName: className,\n    });\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n      ruleName: rule.name,\n    });\n  }\n\n  return errors;\n}\n\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nexport function validateRuleIsOverridden(\n  ruleName: string,\n  definedRulesNames: string[],\n  className: string,\n): IParserDefinitionError[] {\n  const errors = [];\n  let errMsg;\n\n  if (!includes(definedRulesNames, ruleName)) {\n    errMsg =\n      `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n      `as it is not defined in any of the super grammars `;\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n      ruleName: ruleName,\n    });\n  }\n\n  return errors;\n}\n\nexport function validateNoLeftRecursion(\n  topRule: Rule,\n  currRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  path: Rule[] = [],\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n  if (isEmpty(nextNonTerminals)) {\n    return [];\n  } else {\n    const ruleName = topRule.name;\n    const foundLeftRecursion = includes(nextNonTerminals, topRule);\n    if (foundLeftRecursion) {\n      errors.push({\n        message: errMsgProvider.buildLeftRecursionError({\n          topLevelRule: topRule,\n          leftRecursionPath: path,\n        }),\n        type: ParserDefinitionErrorType.LEFT_RECURSION,\n        ruleName: ruleName,\n      });\n    }\n\n    // we are only looking for cyclic paths leading back to the specific topRule\n    // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n    const validNextSteps = difference(nextNonTerminals, path.concat([topRule]));\n    const errorsFromNextSteps = flatMap(validNextSteps, (currRefRule) => {\n      const newPath = clone(path);\n      newPath.push(currRefRule);\n      return validateNoLeftRecursion(\n        topRule,\n        currRefRule,\n        errMsgProvider,\n        newPath,\n      );\n    });\n\n    return errors.concat(errorsFromNextSteps);\n  }\n}\n\nexport function getFirstNoneTerminal(definition: IProduction[]): Rule[] {\n  let result: Rule[] = [];\n  if (isEmpty(definition)) {\n    return result;\n  }\n  const firstProd = first(definition);\n\n  /* istanbul ignore else */\n  if (firstProd instanceof NonTerminal) {\n    result.push(firstProd.referencedRule);\n  } else if (\n    firstProd instanceof AlternativeGAST ||\n    firstProd instanceof Option ||\n    firstProd instanceof RepetitionMandatory ||\n    firstProd instanceof RepetitionMandatoryWithSeparator ||\n    firstProd instanceof RepetitionWithSeparator ||\n    firstProd instanceof Repetition\n  ) {\n    result = result.concat(\n      getFirstNoneTerminal(<IProduction[]>firstProd.definition),\n    );\n  } else if (firstProd instanceof Alternation) {\n    // each sub definition in alternation is a FLAT\n    result = flatten(\n      map(firstProd.definition, (currSubDef) =>\n        getFirstNoneTerminal((<AlternativeGAST>currSubDef).definition),\n      ),\n    );\n  } else if (firstProd instanceof Terminal) {\n    // nothing to see, move along\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n\n  const isFirstOptional = isOptionalProd(firstProd);\n  const hasMore = definition.length > 1;\n  if (isFirstOptional && hasMore) {\n    const rest = drop(definition);\n    return result.concat(getFirstNoneTerminal(rest));\n  } else {\n    return result;\n  }\n}\n\nclass OrCollector extends GAstVisitor {\n  public alternations: Alternation[] = [];\n\n  public visitAlternation(node: Alternation): void {\n    this.alternations.push(node);\n  }\n}\n\nexport function validateEmptyOrAlternative(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserEmptyAlternativeDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap<Alternation, IParserEmptyAlternativeDefinitionError>(\n    ors,\n    (currOr) => {\n      const exceptLast = dropRight(currOr.definition);\n      return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n        const possibleFirstInAlt = nextPossibleTokensAfter(\n          [currAlternative],\n          [],\n          tokenStructuredMatcher,\n          1,\n        );\n        if (isEmpty(possibleFirstInAlt)) {\n          return [\n            {\n              message: errMsgProvider.buildEmptyAlternationError({\n                topLevelRule: topLevelRule,\n                alternation: currOr,\n                emptyChoiceIdx: currAltIdx,\n              }),\n              type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n              ruleName: topLevelRule.name,\n              occurrence: currOr.idx,\n              alternative: currAltIdx + 1,\n            },\n          ];\n        } else {\n          return [];\n        }\n      });\n    },\n  );\n\n  return errors;\n}\n\nexport function validateAmbiguousAlternationAlternatives(\n  topLevelRule: Rule,\n  globalMaxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  let ors = orCollector.alternations;\n\n  // New Handling of ignoring ambiguities\n  // - https://github.com/chevrotain/chevrotain/issues/869\n  ors = reject(ors, (currOr) => currOr.ignoreAmbiguities === true);\n\n  const errors = flatMap(ors, (currOr: Alternation) => {\n    const currOccurrence = currOr.idx;\n    const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n    const alternatives = getLookaheadPathsForOr(\n      currOccurrence,\n      topLevelRule,\n      actualMaxLookahead,\n      currOr,\n    );\n    const altsAmbiguityErrors = checkAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n    const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n\n    return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n  });\n\n  return errors;\n}\n\nexport class RepetitionCollector extends GAstVisitor {\n  public allProductions: (IProductionWithOccurrence & {\n    maxLookahead?: number;\n  })[] = [];\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n}\n\nexport function validateTooManyAlts(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap(ors, (currOr) => {\n    if (currOr.definition.length > 255) {\n      return [\n        {\n          message: errMsgProvider.buildTooManyAlternativesError({\n            topLevelRule: topLevelRule,\n            alternation: currOr,\n          }),\n          type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx,\n        },\n      ];\n    } else {\n      return [];\n    }\n  });\n\n  return errors;\n}\n\nexport function validateSomeNonEmptyLookaheadPath(\n  topLevelRules: Rule[],\n  maxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  forEach(topLevelRules, (currTopRule) => {\n    const collectorVisitor = new RepetitionCollector();\n    currTopRule.accept(collectorVisitor);\n    const allRuleProductions = collectorVisitor.allProductions;\n    forEach(allRuleProductions, (currProd) => {\n      const prodType = getProdType(currProd);\n      const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n      const currOccurrence = currProd.idx;\n      const paths = getLookaheadPathsForOptionalProd(\n        currOccurrence,\n        currTopRule,\n        prodType,\n        actualMaxLookahead,\n      );\n      const pathsInsideProduction = paths[0];\n      if (isEmpty(flatten(pathsInsideProduction))) {\n        const errMsg = errMsgProvider.buildEmptyRepetitionError({\n          topLevelRule: currTopRule,\n          repetition: currProd,\n        });\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n          ruleName: currTopRule.name,\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nexport interface IAmbiguityDescriptor {\n  alts: number[];\n  path: TokenType[];\n}\n\nfunction checkAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const foundAmbiguousPaths: Alternative = [];\n  const identicalAmbiguities = reduce(\n    alternatives,\n    (result, currAlt, currAltIdx) => {\n      // ignore (skip) ambiguities with this alternative\n      if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n        return result;\n      }\n\n      forEach(currAlt, (currPath) => {\n        const altsCurrPathAppearsIn = [currAltIdx];\n        forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n          if (\n            currAltIdx !== currOtherAltIdx &&\n            containsPath(currOtherAlt, currPath) &&\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true\n          ) {\n            altsCurrPathAppearsIn.push(currOtherAltIdx);\n          }\n        });\n\n        if (\n          altsCurrPathAppearsIn.length > 1 &&\n          !containsPath(foundAmbiguousPaths, currPath)\n        ) {\n          foundAmbiguousPaths.push(currPath);\n          result.push({\n            alts: altsCurrPathAppearsIn,\n            path: currPath,\n          });\n        }\n      });\n      return result;\n    },\n    [] as { alts: number[]; path: TokenType[] }[],\n  );\n\n  const currErrors = map(identicalAmbiguities, (currAmbDescriptor) => {\n    const ambgIndices = map(\n      currAmbDescriptor.alts,\n      (currAltIdx) => currAltIdx + 1,\n    );\n\n    const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n      topLevelRule: rule,\n      alternation: alternation,\n      ambiguityIndices: ambgIndices,\n      prefixPath: currAmbDescriptor.path,\n    });\n\n    return {\n      message: currMessage,\n      type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n      ruleName: rule.name,\n      occurrence: alternation.idx,\n      alternatives: currAmbDescriptor.alts,\n    };\n  });\n\n  return currErrors;\n}\n\nexport function checkPrefixAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  // flatten\n  const pathsAndIndices = reduce(\n    alternatives,\n    (result, currAlt, idx) => {\n      const currPathsAndIdx = map(currAlt, (currPath) => {\n        return { idx: idx, path: currPath };\n      });\n      return result.concat(currPathsAndIdx);\n    },\n    [] as { idx: number; path: TokenType[] }[],\n  );\n\n  const errors = compact(\n    flatMap(pathsAndIndices, (currPathAndIdx) => {\n      const alternativeGast = alternation.definition[currPathAndIdx.idx];\n      // ignore (skip) ambiguities with this alternative\n      if (alternativeGast.ignoreAmbiguities === true) {\n        return [];\n      }\n      const targetIdx = currPathAndIdx.idx;\n      const targetPath = currPathAndIdx.path;\n\n      const prefixAmbiguitiesPathsAndIndices = filter(\n        pathsAndIndices,\n        (searchPathAndIdx) => {\n          // prefix ambiguity can only be created from lower idx (higher priority) path\n          return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n              true &&\n            searchPathAndIdx.idx < targetIdx &&\n            // checking for strict prefix because identical lookaheads\n            // will be be detected using a different validation.\n            isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n          );\n        },\n      );\n\n      const currPathPrefixErrors = map(\n        prefixAmbiguitiesPathsAndIndices,\n        (currAmbPathAndIdx): IParserAmbiguousAlternativesDefinitionError => {\n          const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n          const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n\n          const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbPathAndIdx.path,\n          });\n          return {\n            message: message,\n            type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n            ruleName: rule.name,\n            occurrence: occurrence,\n            alternatives: ambgIndices,\n          };\n        },\n      );\n\n      return currPathPrefixErrors;\n    }),\n  );\n\n  return errors;\n}\n\nfunction checkTerminalAndNoneTerminalsNameSpace(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n\n  const tokenNames = map(tokenTypes, (currToken) => currToken.name);\n\n  forEach(topLevels, (currRule) => {\n    const currRuleName = currRule.name;\n    if (includes(tokenNames, currRuleName)) {\n      const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n        ruleName: currRuleName,\n      });\n    }\n  });\n\n  return errors;\n}\n","import { Rule } from \"@chevrotain/gast\";\nimport { defaults, forEach } from \"lodash-es\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver.js\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks.js\";\nimport {\n  defaultGrammarResolverErrorProvider,\n  defaultGrammarValidatorErrorProvider,\n} from \"../../errors_public.js\";\nimport { TokenType } from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"../types.js\";\n\ntype ResolveGrammarOpts = {\n  rules: Rule[];\n  errMsgProvider?: IGrammarResolverErrorMessageProvider;\n};\nexport function resolveGrammar(\n  options: ResolveGrammarOpts,\n): IParserDefinitionError[] {\n  const actualOptions: Required<ResolveGrammarOpts> = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider,\n  });\n\n  const topRulesTable: { [ruleName: string]: Rule } = {};\n  forEach(options.rules, (rule) => {\n    topRulesTable[rule.name] = rule;\n  });\n  return orgResolveGrammar(topRulesTable, actualOptions.errMsgProvider);\n}\n\nexport function validateGrammar(options: {\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n  errMsgProvider: IGrammarValidatorErrorMessageProvider;\n}): IParserDefinitionError[] {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider,\n  });\n\n  return orgValidateGrammar(\n    options.rules,\n    options.tokenTypes,\n    options.errMsgProvider,\n    options.grammarName,\n  );\n}\n","import { includes } from \"lodash-es\";\nimport {\n  IRecognitionException,\n  IRecognizerContext,\n  IToken,\n} from \"@chevrotain/types\";\n\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\n\nconst RECOGNITION_EXCEPTION_NAMES = [\n  MISMATCHED_TOKEN_EXCEPTION,\n  NO_VIABLE_ALT_EXCEPTION,\n  EARLY_EXIT_EXCEPTION,\n  NOT_ALL_INPUT_PARSED_EXCEPTION,\n];\n\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error: Error) {\n  // can't do instanceof on hacked custom js exceptions\n  return includes(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\n\nabstract class RecognitionException\n  extends Error\n  implements IRecognitionException\n{\n  context: IRecognizerContext;\n  resyncedTokens: IToken[] = [];\n\n  protected constructor(\n    message: string,\n    public token: IToken,\n  ) {\n    super(message);\n\n    // fix prototype chain when typescript target is ES5\n    Object.setPrototypeOf(this, new.target.prototype);\n\n    /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class MismatchedTokenException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n  }\n}\n\nexport class NoViableAltException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n  }\n}\n\nexport class NotAllInputParsedException extends RecognitionException {\n  constructor(message: string, token: IToken) {\n    super(message, token);\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n  }\n}\n\nexport class EarlyExitException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = EARLY_EXIT_EXCEPTION;\n  }\n}\n","import {\n  createTokenInstance,\n  EOF,\n  tokenMatcher,\n} from \"../../../scan/tokens_public.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  IFirstAfterRepetition,\n} from \"../../grammar/interpreter.js\";\nimport {\n  clone,\n  dropRight,\n  find,\n  flatten,\n  has,\n  includes,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport {\n  IParserConfig,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { MismatchedTokenException } from \"../../exceptions_public.js\";\nimport { IN } from \"../../constants.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\nexport const EOF_FOLLOW_KEY: any = {};\n\nexport interface IFollowKey {\n  ruleName: string;\n  idxInCallingRule: number;\n  inRule: string;\n}\n\nexport const IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\n\nexport class InRuleRecoveryException extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = IN_RULE_RECOVERY_EXCEPTION;\n  }\n}\n\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nexport class Recoverable {\n  recoveryEnabled: boolean;\n  firstAfterRepMap: Record<string, IFirstAfterRepetition>;\n  resyncFollows: Record<string, TokenType[]>;\n\n  initRecoverable(config: IParserConfig) {\n    this.firstAfterRepMap = {};\n    this.resyncFollows = {};\n\n    this.recoveryEnabled = has(config, \"recoveryEnabled\")\n      ? (config.recoveryEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n\n    // performance optimization, NOOP will be inlined which\n    // effectively means that this optional feature does not exist\n    // when not used.\n    if (this.recoveryEnabled) {\n      this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n    }\n  }\n\n  public getTokenToInsert(tokType: TokenType): IToken {\n    const tokToInsert = createTokenInstance(\n      tokType,\n      \"\",\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n    );\n    tokToInsert.isInsertedInRecovery = true;\n    return tokToInsert;\n  }\n\n  public canTokenTypeBeInsertedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  public canTokenTypeBeDeletedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  tryInRepetitionRecovery(\n    this: MixedInParser,\n    grammarRule: Function,\n    grammarRuleArgs: any[],\n    lookAheadFunc: () => boolean,\n    expectedTokType: TokenType,\n  ): void {\n    // TODO: can the resyncTokenType be cached?\n    const reSyncTokType = this.findReSyncTokenType();\n    const savedLexerState = this.exportLexerState();\n    const resyncedTokens: IToken[] = [];\n    let passedResyncPoint = false;\n\n    const nextTokenWithoutResync = this.LA(1);\n    let currToken = this.LA(1);\n\n    const generateErrorMessage = () => {\n      const previousToken = this.LA(0);\n      // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n      // the error that would have been thrown\n      const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: expectedTokType,\n        actual: nextTokenWithoutResync,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      const error = new MismatchedTokenException(\n        msg,\n        nextTokenWithoutResync,\n        this.LA(0),\n      );\n      // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n      error.resyncedTokens = dropRight(resyncedTokens);\n      this.SAVE_ERROR(error);\n    };\n\n    while (!passedResyncPoint) {\n      // re-synced to a point where we can safely exit the repetition/\n      if (this.tokenMatcher(currToken, expectedTokType)) {\n        generateErrorMessage();\n        return; // must return here to avoid reverting the inputIdx\n      } else if (lookAheadFunc.call(this)) {\n        // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n        generateErrorMessage();\n        // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n        grammarRule.apply(this, grammarRuleArgs);\n        return; // must return here to avoid reverting the inputIdx\n      } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n        passedResyncPoint = true;\n      } else {\n        currToken = this.SKIP_TOKEN();\n        this.addToResyncTokens(currToken, resyncedTokens);\n      }\n    }\n\n    // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n    // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n    // \"between rules\" resync recovery later in the flow.\n    this.importLexerState(savedLexerState);\n  }\n\n  shouldInRepetitionRecoveryBeTried(\n    this: MixedInParser,\n    expectTokAfterLastMatch: TokenType,\n    nextTokIdx: number,\n    notStuck: boolean | undefined,\n  ): boolean {\n    // Edge case of arriving from a MANY repetition which is stuck\n    // Attempting recovery in this case could cause an infinite loop\n    if (notStuck === false) {\n      return false;\n    }\n\n    // no need to recover, next token is what we expect...\n    if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n      return false;\n    }\n\n    // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n    // and prefer some backtracking path that includes recovered errors.\n    if (this.isBackTracking()) {\n      return false;\n    }\n\n    // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n    // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n    //noinspection RedundantIfStatementJS\n    if (\n      this.canPerformInRuleRecovery(\n        expectTokAfterLastMatch,\n        this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx),\n      )\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Error Recovery functionality\n  getFollowsForInRuleRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): TokenType[] {\n    const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n    const follows = this.getNextPossibleTokenTypes(grammarPath);\n    return follows;\n  }\n\n  tryInRuleRecovery(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): IToken {\n    if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n      const tokToInsert = this.getTokenToInsert(expectedTokType);\n      return tokToInsert;\n    }\n\n    if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n      const nextTok = this.SKIP_TOKEN();\n      this.consumeToken();\n      return nextTok;\n    }\n\n    throw new InRuleRecoveryException(\"sad sad panda\");\n  }\n\n  canPerformInRuleRecovery(\n    this: MixedInParser,\n    expectedToken: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    return (\n      this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n      this.canRecoverWithSingleTokenDeletion(expectedToken)\n    );\n  }\n\n  canRecoverWithSingleTokenInsertion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    // must know the possible following tokens to perform single token insertion\n    if (isEmpty(follows)) {\n      return false;\n    }\n\n    const mismatchedTok = this.LA(1);\n    const isMisMatchedTokInFollows =\n      find(follows, (possibleFollowsTokType: TokenType) => {\n        return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n      }) !== undefined;\n\n    return isMisMatchedTokInFollows;\n  }\n\n  canRecoverWithSingleTokenDeletion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n  ): boolean {\n    if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    const isNextTokenWhatIsExpected = this.tokenMatcher(\n      this.LA(2),\n      expectedTokType,\n    );\n    return isNextTokenWhatIsExpected;\n  }\n\n  isInCurrentRuleReSyncSet(\n    this: MixedInParser,\n    tokenTypeIdx: TokenType,\n  ): boolean {\n    const followKey = this.getCurrFollowKey();\n    const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n    return includes(currentRuleReSyncSet, tokenTypeIdx);\n  }\n\n  findReSyncTokenType(this: MixedInParser): TokenType {\n    const allPossibleReSyncTokTypes = this.flattenFollowSet();\n    // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n    let nextToken = this.LA(1);\n    let k = 2;\n    while (true) {\n      const foundMatch = find(allPossibleReSyncTokTypes, (resyncTokType) => {\n        const canMatch = tokenMatcher(nextToken, resyncTokType);\n        return canMatch;\n      });\n      if (foundMatch !== undefined) {\n        return foundMatch;\n      }\n      nextToken = this.LA(k);\n      k++;\n    }\n  }\n\n  getCurrFollowKey(this: MixedInParser): IFollowKey {\n    // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n    if (this.RULE_STACK.length === 1) {\n      return EOF_FOLLOW_KEY;\n    }\n    const currRuleShortName = this.getLastExplicitRuleShortName();\n    const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n    const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n\n    return {\n      ruleName: this.shortRuleNameToFullName(currRuleShortName),\n      idxInCallingRule: currRuleIdx,\n      inRule: this.shortRuleNameToFullName(prevRuleShortName),\n    };\n  }\n\n  buildFullFollowKeyStack(this: MixedInParser): IFollowKey[] {\n    const explicitRuleStack = this.RULE_STACK;\n    const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n\n    return map(explicitRuleStack, (ruleName, idx) => {\n      if (idx === 0) {\n        return EOF_FOLLOW_KEY;\n      }\n      return {\n        ruleName: this.shortRuleNameToFullName(ruleName),\n        idxInCallingRule: explicitOccurrenceStack[idx],\n        inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n      };\n    });\n  }\n\n  flattenFollowSet(this: MixedInParser): TokenType[] {\n    const followStack = map(this.buildFullFollowKeyStack(), (currKey) => {\n      return this.getFollowSetFromFollowKey(currKey);\n    });\n    return <any>flatten(followStack);\n  }\n\n  getFollowSetFromFollowKey(\n    this: MixedInParser,\n    followKey: IFollowKey,\n  ): TokenType[] {\n    if (followKey === EOF_FOLLOW_KEY) {\n      return [EOF];\n    }\n\n    const followName =\n      followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n\n    return this.resyncFollows[followName];\n  }\n\n  // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n  addToResyncTokens(\n    this: MixedInParser,\n    token: IToken,\n    resyncTokens: IToken[],\n  ): IToken[] {\n    if (!this.tokenMatcher(token, EOF)) {\n      resyncTokens.push(token);\n    }\n    return resyncTokens;\n  }\n\n  reSyncTo(this: MixedInParser, tokType: TokenType): IToken[] {\n    const resyncedTokens: IToken[] = [];\n    let nextTok = this.LA(1);\n    while (this.tokenMatcher(nextTok, tokType) === false) {\n      nextTok = this.SKIP_TOKEN();\n      this.addToResyncTokens(nextTok, resyncedTokens);\n    }\n    // the last token is not part of the error.\n    return dropRight(resyncedTokens);\n  }\n\n  attemptInRepetitionRecovery(\n    this: MixedInParser,\n    prodFunc: Function,\n    args: any[],\n    lookaheadFunc: () => boolean,\n    dslMethodIdx: number,\n    prodOccurrence: number,\n    nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n    notStuck?: boolean,\n  ): void {\n    // by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n  }\n\n  getCurrentGrammarPath(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): ITokenGrammarPath {\n    const pathRuleStack: string[] = this.getHumanReadableRuleStack();\n    const pathOccurrenceStack: number[] = clone(this.RULE_OCCURRENCE_STACK);\n    const grammarPath: any = {\n      ruleStack: pathRuleStack,\n      occurrenceStack: pathOccurrenceStack,\n      lastTok: tokType,\n      lastTokOccurrence: tokIdxInRule,\n    };\n\n    return grammarPath;\n  }\n  getHumanReadableRuleStack(this: MixedInParser): string[] {\n    return map(this.RULE_STACK, (currShortName) =>\n      this.shortRuleNameToFullName(currShortName),\n    );\n  }\n}\n\nexport function attemptInRepetitionRecovery(\n  this: MixedInParser,\n  prodFunc: Function,\n  args: any[],\n  lookaheadFunc: () => boolean,\n  dslMethodIdx: number,\n  prodOccurrence: number,\n  nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  notStuck?: boolean,\n): void {\n  const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n  let firstAfterRepInfo = this.firstAfterRepMap[key];\n  if (firstAfterRepInfo === undefined) {\n    const currRuleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[currRuleName];\n    const walker: AbstractNextTerminalAfterProductionWalker =\n      new nextToksWalker(ruleGrammar, prodOccurrence);\n    firstAfterRepInfo = walker.startWalking();\n    this.firstAfterRepMap[key] = firstAfterRepInfo;\n  }\n\n  let expectTokAfterLastMatch = firstAfterRepInfo.token;\n  let nextTokIdx = firstAfterRepInfo.occurrence;\n  const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n\n  // special edge case of a TOP most repetition after which the input should END.\n  // this will force an attempt for inRule recovery in that scenario.\n  if (\n    this.RULE_STACK.length === 1 &&\n    isEndOfRule &&\n    expectTokAfterLastMatch === undefined\n  ) {\n    expectTokAfterLastMatch = EOF;\n    nextTokIdx = 1;\n  }\n\n  // We don't have anything to re-sync to...\n  // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n  if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n    return;\n  }\n\n  if (\n    this.shouldInRepetitionRecoveryBeTried(\n      expectTokAfterLastMatch,\n      nextTokIdx,\n      notStuck,\n    )\n  ) {\n    // TODO: performance optimization: instead of passing the original args here, we modify\n    // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n    // to avoid searching the cache for it once more.\n    this.tryInRepetitionRecovery(\n      prodFunc,\n      args,\n      lookaheadFunc,\n      expectTokAfterLastMatch,\n    );\n  }\n}\n","// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\n\nexport const BITS_FOR_METHOD_TYPE = 4;\nexport const BITS_FOR_OCCURRENCE_IDX = 8;\nexport const BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport const BITS_FOR_ALT_IDX = 8;\n\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nexport const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(\n  ruleIdx: number,\n  dslMethodIdx: number,\n  occurrence: number,\n): number {\n  return occurrence | dslMethodIdx | ruleIdx;\n}\n\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\n","import {\n  ILookaheadStrategy,\n  ILookaheadValidationError,\n  IOrAlt,\n  OptionalProductionType,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { flatMap, isEmpty } from \"lodash-es\";\nimport { defaultGrammarValidatorErrorProvider } from \"../errors_public.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser/parser.js\";\nimport {\n  validateAmbiguousAlternationAlternatives,\n  validateEmptyOrAlternative,\n  validateNoLeftRecursion,\n  validateSomeNonEmptyLookaheadPath,\n} from \"./checks.js\";\nimport {\n  buildAlternativesLookAheadFunc,\n  buildLookaheadFuncForOptionalProd,\n  buildLookaheadFuncForOr,\n  buildSingleAlternativeLookaheadFunction,\n  getProdType,\n} from \"./lookahead.js\";\nimport { IParserDefinitionError } from \"./types.js\";\n\nexport class LLkLookaheadStrategy implements ILookaheadStrategy {\n  readonly maxLookahead: number;\n\n  constructor(options?: { maxLookahead?: number }) {\n    this.maxLookahead =\n      options?.maxLookahead ?? DEFAULT_PARSER_CONFIG.maxLookahead;\n  }\n\n  validate(options: {\n    rules: Rule[];\n    tokenTypes: TokenType[];\n    grammarName: string;\n  }): ILookaheadValidationError[] {\n    const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n\n    if (isEmpty(leftRecursionErrors)) {\n      const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n      const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(\n        options.rules,\n        this.maxLookahead,\n      );\n      const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(\n        options.rules,\n        this.maxLookahead,\n      );\n      const allErrors = [\n        ...leftRecursionErrors,\n        ...emptyAltErrors,\n        ...ambiguousAltsErrors,\n        ...emptyRepetitionErrors,\n      ];\n      return allErrors;\n    }\n    return leftRecursionErrors;\n  }\n\n  validateNoLeftRecursion(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateNoLeftRecursion(\n        currTopRule,\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateEmptyOrAlternatives(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateEmptyOrAlternative(\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateAmbiguousAlternationAlternatives(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateAmbiguousAlternationAlternatives(\n        currTopRule,\n        maxLookahead,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateSomeNonEmptyLookaheadPath(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return validateSomeNonEmptyLookaheadPath(\n      rules,\n      maxLookahead,\n      defaultGrammarValidatorErrorProvider,\n    );\n  }\n\n  buildLookaheadForAlternation(options: {\n    prodOccurrence: number;\n    rule: Rule;\n    maxLookahead: number;\n    hasPredicates: boolean;\n    dynamicTokensEnabled: boolean;\n  }): (orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\n    return buildLookaheadFuncForOr(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.hasPredicates,\n      options.dynamicTokensEnabled,\n      buildAlternativesLookAheadFunc,\n    );\n  }\n\n  buildLookaheadForOptional(options: {\n    prodOccurrence: number;\n    prodType: OptionalProductionType;\n    rule: Rule;\n    maxLookahead: number;\n    dynamicTokensEnabled: boolean;\n  }): () => boolean {\n    return buildLookaheadFuncForOptionalProd(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.dynamicTokensEnabled,\n      getProdType(options.prodType),\n      buildSingleAlternativeLookaheadFunction,\n    );\n  }\n}\n","import { forEach, has } from \"lodash-es\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\nimport {\n  ILookaheadStrategy,\n  IParserConfig,\n  OptionalProductionType,\n} from \"@chevrotain/types\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  getKeyForAutomaticLookahead,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  GAstVisitor,\n  getProductionDslName,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n} from \"@chevrotain/gast\";\nimport { LLkLookaheadStrategy } from \"../../grammar/llk_lookahead.js\";\n\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */\nexport class LooksAhead {\n  maxLookahead: number;\n  lookAheadFuncsCache: any;\n  dynamicTokensEnabled: boolean;\n  lookaheadStrategy: ILookaheadStrategy;\n\n  initLooksAhead(config: IParserConfig) {\n    this.dynamicTokensEnabled = has(config, \"dynamicTokensEnabled\")\n      ? (config.dynamicTokensEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n\n    this.maxLookahead = has(config, \"maxLookahead\")\n      ? (config.maxLookahead as number) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.maxLookahead;\n\n    this.lookaheadStrategy = has(config, \"lookaheadStrategy\")\n      ? (config.lookaheadStrategy as ILookaheadStrategy) // assumes end user provides the correct config value/type\n      : new LLkLookaheadStrategy({ maxLookahead: this.maxLookahead });\n\n    this.lookAheadFuncsCache = new Map();\n  }\n\n  preComputeLookaheadFunctions(this: MixedInParser, rules: Rule[]): void {\n    forEach(rules, (currRule) => {\n      this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n        const {\n          alternation,\n          repetition,\n          option,\n          repetitionMandatory,\n          repetitionMandatoryWithSeparator,\n          repetitionWithSeparator,\n        } = collectMethods(currRule);\n\n        forEach(alternation, (currProd) => {\n          const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n          this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n            const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n              prodOccurrence: currProd.idx,\n              rule: currRule,\n              maxLookahead: currProd.maxLookahead || this.maxLookahead,\n              hasPredicates: currProd.hasPredicates,\n              dynamicTokensEnabled: this.dynamicTokensEnabled,\n            });\n\n            const key = getKeyForAutomaticLookahead(\n              this.fullRuleNameToShort[currRule.name],\n              OR_IDX,\n              currProd.idx,\n            );\n            this.setLaFuncCache(key, laFunc);\n          });\n        });\n\n        forEach(repetition, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_IDX,\n            \"Repetition\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(option, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            OPTION_IDX,\n            \"Option\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatory, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_IDX,\n            \"RepetitionMandatory\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatoryWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_SEP_IDX,\n            \"RepetitionMandatoryWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_SEP_IDX,\n            \"RepetitionWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n      });\n    });\n  }\n\n  computeLookaheadFunc(\n    this: MixedInParser,\n    rule: Rule,\n    prodOccurrence: number,\n    prodKey: number,\n    prodType: OptionalProductionType,\n    prodMaxLookahead: number | undefined,\n    dslMethodName: string,\n  ): void {\n    this.TRACE_INIT(\n      `${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`,\n      () => {\n        const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n          prodOccurrence,\n          rule,\n          maxLookahead: prodMaxLookahead || this.maxLookahead,\n          dynamicTokensEnabled: this.dynamicTokensEnabled,\n          prodType,\n        });\n        const key = getKeyForAutomaticLookahead(\n          this.fullRuleNameToShort[rule.name],\n          prodKey,\n          prodOccurrence,\n        );\n        this.setLaFuncCache(key, laFunc);\n      },\n    );\n  }\n\n  // this actually returns a number, but it is always used as a string (object prop key)\n  getKeyForAutomaticLookahead(\n    this: MixedInParser,\n    dslMethodIdx: number,\n    occurrence: number,\n  ): number {\n    const currRuleShortName: any = this.getLastExplicitRuleShortName();\n    return getKeyForAutomaticLookahead(\n      currRuleShortName,\n      dslMethodIdx,\n      occurrence,\n    );\n  }\n\n  getLaFuncFromCache(this: MixedInParser, key: number): Function {\n    return this.lookAheadFuncsCache.get(key);\n  }\n\n  /* istanbul ignore next */\n  setLaFuncCache(this: MixedInParser, key: number, value: Function): void {\n    this.lookAheadFuncsCache.set(key, value);\n  }\n}\n\nclass DslMethodsCollectorVisitor extends GAstVisitor {\n  public dslMethods: {\n    option: Option[];\n    alternation: Alternation[];\n    repetition: Repetition[];\n    repetitionWithSeparator: RepetitionWithSeparator[];\n    repetitionMandatory: RepetitionMandatory[];\n    repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n  } = {\n    option: [],\n    alternation: [],\n    repetition: [],\n    repetitionWithSeparator: [],\n    repetitionMandatory: [],\n    repetitionMandatoryWithSeparator: [],\n  };\n\n  reset() {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: [],\n    };\n  }\n\n  public visitOption(option: Option): void {\n    this.dslMethods.option.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.dslMethods.repetition.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.dslMethods.alternation.push(or);\n  }\n}\n\nconst collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule: Rule): {\n  option: Option[];\n  alternation: Alternation[];\n  repetition: Repetition[];\n  repetitionWithSeparator: RepetitionWithSeparator[];\n  repetitionMandatory: RepetitionMandatory[];\n  repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n} {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  const dslMethods = collectorVisitor.dslMethods;\n  // avoid uncleaned references\n  collectorVisitor.reset();\n  return <any>dslMethods;\n}\n","import { CstNode, CstNodeLocation, IToken } from \"@chevrotain/types\";\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationOnlyOffset(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: Required<Pick<IToken, \"startOffset\" | \"endOffset\">>,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (both start/end offsets exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n  // Once the startOffset has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n}\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationFull(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: CstNodeLocation,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (all start/end props exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.startColumn = newLocationInfo.startColumn;\n    currNodeLocation.startLine = newLocationInfo.startLine;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n  // Once the start props has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset! === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n}\n\nexport function addTerminalToCst(\n  node: CstNode,\n  token: IToken,\n  tokenTypeName: string,\n): void {\n  if (node.children[tokenTypeName] === undefined) {\n    node.children[tokenTypeName] = [token];\n  } else {\n    node.children[tokenTypeName].push(token);\n  }\n}\n\nexport function addNoneTerminalToCst(\n  node: CstNode,\n  ruleName: string,\n  ruleResult: any,\n): void {\n  if (node.children[ruleName] === undefined) {\n    node.children[ruleName] = [ruleResult];\n  } else {\n    node.children[ruleName].push(ruleResult);\n  }\n}\n","const NAME = \"name\";\n\nexport function defineNameProp(obj: {}, nameValue: string): void {\n  Object.defineProperty(obj, NAME, {\n    enumerable: false,\n    configurable: true,\n    writable: false,\n    value: nameValue,\n  });\n}\n","import {\n  compact,\n  filter,\n  forEach,\n  isArray,\n  isEmpty,\n  isFunction,\n  isUndefined,\n  keys,\n  map,\n} from \"lodash-es\";\nimport { defineNameProp } from \"../../lang/lang_extensions.js\";\nimport { CstNode, ICstVisitor } from \"@chevrotain/types\";\n\nexport function defaultVisit<IN>(ctx: any, param: IN): void {\n  const childrenNames = keys(ctx);\n  const childrenNamesLength = childrenNames.length;\n  for (let i = 0; i < childrenNamesLength; i++) {\n    const currChildName = childrenNames[i];\n    const currChildArray = ctx[currChildName];\n    const currChildArrayLength = currChildArray.length;\n    for (let j = 0; j < currChildArrayLength; j++) {\n      const currChild: any = currChildArray[j];\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n}\n\nexport function createBaseSemanticVisitorConstructor(\n  grammarName: string,\n  ruleNames: string[],\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n\n  const semanticProto = {\n    visit: function (cstNode: CstNode | CstNode[], param: any) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      }\n\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n\n    validateVisitor: function () {\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n      if (!isEmpty(semanticDefinitionErrors)) {\n        const errorMessages = map(\n          semanticDefinitionErrors,\n          (currDefError) => currDefError.msg,\n        );\n        throw Error(\n          `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n            `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`,\n        );\n      }\n    },\n  };\n\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  derivedConstructor._RULE_NAMES = ruleNames;\n\n  return derivedConstructor;\n}\n\nexport function createBaseVisitorConstructorWithDefaults(\n  grammarName: string,\n  ruleNames: string[],\n  baseConstructor: Function,\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n\n  const withDefaultsProto = Object.create(baseConstructor.prototype);\n  forEach(ruleNames, (ruleName) => {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  return derivedConstructor;\n}\n\nexport enum CstVisitorDefinitionError {\n  REDUNDANT_METHOD,\n  MISSING_METHOD,\n}\n\nexport interface IVisitorDefinitionError {\n  msg: string;\n  type: CstVisitorDefinitionError;\n  methodName: string;\n}\n\nexport function validateVisitor(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n\n  return missingErrors;\n}\n\nexport function validateMissingCstMethods(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingRuleNames = filter(ruleNames, (currRuleName) => {\n    return isFunction((visitorInstance as any)[currRuleName]) === false;\n  });\n\n  const errors: IVisitorDefinitionError[] = map(\n    missingRuleNames,\n    (currRuleName) => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${<any>(\n          visitorInstance.constructor.name\n        )} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName,\n      };\n    },\n  );\n\n  return compact<IVisitorDefinitionError>(errors);\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  CstNode,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IProduction,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  forEach,\n  has,\n  isArray,\n  isFunction,\n  last as peek,\n  some,\n} from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { Lexer } from \"../../../scan/lexer_public.js\";\nimport {\n  augmentTokenTypes,\n  hasShortKeyProperty,\n} from \"../../../scan/tokens.js\";\nimport {\n  createToken,\n  createTokenInstance,\n} from \"../../../scan/tokens_public.js\";\nimport { END_OF_FILE } from \"../parser.js\";\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\ntype ProdWithDef = IProduction & { definition?: IProduction[] };\nconst RECORDING_NULL_OBJECT = {\n  description: \"This Object indicates the Parser is during Recording Phase\",\n};\nObject.freeze(RECORDING_NULL_OBJECT);\n\nconst HANDLE_SEPARATOR = true;\nconst MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\n\nconst RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA });\naugmentTokenTypes([RFT]);\nconst RECORDING_PHASE_TOKEN = createTokenInstance(\n  RFT,\n  \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n);\nObject.freeze(RECORDING_PHASE_TOKEN);\n\nconst RECORDING_PHASE_CSTNODE: CstNode = {\n  name:\n    \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  children: {},\n};\n\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nexport class GastRecorder {\n  recordingProdStack: ProdWithDef[];\n  RECORDING_PHASE: boolean;\n\n  initGastRecorder(this: MixedInParser, config: IParserConfig): void {\n    this.recordingProdStack = [];\n    this.RECORDING_PHASE = false;\n  }\n\n  enableRecording(this: MixedInParser): void {\n    this.RECORDING_PHASE = true;\n\n    this.TRACE_INIT(\"Enable Recording\", () => {\n      /**\n       * Warning Dark Voodoo Magic upcoming!\n       * We are \"replacing\" the public parsing DSL methods API\n       * With **new** alternative implementations on the Parser **instance**\n       *\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n       *   implementations directly instead.\n       */\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        this[`CONSUME${idx}` as \"CONSUME\"] = function (arg1, arg2) {\n          return this.consumeInternalRecord(arg1, i, arg2);\n        };\n        this[`SUBRULE${idx}` as \"SUBRULE\"] = function (arg1, arg2) {\n          return this.subruleInternalRecord(arg1, i, arg2) as any;\n        };\n        this[`OPTION${idx}` as \"OPTION\"] = function (arg1) {\n          return this.optionInternalRecord(arg1, i);\n        };\n        this[`OR${idx}` as \"OR\"] = function (arg1) {\n          return this.orInternalRecord(arg1, i);\n        };\n        this[`MANY${idx}` as \"MANY\"] = function (arg1) {\n          this.manyInternalRecord(i, arg1);\n        };\n        this[`MANY_SEP${idx}` as \"MANY_SEP\"] = function (arg1) {\n          this.manySepFirstInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE${idx}` as \"AT_LEAST_ONE\"] = function (arg1) {\n          this.atLeastOneInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE_SEP${idx}` as \"AT_LEAST_ONE_SEP\"] = function (arg1) {\n          this.atLeastOneSepFirstInternalRecord(i, arg1);\n        };\n      }\n\n      // DSL methods with the idx(suffix) as an argument\n      this[`consume`] = function (idx, arg1, arg2) {\n        return this.consumeInternalRecord(arg1, idx, arg2);\n      };\n      this[`subrule`] = function (idx, arg1, arg2) {\n        return this.subruleInternalRecord(arg1, idx, arg2) as any;\n      };\n      this[`option`] = function (idx, arg1) {\n        return this.optionInternalRecord(arg1, idx);\n      };\n      this[`or`] = function (idx, arg1) {\n        return this.orInternalRecord(arg1, idx);\n      };\n      this[`many`] = function (idx, arg1) {\n        this.manyInternalRecord(idx, arg1);\n      };\n      this[`atLeastOne`] = function (idx, arg1) {\n        this.atLeastOneInternalRecord(idx, arg1);\n      };\n\n      this.ACTION = this.ACTION_RECORD;\n      this.BACKTRACK = this.BACKTRACK_RECORD;\n      this.LA = this.LA_RECORD;\n    });\n  }\n\n  disableRecording(this: MixedInParser) {\n    this.RECORDING_PHASE = false;\n    // By deleting these **instance** properties, any future invocation\n    // will be deferred to the original methods on the **prototype** object\n    // This seems to get rid of any incorrect optimizations that V8 may\n    // do during the recording phase.\n    this.TRACE_INIT(\"Deleting Recording methods\", () => {\n      const that: any = this;\n\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        delete that[`CONSUME${idx}`];\n        delete that[`SUBRULE${idx}`];\n        delete that[`OPTION${idx}`];\n        delete that[`OR${idx}`];\n        delete that[`MANY${idx}`];\n        delete that[`MANY_SEP${idx}`];\n        delete that[`AT_LEAST_ONE${idx}`];\n        delete that[`AT_LEAST_ONE_SEP${idx}`];\n      }\n\n      delete that[`consume`];\n      delete that[`subrule`];\n      delete that[`option`];\n      delete that[`or`];\n      delete that[`many`];\n      delete that[`atLeastOne`];\n\n      delete that.ACTION;\n      delete that.BACKTRACK;\n      delete that.LA;\n    });\n  }\n\n  //   Parser methods are called inside an ACTION?\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n  // @ts-expect-error -- noop place holder\n  ACTION_RECORD<T>(this: MixedInParser, impl: () => T): T {\n    // NO-OP during recording\n  }\n\n  // Executing backtracking logic will break our recording logic assumptions\n  BACKTRACK_RECORD<T>(\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return () => true;\n  }\n\n  // LA is part of the official API and may be used for custom lookahead logic\n  // by end users who may forget to wrap it in ACTION or inside a GATE\n  LA_RECORD(howMuch: number): IToken {\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n    // On LA return EOF at the end of the input so an infinite loop may occur.\n    return END_OF_FILE;\n  }\n\n  topLevelRuleRecord(name: string, def: Function): Rule {\n    try {\n      const newTopLevelRule = new Rule({ definition: [], name: name });\n      newTopLevelRule.name = name;\n      this.recordingProdStack.push(newTopLevelRule);\n      def.call(this);\n      this.recordingProdStack.pop();\n      return newTopLevelRule;\n    } catch (originalError) {\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\n        try {\n          originalError.message =\n            originalError.message +\n            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n        } catch (mutabilityError) {\n          // We may not be able to modify the original error object\n          throw originalError;\n        }\n      }\n      throw originalError;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternalRecord<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT {\n    return recordProd.call(this, Option, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneSepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionMandatoryWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  manyInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n  }\n\n  manySepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  orInternalRecord<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    return recordOrProd.call(this, altsOrOpts, occurrence);\n  }\n\n  subruleInternalRecord<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    occurrence: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R | CstNode {\n    assertMethodIdxIsValid(occurrence);\n    if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n      const error: any = new Error(\n        `<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a Parser method reference but got: <${JSON.stringify(\n            ruleToCall,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n\n    const prevProd: any = peek(this.recordingProdStack);\n    const ruleName = ruleToCall.ruleName;\n    const newNoneTerminal = new NonTerminal({\n      idx: occurrence,\n      nonTerminalName: ruleName,\n      label: options?.LABEL,\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n      referencedRule: undefined,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return this.outputCst\n      ? RECORDING_PHASE_CSTNODE\n      : <any>RECORDING_NULL_OBJECT;\n  }\n\n  consumeInternalRecord(\n    this: MixedInParser,\n    tokType: TokenType,\n    occurrence: number,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    assertMethodIdxIsValid(occurrence);\n    if (!hasShortKeyProperty(tokType)) {\n      const error: any = new Error(\n        `<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a TokenType reference but got: <${JSON.stringify(\n            tokType,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n    const prevProd: any = peek(this.recordingProdStack);\n    const newNoneTerminal = new Terminal({\n      idx: occurrence,\n      terminalType: tokType,\n      label: options?.LABEL,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return RECORDING_PHASE_TOKEN;\n  }\n}\n\nfunction recordProd(\n  prodConstructor: any,\n  mainProdArg: any,\n  occurrence: number,\n  handleSep: boolean = false,\n): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n\n  const newProd = new prodConstructor({ definition: [], idx: occurrence });\n  if (handleSep) {\n    newProd.separator = mainProdArg.SEP;\n  }\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  this.recordingProdStack.push(newProd);\n  grammarAction.call(this);\n  prevProd.definition.push(newProd);\n  this.recordingProdStack.pop();\n\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction recordOrProd(mainProdArg: any, occurrence: number): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  // Only an array of alternatives\n  const hasOptions = isArray(mainProdArg) === false;\n  const alts: IOrAlt<unknown>[] =\n    hasOptions === false ? mainProdArg : mainProdArg.DEF;\n\n  const newOrProd = new Alternation({\n    definition: [],\n    idx: occurrence,\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n  });\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  const hasPredicates = some(alts, (currAlt: any) => isFunction(currAlt.GATE));\n  newOrProd.hasPredicates = hasPredicates;\n\n  prevProd.definition.push(newOrProd);\n\n  forEach(alts, (currAlt) => {\n    const currAltFlat = new Alternative({ definition: [] });\n    newOrProd.definition.push(currAltFlat);\n    if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES as boolean; // assumes end user provides the correct config value/type\n    }\n    // **implicit** ignoreAmbiguities due to usage of gate\n    else if (has(currAlt, \"GATE\")) {\n      currAltFlat.ignoreAmbiguities = true;\n    }\n    this.recordingProdStack.push(currAltFlat);\n    currAlt.ALT.call(this);\n    this.recordingProdStack.pop();\n  });\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction getIdxSuffix(idx: number): string {\n  return idx === 0 ? \"\" : `${idx}`;\n}\n\nfunction assertMethodIdxIsValid(idx: number): void {\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\n    const error: any = new Error(\n      // The stack trace will contain all the needed details\n      `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n        `Idx value must be a none negative value smaller than ${\n          MAX_METHOD_IDX + 1\n        }`,\n    );\n    error.KNOWN_RECORDER_ERROR = true;\n    throw error;\n  }\n}\n","import { clone, forEach, has, isEmpty, map, values } from \"lodash-es\";\nimport { toFastProperties } from \"@chevrotain/utils\";\nimport { computeAllProdsFollows } from \"../grammar/follow.js\";\nimport { createTokenInstance, EOF } from \"../../scan/tokens_public.js\";\nimport {\n  defaultGrammarValidatorErrorProvider,\n  defaultParserErrorProvider,\n} from \"../errors_public.js\";\nimport {\n  resolveGrammar,\n  validateGrammar,\n} from \"../grammar/gast/gast_resolver_public.js\";\nimport {\n  CstNode,\n  IParserConfig,\n  IRecognitionException,\n  IRuleConfig,\n  IToken,\n  TokenType,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport { Recoverable } from \"./traits/recoverable.js\";\nimport { LooksAhead } from \"./traits/looksahead.js\";\nimport { TreeBuilder } from \"./traits/tree_builder.js\";\nimport { LexerAdapter } from \"./traits/lexer_adapter.js\";\nimport { RecognizerApi } from \"./traits/recognizer_api.js\";\nimport { RecognizerEngine } from \"./traits/recognizer_engine.js\";\n\nimport { ErrorHandler } from \"./traits/error_handler.js\";\nimport { MixedInParser } from \"./traits/parser_traits.js\";\nimport { ContentAssist } from \"./traits/context_assist.js\";\nimport { GastRecorder } from \"./traits/gast_recorder.js\";\nimport { PerformanceTracer } from \"./traits/perf_tracer.js\";\nimport { applyMixins } from \"./utils/apply_mixins.js\";\nimport { IParserDefinitionError } from \"../grammar/types.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { IParserConfigInternal, ParserMethodInternal } from \"./types.js\";\nimport { validateLookahead } from \"../grammar/checks.js\";\n\nexport const END_OF_FILE = createTokenInstance(\n  EOF,\n  \"\",\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n);\nObject.freeze(END_OF_FILE);\n\nexport type TokenMatcher = (token: IToken, tokType: TokenType) => boolean;\n\nexport const DEFAULT_PARSER_CONFIG: Required<\n  Omit<IParserConfigInternal, \"lookaheadStrategy\">\n> = Object.freeze({\n  recoveryEnabled: false,\n  maxLookahead: 3,\n  dynamicTokensEnabled: false,\n  outputCst: true,\n  errorMessageProvider: defaultParserErrorProvider,\n  nodeLocationTracking: \"none\",\n  traceInitPerf: false,\n  skipValidations: false,\n});\n\nexport const DEFAULT_RULE_CONFIG: Required<IRuleConfig<any>> = Object.freeze({\n  recoveryValueFunc: () => undefined,\n  resyncEnabled: true,\n});\n\nexport enum ParserDefinitionErrorType {\n  INVALID_RULE_NAME = 0,\n  DUPLICATE_RULE_NAME = 1,\n  INVALID_RULE_OVERRIDE = 2,\n  DUPLICATE_PRODUCTIONS = 3,\n  UNRESOLVED_SUBRULE_REF = 4,\n  LEFT_RECURSION = 5,\n  NONE_LAST_EMPTY_ALT = 6,\n  AMBIGUOUS_ALTS = 7,\n  CONFLICT_TOKENS_RULES_NAMESPACE = 8,\n  INVALID_TOKEN_NAME = 9,\n  NO_NON_EMPTY_LOOKAHEAD = 10,\n  AMBIGUOUS_PREFIX_ALTS = 11,\n  TOO_MANY_ALTS = 12,\n  CUSTOM_LOOKAHEAD_VALIDATION = 13,\n}\n\nexport interface IParserDuplicatesDefinitionError\n  extends IParserDefinitionError {\n  dslName: string;\n  occurrence: number;\n  parameter?: string;\n}\n\nexport interface IParserEmptyAlternativeDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number;\n  alternative: number;\n}\n\nexport interface IParserAmbiguousAlternativesDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number | string;\n  alternatives: number[];\n}\n\nexport interface IParserUnresolvedRefDefinitionError\n  extends IParserDefinitionError {\n  unresolvedRefName: string;\n}\n\nexport interface IParserState {\n  errors: IRecognitionException[];\n  lexerState: any;\n  RULE_STACK: number[];\n  CST_STACK: CstNode[];\n}\n\nexport type Predicate = () => boolean;\n\nexport function EMPTY_ALT(): () => undefined;\nexport function EMPTY_ALT<T>(value: T): () => T;\nexport function EMPTY_ALT(value: any = undefined) {\n  return function () {\n    return value;\n  };\n}\n\nexport class Parser {\n  // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n  // (normally during the parser's constructor).\n  // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n  // for example: duplicate rule names, referencing an unresolved subrule, ect...\n  // This flag should not be enabled during normal usage, it is used in special situations, for example when\n  // needing to display the parser definition errors in some GUI(online playground).\n  static DEFER_DEFINITION_ERRORS_HANDLING: boolean = false;\n\n  /**\n   *  @deprecated use the **instance** method with the same name instead\n   */\n  static performSelfAnalysis(parserInstance: Parser): void {\n    throw Error(\n      \"The **static** `performSelfAnalysis` method has been deprecated.\" +\n        \"\\t\\nUse the **instance** method with the same name instead.\",\n    );\n  }\n\n  public performSelfAnalysis(this: MixedInParser): void {\n    this.TRACE_INIT(\"performSelfAnalysis\", () => {\n      let defErrorsMsgs;\n\n      this.selfAnalysisDone = true;\n      const className = this.className;\n\n      this.TRACE_INIT(\"toFastProps\", () => {\n        // Without this voodoo magic the parser would be x3-x4 slower\n        // It seems it is better to invoke `toFastProperties` **before**\n        // Any manipulations of the `this` object done during the recording phase.\n        toFastProperties(this);\n      });\n\n      this.TRACE_INIT(\"Grammar Recording\", () => {\n        try {\n          this.enableRecording();\n          // Building the GAST\n          forEach(this.definedRulesNames, (currRuleName) => {\n            const wrappedRule = (this as any)[\n              currRuleName\n            ] as ParserMethodInternal<unknown[], unknown>;\n            const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n            let recordedRuleGast!: Rule;\n            this.TRACE_INIT(`${currRuleName} Rule`, () => {\n              recordedRuleGast = this.topLevelRuleRecord(\n                currRuleName,\n                originalGrammarAction,\n              );\n            });\n            this.gastProductionsCache[currRuleName] = recordedRuleGast;\n          });\n        } finally {\n          this.disableRecording();\n        }\n      });\n\n      let resolverErrors: IParserDefinitionError[] = [];\n      this.TRACE_INIT(\"Grammar Resolving\", () => {\n        resolverErrors = resolveGrammar({\n          rules: values(this.gastProductionsCache),\n        });\n        this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n      });\n\n      this.TRACE_INIT(\"Grammar Validations\", () => {\n        // only perform additional grammar validations IFF no resolving errors have occurred.\n        // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n        if (isEmpty(resolverErrors) && this.skipValidations === false) {\n          const validationErrors = validateGrammar({\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            errMsgProvider: defaultGrammarValidatorErrorProvider,\n            grammarName: className,\n          });\n          const lookaheadValidationErrors = validateLookahead({\n            lookaheadStrategy: this.lookaheadStrategy,\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            grammarName: className,\n          });\n          this.definitionErrors = this.definitionErrors.concat(\n            validationErrors,\n            lookaheadValidationErrors,\n          );\n        }\n      });\n\n      // this analysis may fail if the grammar is not perfectly valid\n      if (isEmpty(this.definitionErrors)) {\n        // The results of these computations are not needed unless error recovery is enabled.\n        if (this.recoveryEnabled) {\n          this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n            const allFollows = computeAllProdsFollows(\n              values(this.gastProductionsCache),\n            );\n            this.resyncFollows = allFollows;\n          });\n        }\n\n        this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n          this.lookaheadStrategy.initialize?.({\n            rules: values(this.gastProductionsCache),\n          });\n          this.preComputeLookaheadFunctions(values(this.gastProductionsCache));\n        });\n      }\n\n      if (\n        !Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n        !isEmpty(this.definitionErrors)\n      ) {\n        defErrorsMsgs = map(\n          this.definitionErrors,\n          (defError) => defError.message,\n        );\n        throw new Error(\n          `Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\n            \"\\n-------------------------------\\n\",\n          )}`,\n        );\n      }\n    });\n  }\n\n  definitionErrors: IParserDefinitionError[] = [];\n  selfAnalysisDone = false;\n  protected skipValidations: boolean;\n\n  constructor(tokenVocabulary: TokenVocabulary, config: IParserConfig) {\n    const that: MixedInParser = this as any;\n    that.initErrorHandler(config);\n    that.initLexerAdapter();\n    that.initLooksAhead(config);\n    that.initRecognizerEngine(tokenVocabulary, config);\n    that.initRecoverable(config);\n    that.initTreeBuilder(config);\n    that.initContentAssist();\n    that.initGastRecorder(config);\n    that.initPerformanceTracer(config);\n\n    if (has(config, \"ignoredIssues\")) {\n      throw new Error(\n        \"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" +\n          \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" +\n          \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" +\n          \"For further details.\",\n      );\n    }\n\n    this.skipValidations = has(config, \"skipValidations\")\n      ? (config.skipValidations as boolean) // casting assumes the end user passing the correct type\n      : DEFAULT_PARSER_CONFIG.skipValidations;\n  }\n}\n\napplyMixins(Parser, [\n  Recoverable,\n  LooksAhead,\n  TreeBuilder,\n  LexerAdapter,\n  RecognizerEngine,\n  RecognizerApi,\n  ErrorHandler,\n  ContentAssist,\n  GastRecorder,\n  PerformanceTracer,\n]);\n\nexport class CstParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = true;\n    super(tokenVocabulary, configClone);\n  }\n}\n\nexport class EmbeddedActionsParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = false;\n    super(tokenVocabulary, configClone);\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach((baseCtor) => {\n    const baseProto = baseCtor.prototype;\n    Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n      if (propName === \"constructor\") {\n        return;\n      }\n\n      const basePropDescriptor = Object.getOwnPropertyDescriptor(\n        baseProto,\n        propName,\n      );\n      // Handle Accessors\n      if (\n        basePropDescriptor &&\n        (basePropDescriptor.get || basePropDescriptor.set)\n      ) {\n        Object.defineProperty(\n          derivedCtor.prototype,\n          propName,\n          basePropDescriptor,\n        );\n      } else {\n        derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n      }\n    });\n  });\n}\n","import {\n  addNoneTerminalToCst,\n  addTerminalToCst,\n  setNodeLocationFull,\n  setNodeLocationOnlyOffset,\n} from \"../../cst/cst.js\";\nimport { has, isUndefined, keys, noop } from \"lodash-es\";\nimport {\n  createBaseSemanticVisitorConstructor,\n  createBaseVisitorConstructorWithDefaults,\n} from \"../../cst/cst_visitor.js\";\nimport {\n  CstNode,\n  CstNodeLocation,\n  ICstVisitor,\n  IParserConfig,\n  IToken,\n  nodeLocationTrackingOptions,\n} from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * This trait is responsible for the CST building logic.\n */\nexport class TreeBuilder {\n  outputCst: boolean;\n  CST_STACK: CstNode[];\n  baseCstVisitorConstructor: Function;\n  baseCstVisitorWithDefaultsConstructor: Function;\n\n  // dynamically assigned Methods\n  setNodeLocationFromNode: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  setNodeLocationFromToken: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  cstPostRule: (this: MixedInParser, ruleCstNode: CstNode) => void;\n\n  setInitialNodeLocation: (cstNode: CstNode) => void;\n  nodeLocationTracking: nodeLocationTrackingOptions;\n\n  initTreeBuilder(this: MixedInParser, config: IParserConfig) {\n    this.CST_STACK = [];\n\n    // outputCst is no longer exposed/defined in the pubic API\n    this.outputCst = (config as any).outputCst;\n\n    this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n      ? (config.nodeLocationTracking as nodeLocationTrackingOptions) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop;\n      this.cstFinallyStateUpdate = noop;\n      this.cstPostTerminal = noop;\n      this.cstPostNonTerminal = noop;\n      this.cstPostRule = noop;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationFull;\n          this.setNodeLocationFromNode = setNodeLocationFull;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = <any>setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = <any>setNodeLocationOnlyOffset;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop;\n        this.setNodeLocationFromNode = noop;\n        this.cstPostRule = noop;\n        this.setInitialNodeLocation = noop;\n      } else {\n        throw Error(\n          `Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`,\n        );\n      }\n    }\n  }\n\n  setInitialNodeLocationOnlyOffsetRecovery(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationOnlyOffsetRegular(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationFullRecovery(this: MixedInParser, cstNode: any): void {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n\n     * @param cstNode\n     */\n  setInitialNodeLocationFullRegular(this: MixedInParser, cstNode: any): void {\n    const nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  cstInvocationStateUpdate(this: MixedInParser, fullRuleName: string): void {\n    const cstNode: CstNode = {\n      name: fullRuleName,\n      children: Object.create(null),\n    };\n\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  }\n\n  cstFinallyStateUpdate(this: MixedInParser): void {\n    this.CST_STACK.pop();\n  }\n\n  cstPostRuleFull(this: MixedInParser, ruleCstNode: CstNode): void {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    const prevToken = this.LA(0) as Required<CstNodeLocation>;\n    const loc = ruleCstNode.location as Required<CstNodeLocation>;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  }\n\n  cstPostRuleOnlyOffset(this: MixedInParser, ruleCstNode: CstNode): void {\n    const prevToken = this.LA(0);\n    // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n    const loc = ruleCstNode.location!;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  }\n\n  cstPostTerminal(\n    this: MixedInParser,\n    key: string,\n    consumedToken: IToken,\n  ): void {\n    const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    addTerminalToCst(rootCst, consumedToken, key);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromToken(rootCst.location!, <any>consumedToken);\n  }\n\n  cstPostNonTerminal(\n    this: MixedInParser,\n    ruleCstResult: CstNode,\n    ruleName: string,\n  ): void {\n    const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromNode(preCstNode.location!, ruleCstResult.location!);\n  }\n\n  getBaseCstVisitorConstructor<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorConstructor)) {\n      const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(\n        this.className,\n        keys(this.gastProductionsCache),\n      );\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return <any>this.baseCstVisitorConstructor;\n  }\n\n  getBaseCstVisitorConstructorWithDefaults<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      const newConstructor = createBaseVisitorConstructorWithDefaults(\n        this.className,\n        keys(this.gastProductionsCache),\n        this.getBaseCstVisitorConstructor(),\n      );\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return <any>this.baseCstVisitorWithDefaultsConstructor;\n  }\n\n  getLastExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  }\n\n  getPreviousExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  }\n\n  getLastExplicitRuleOccurrenceIndex(this: MixedInParser): number {\n    const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  }\n}\n","import { END_OF_FILE } from \"../parser.js\";\nimport { IToken } from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nexport class LexerAdapter {\n  tokVector: IToken[];\n  tokVectorLength: number;\n  currIdx: number;\n\n  initLexerAdapter() {\n    this.tokVector = [];\n    this.tokVectorLength = 0;\n    this.currIdx = -1;\n  }\n\n  set input(newInput: IToken[]) {\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    if (this.selfAnalysisDone !== true) {\n      throw Error(\n        `Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`,\n      );\n    }\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    this.reset();\n    this.tokVector = newInput;\n    this.tokVectorLength = newInput.length;\n  }\n\n  get input(): IToken[] {\n    return this.tokVector;\n  }\n\n  // skips a token and returns the next token\n  SKIP_TOKEN(this: MixedInParser): IToken {\n    if (this.currIdx <= this.tokVector.length - 2) {\n      this.consumeToken();\n      return this.LA(1);\n    } else {\n      return END_OF_FILE;\n    }\n  }\n\n  // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n  // or lexers dependent on parser context.\n  LA(this: MixedInParser, howMuch: number): IToken {\n    const soughtIdx = this.currIdx + howMuch;\n    if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n      return END_OF_FILE;\n    } else {\n      return this.tokVector[soughtIdx];\n    }\n  }\n\n  consumeToken(this: MixedInParser) {\n    this.currIdx++;\n  }\n\n  exportLexerState(this: MixedInParser): number {\n    return this.currIdx;\n  }\n\n  importLexerState(this: MixedInParser, newState: number) {\n    this.currIdx = newState;\n  }\n\n  resetLexerState(this: MixedInParser): void {\n    this.currIdx = -1;\n  }\n\n  moveToTerminatedState(this: MixedInParser): void {\n    this.currIdx = this.tokVector.length - 1;\n  }\n\n  getLexerPosition(this: MixedInParser): number {\n    return this.exportLexerState();\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IRuleConfig,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  ParserMethod,\n  SubruleMethodOpts,\n  TokenType,\n  TokenTypeDictionary,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport {\n  clone,\n  every,\n  flatten,\n  has,\n  isArray,\n  isEmpty,\n  isObject,\n  reduce,\n  uniq,\n  values,\n} from \"lodash-es\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  BITS_FOR_METHOD_TYPE,\n  BITS_FOR_OCCURRENCE_IDX,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport {\n  isRecognitionException,\n  MismatchedTokenException,\n  NotAllInputParsedException,\n} from \"../../exceptions_public.js\";\nimport { PROD_TYPE } from \"../../grammar/lookahead.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  NextTerminalAfterAtLeastOneSepWalker,\n  NextTerminalAfterAtLeastOneWalker,\n  NextTerminalAfterManySepWalker,\n  NextTerminalAfterManyWalker,\n} from \"../../grammar/interpreter.js\";\nimport { DEFAULT_RULE_CONFIG, IParserState, TokenMatcher } from \"../parser.js\";\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable.js\";\nimport { EOF } from \"../../../scan/tokens_public.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  augmentTokenTypes,\n  isTokenType,\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../../scan/tokens.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nexport class RecognizerEngine {\n  isBackTrackingStack: boolean[];\n  className: string;\n  RULE_STACK: number[];\n  RULE_OCCURRENCE_STACK: number[];\n  definedRulesNames: string[];\n  tokensMap: { [fqn: string]: TokenType };\n  gastProductionsCache: Record<string, Rule>;\n  shortRuleNameToFull: Record<string, string>;\n  fullRuleNameToShort: Record<string, number>;\n  // The shortName Index must be coded \"after\" the first 8bits to enable building unique lookahead keys\n  ruleShortNameIdx: number;\n  tokenMatcher: TokenMatcher;\n  subruleIdx: number;\n\n  initRecognizerEngine(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfig,\n  ) {\n    this.className = this.constructor.name;\n    // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n    this.shortRuleNameToFull = {};\n    this.fullRuleNameToShort = {};\n    this.ruleShortNameIdx = 256;\n    this.tokenMatcher = tokenStructuredMatcherNoCategories;\n    this.subruleIdx = 0;\n\n    this.definedRulesNames = [];\n    this.tokensMap = {};\n    this.isBackTrackingStack = [];\n    this.RULE_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n    this.gastProductionsCache = {};\n\n    if (has(config, \"serializedGrammar\")) {\n      throw Error(\n        \"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n          \"\\tFor Further details.\",\n      );\n    }\n\n    if (isArray(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if (isEmpty(tokenVocabulary as any[])) {\n        throw Error(\n          \"A Token Vocabulary cannot be empty.\\n\" +\n            \"\\tNote that the first argument for the parser constructor\\n\" +\n            \"\\tis no longer a Token vector (since v4.0).\",\n        );\n      }\n\n      if (typeof (tokenVocabulary as any[])[0].startOffset === \"number\") {\n        throw Error(\n          \"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n            \"\\tFor Further details.\",\n        );\n      }\n    }\n\n    if (isArray(tokenVocabulary)) {\n      this.tokensMap = reduce(\n        tokenVocabulary,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (\n      has(tokenVocabulary, \"modes\") &&\n      every(flatten(values((<any>tokenVocabulary).modes)), isTokenType)\n    ) {\n      const allTokenTypes = flatten(values((<any>tokenVocabulary).modes));\n      const uniqueTokens = uniq(allTokenTypes);\n      this.tokensMap = <any>reduce(\n        uniqueTokens,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (isObject(tokenVocabulary)) {\n      this.tokensMap = clone(tokenVocabulary as TokenTypeDictionary);\n    } else {\n      throw new Error(\n        \"<tokensDictionary> argument must be An Array of Token constructors,\" +\n          \" A dictionary of Token constructors or an IMultiModeLexerDefinition\",\n      );\n    }\n\n    // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n    this.tokensMap[\"EOF\"] = EOF;\n\n    const allTokenTypes = has(tokenVocabulary, \"modes\")\n      ? flatten(values((<any>tokenVocabulary).modes))\n      : values(tokenVocabulary);\n    const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) =>\n      isEmpty(tokenConstructor.categoryMatches),\n    );\n\n    this.tokenMatcher = noTokenCategoriesUsed\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher;\n\n    // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n    augmentTokenTypes(values(this.tokensMap));\n  }\n\n  defineRule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleName: string,\n    impl: (...args: ARGS) => R,\n    config: IRuleConfig<R>,\n  ): ParserMethodInternal<ARGS, R> {\n    if (this.selfAnalysisDone) {\n      throw Error(\n        `Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n          `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`,\n      );\n    }\n    const resyncEnabled: boolean = has(config, \"resyncEnabled\")\n      ? (config.resyncEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.resyncEnabled;\n    const recoveryValueFunc = has(config, \"recoveryValueFunc\")\n      ? (config.recoveryValueFunc as () => R) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n\n    // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n    const shortName =\n      this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX);\n\n    this.ruleShortNameIdx++;\n    this.shortRuleNameToFull[shortName] = ruleName;\n    this.fullRuleNameToShort[ruleName] = shortName;\n\n    let invokeRuleWithTry: ParserMethod<ARGS, R>;\n\n    // Micro optimization, only check the condition **once** on rule definition\n    // instead of **every single** rule invocation.\n    if (this.outputCst === true) {\n      invokeRuleWithTry = function invokeRuleWithTry(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          impl.apply(this, args);\n          const cst = this.CST_STACK[this.CST_STACK.length - 1];\n          this.cstPostRule(cst);\n          return cst as unknown as R;\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    } else {\n      invokeRuleWithTry = function invokeRuleWithTryCst(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          return impl.apply(this, args);\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    }\n\n    const wrappedGrammarRule: ParserMethodInternal<ARGS, R> = Object.assign(\n      invokeRuleWithTry as any,\n      { ruleName, originalGrammarAction: impl },\n    );\n\n    return wrappedGrammarRule;\n  }\n\n  invokeRuleCatch(\n    this: MixedInParser,\n    e: Error,\n    resyncEnabledConfig: boolean,\n    recoveryValueFunc: Function,\n  ): unknown {\n    const isFirstInvokedRule = this.RULE_STACK.length === 1;\n    // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n    const reSyncEnabled =\n      resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n\n    if (isRecognitionException(e)) {\n      const recogError: any = e;\n      if (reSyncEnabled) {\n        const reSyncTokType = this.findReSyncTokenType();\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            return partialCstResult;\n          } else {\n            return recoveryValueFunc(e);\n          }\n        } else {\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            recogError.partialCstResult = partialCstResult;\n          }\n          // to be handled Further up the call stack\n          throw recogError;\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState();\n        // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n        return recoveryValueFunc(e);\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError;\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternal<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT | undefined {\n    const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n  }\n\n  optionInternalLogic<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n    key: number,\n  ): OUT | undefined {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action: GrammarAction<OUT>;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this);\n    }\n    return undefined;\n  }\n\n  atLeastOneInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n    );\n    return this.atLeastOneInternalLogic(\n      prodOccurrence,\n      actionORMethodDef,\n      laKey,\n    );\n  }\n\n  atLeastOneInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n    key: number,\n  ): void {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if ((<Function>lookAheadFunc).call(this) === true) {\n      let notStuck = this.doSingleRepetition(action);\n      while (\n        (<Function>lookAheadFunc).call(this) === true &&\n        notStuck === true\n      ) {\n        notStuck = this.doSingleRepetition(action);\n      }\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY,\n        (<DSLMethodOptsWithErr<OUT>>actionORMethodDef).ERR_MSG,\n      );\n    }\n\n    // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.atLeastOneInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookAheadFunc,\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n      NextTerminalAfterAtLeastOneWalker,\n    );\n  }\n\n  atLeastOneSepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n    );\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  atLeastOneSepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n\n    const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      (<GrammarAction<OUT>>action).call(this);\n\n      //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        (<GrammarAction<OUT>>action).call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterAtLeastOneSepWalker,\n        ],\n        separatorLookAheadFunc,\n        AT_LEAST_ONE_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterAtLeastOneSepWalker,\n      );\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        options.ERR_MSG,\n      );\n    }\n  }\n\n  manyInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  }\n\n  manyInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    key: number,\n  ) {\n    let lookaheadFunction = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookaheadFunction;\n        lookaheadFunction = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    let notStuck = true;\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action);\n    }\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.manyInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookaheadFunction,\n      MANY_IDX,\n      prodOccurrence,\n      NextTerminalAfterManyWalker,\n      // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n      // An infinite loop cannot occur as:\n      // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n      notStuck,\n    );\n  }\n\n  manySepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      MANY_SEP_IDX,\n      prodOccurrence,\n    );\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  manySepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n    const firstIterationLaFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this);\n\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        action.call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterManySepWalker,\n        ],\n        separatorLookAheadFunc,\n        MANY_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterManySepWalker,\n      );\n    }\n  }\n\n  repetitionSepSecondInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    separator: TokenType,\n    separatorLookAheadFunc: () => boolean,\n    action: GrammarAction<OUT>,\n    nextTerminalAfterWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  ): void {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator);\n      action.call(this);\n    }\n\n    // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    /* istanbul ignore else */\n    this.attemptInRepetitionRecovery(\n      this.repetitionSepSecondInternal,\n      [\n        prodOccurrence,\n        separator,\n        separatorLookAheadFunc,\n        action,\n        nextTerminalAfterWalker,\n      ],\n      separatorLookAheadFunc,\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n      nextTerminalAfterWalker,\n    );\n  }\n\n  doSingleRepetition(this: MixedInParser, action: Function): any {\n    const beforeIteration = this.getLexerPosition();\n    action.call(this);\n    const afterIteration = this.getLexerPosition();\n\n    // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n    return afterIteration > beforeIteration;\n  }\n\n  orInternal<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n    const alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n\n    const laFunc = this.getLaFuncFromCache(laKey);\n    const altIdxToTake = laFunc.call(this, alts);\n    if (altIdxToTake !== undefined) {\n      const chosenAlternative: any = alts[altIdxToTake];\n      return chosenAlternative.ALT.call(this);\n    }\n    this.raiseNoAltException(\n      occurrence,\n      (altsOrOpts as OrMethodOpts<unknown>).ERR_MSG,\n    );\n  }\n\n  ruleFinallyStateUpdate(this: MixedInParser): void {\n    this.RULE_STACK.pop();\n    this.RULE_OCCURRENCE_STACK.pop();\n\n    // NOOP when cst is disabled\n    this.cstFinallyStateUpdate();\n\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      const firstRedundantTok = this.LA(1);\n      const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      this.SAVE_ERROR(\n        new NotAllInputParsedException(errMsg, firstRedundantTok),\n      );\n    }\n  }\n\n  subruleInternal<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    idx: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    let ruleResult;\n    try {\n      const args = options !== undefined ? options.ARGS : undefined;\n      this.subruleIdx = idx;\n      ruleResult = ruleToCall.apply(this, args);\n      this.cstPostNonTerminal(\n        ruleResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleToCall.ruleName,\n      );\n      return ruleResult;\n    } catch (e) {\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n    }\n  }\n\n  subruleInternalError(\n    this: MixedInParser,\n    e: any,\n    options: SubruleMethodOpts<unknown[]> | undefined,\n    ruleName: string,\n  ): void {\n    if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(\n        e.partialCstResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleName,\n      );\n\n      delete e.partialCstResult;\n    }\n    throw e;\n  }\n\n  consumeInternal(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    options: ConsumeMethodOpts | undefined,\n  ): IToken {\n    let consumedToken!: IToken;\n    try {\n      const nextToken = this.LA(1);\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken();\n        consumedToken = nextToken;\n      } else {\n        this.consumeInternalError(tokType, nextToken, options);\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(\n        tokType,\n        idx,\n        eFromConsumption,\n      );\n    }\n\n    this.cstPostTerminal(\n      options !== undefined && options.LABEL !== undefined\n        ? options.LABEL\n        : tokType.name,\n      consumedToken,\n    );\n    return consumedToken;\n  }\n\n  consumeInternalError(\n    this: MixedInParser,\n    tokType: TokenType,\n    nextToken: IToken,\n    options: ConsumeMethodOpts | undefined,\n  ): void {\n    let msg;\n    const previousToken = this.LA(0);\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG;\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n    }\n    throw this.SAVE_ERROR(\n      new MismatchedTokenException(msg, nextToken, previousToken),\n    );\n  }\n\n  consumeInternalRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    eFromConsumption: Error,\n  ): IToken {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (\n      this.recoveryEnabled &&\n      // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n      eFromConsumption.name === \"MismatchedTokenException\" &&\n      !this.isBackTracking()\n    ) {\n      const follows = this.getFollowsForInRuleRecovery(<any>tokType, idx);\n      try {\n        return this.tryInRuleRecovery(<any>tokType, follows);\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption;\n        } else {\n          throw eFromInRuleRecovery;\n        }\n      }\n    } else {\n      throw eFromConsumption;\n    }\n  }\n\n  saveRecogState(this: MixedInParser): IParserState {\n    // errors is a getter which will clone the errors array\n    const savedErrors = this.errors;\n    const savedRuleStack = clone(this.RULE_STACK);\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK,\n    };\n  }\n\n  reloadRecogState(this: MixedInParser, newState: IParserState) {\n    this.errors = newState.errors;\n    this.importLexerState(newState.lexerState);\n    this.RULE_STACK = newState.RULE_STACK;\n  }\n\n  ruleInvocationStateUpdate(\n    this: MixedInParser,\n    shortName: number,\n    fullName: string,\n    idxInCallingRule: number,\n  ): void {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n    this.RULE_STACK.push(shortName);\n    // NOOP when cst is disabled\n    this.cstInvocationStateUpdate(fullName);\n  }\n\n  isBackTracking(this: MixedInParser): boolean {\n    return this.isBackTrackingStack.length !== 0;\n  }\n\n  getCurrRuleFullName(this: MixedInParser): string {\n    const shortName = this.getLastExplicitRuleShortName();\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  shortRuleNameToFullName(this: MixedInParser, shortName: number) {\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  public isAtEndOfInput(this: MixedInParser): boolean {\n    return this.tokenMatcher(this.LA(1), EOF);\n  }\n\n  public reset(this: MixedInParser): void {\n    this.resetLexerState();\n    this.subruleIdx = 0;\n    this.isBackTrackingStack = [];\n    this.errors = [];\n    this.RULE_STACK = [];\n    // TODO: extract a specific reset for TreeBuilder trait\n    this.CST_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IRuleConfig,\n  ISerializedGast,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { includes, values } from \"lodash-es\";\nimport { isRecognitionException } from \"../../exceptions_public.js\";\nimport { DEFAULT_RULE_CONFIG, ParserDefinitionErrorType } from \"../parser.js\";\nimport { defaultGrammarValidatorErrorProvider } from \"../../errors_public.js\";\nimport { validateRuleIsOverridden } from \"../../grammar/checks.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { Rule, serializeGrammar } from \"@chevrotain/gast\";\nimport { IParserDefinitionError } from \"../../grammar/types.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */\nexport class RecognizerApi {\n  ACTION<T>(this: MixedInParser, impl: () => T): T {\n    return impl.call(this);\n  }\n\n  consume(\n    this: MixedInParser,\n    idx: number,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, idx, options);\n  }\n\n  subrule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    idx: number,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, idx, options);\n  }\n\n  option<OUT>(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, idx);\n  }\n\n  or(\n    this: MixedInParser,\n    idx: number,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<any>,\n  ): any {\n    return this.orInternal(altsOrOpts, idx);\n  }\n\n  many(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOpts<any>,\n  ): void {\n    return this.manyInternal(idx, actionORMethodDef);\n  }\n\n  atLeastOne(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOptsWithErr<any>,\n  ): void {\n    return this.atLeastOneInternal(idx, actionORMethodDef);\n  }\n\n  CONSUME(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 0, options);\n  }\n\n  CONSUME1(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 1, options);\n  }\n\n  CONSUME2(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 2, options);\n  }\n\n  CONSUME3(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 3, options);\n  }\n\n  CONSUME4(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 4, options);\n  }\n\n  CONSUME5(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 5, options);\n  }\n\n  CONSUME6(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 6, options);\n  }\n\n  CONSUME7(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 7, options);\n  }\n\n  CONSUME8(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 8, options);\n  }\n\n  CONSUME9(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 9, options);\n  }\n\n  SUBRULE<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 0, options);\n  }\n\n  SUBRULE1<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 1, options);\n  }\n\n  SUBRULE2<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 2, options);\n  }\n\n  SUBRULE3<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 3, options);\n  }\n\n  SUBRULE4<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 4, options);\n  }\n\n  SUBRULE5<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 5, options);\n  }\n\n  SUBRULE6<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 6, options);\n  }\n\n  SUBRULE7<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 7, options);\n  }\n\n  SUBRULE8<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 8, options);\n  }\n\n  SUBRULE9<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 9, options);\n  }\n\n  OPTION<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 0);\n  }\n\n  OPTION1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 1);\n  }\n\n  OPTION2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 2);\n  }\n\n  OPTION3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 3);\n  }\n\n  OPTION4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 4);\n  }\n\n  OPTION5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 5);\n  }\n\n  OPTION6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 6);\n  }\n\n  OPTION7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 7);\n  }\n\n  OPTION8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 8);\n  }\n\n  OPTION9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 9);\n  }\n\n  OR<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 0);\n  }\n\n  OR1<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 1);\n  }\n\n  OR2<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 2);\n  }\n\n  OR3<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 3);\n  }\n\n  OR4<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 4);\n  }\n\n  OR5<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 5);\n  }\n\n  OR6<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 6);\n  }\n\n  OR7<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 7);\n  }\n\n  OR8<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 8);\n  }\n\n  OR9<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 9);\n  }\n\n  MANY<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(0, actionORMethodDef);\n  }\n\n  MANY1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(1, actionORMethodDef);\n  }\n\n  MANY2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(2, actionORMethodDef);\n  }\n\n  MANY3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(3, actionORMethodDef);\n  }\n\n  MANY4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(4, actionORMethodDef);\n  }\n\n  MANY5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(5, actionORMethodDef);\n  }\n\n  MANY6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(6, actionORMethodDef);\n  }\n\n  MANY7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(7, actionORMethodDef);\n  }\n\n  MANY8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(8, actionORMethodDef);\n  }\n\n  MANY9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(9, actionORMethodDef);\n  }\n\n  MANY_SEP<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(0, options);\n  }\n\n  MANY_SEP1<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(1, options);\n  }\n\n  MANY_SEP2<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(2, options);\n  }\n\n  MANY_SEP3<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(3, options);\n  }\n\n  MANY_SEP4<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(4, options);\n  }\n\n  MANY_SEP5<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(5, options);\n  }\n\n  MANY_SEP6<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(6, options);\n  }\n\n  MANY_SEP7<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(7, options);\n  }\n\n  MANY_SEP8<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(8, options);\n  }\n\n  MANY_SEP9<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(9, options);\n  }\n\n  AT_LEAST_ONE<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(0, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    return this.atLeastOneInternal(1, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(2, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(3, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(4, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(5, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(6, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(7, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(8, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(9, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE_SEP<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(0, options);\n  }\n\n  AT_LEAST_ONE_SEP1<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(1, options);\n  }\n\n  AT_LEAST_ONE_SEP2<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(2, options);\n  }\n\n  AT_LEAST_ONE_SEP3<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(3, options);\n  }\n\n  AT_LEAST_ONE_SEP4<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(4, options);\n  }\n\n  AT_LEAST_ONE_SEP5<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(5, options);\n  }\n\n  AT_LEAST_ONE_SEP6<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(6, options);\n  }\n\n  AT_LEAST_ONE_SEP7<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(7, options);\n  }\n\n  AT_LEAST_ONE_SEP8<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(8, options);\n  }\n\n  AT_LEAST_ONE_SEP9<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(9, options);\n  }\n\n  RULE<T>(\n    this: MixedInParser,\n    name: string,\n    implementation: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T | any {\n    if (includes(this.definedRulesNames, name)) {\n      const errMsg =\n        defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n          topLevelRule: name,\n          grammarName: this.className,\n        });\n\n      const error = {\n        message: errMsg,\n        type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n        ruleName: name,\n      };\n      this.definitionErrors.push(error);\n    }\n\n    this.definedRulesNames.push(name);\n\n    const ruleImplementation = this.defineRule(name, implementation, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  OVERRIDE_RULE<T>(\n    this: MixedInParser,\n    name: string,\n    impl: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T {\n    const ruleErrors: IParserDefinitionError[] = validateRuleIsOverridden(\n      name,\n      this.definedRulesNames,\n      this.className,\n    );\n    this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n\n    const ruleImplementation = this.defineRule(name, impl, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  BACKTRACK<T>(\n    this: MixedInParser,\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return function () {\n      // save org state\n      this.isBackTrackingStack.push(1);\n      const orgState = this.saveRecogState();\n      try {\n        grammarRule.apply(this, args);\n        // if no exception was thrown we have succeed parsing the rule.\n        return true;\n      } catch (e) {\n        if (isRecognitionException(e)) {\n          return false;\n        } else {\n          throw e;\n        }\n      } finally {\n        this.reloadRecogState(orgState);\n        this.isBackTrackingStack.pop();\n      }\n    };\n  }\n\n  // GAST export APIs\n  public getGAstProductions(this: MixedInParser): Record<string, Rule> {\n    return this.gastProductionsCache;\n  }\n\n  public getSerializedGastProductions(this: MixedInParser): ISerializedGast[] {\n    return serializeGrammar(values(this.gastProductionsCache));\n  }\n}\n","import {\n  IParserConfig,\n  IParserErrorMessageProvider,\n  IRecognitionException,\n} from \"@chevrotain/types\";\nimport {\n  EarlyExitException,\n  isRecognitionException,\n  NoViableAltException,\n} from \"../../exceptions_public.js\";\nimport { clone, has } from \"lodash-es\";\nimport {\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  PROD_TYPE,\n} from \"../../grammar/lookahead.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n  _errors: IRecognitionException[];\n  errorMessageProvider: IParserErrorMessageProvider;\n\n  initErrorHandler(config: IParserConfig) {\n    this._errors = [];\n    this.errorMessageProvider = has(config, \"errorMessageProvider\")\n      ? (config.errorMessageProvider as IParserErrorMessageProvider) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  }\n\n  SAVE_ERROR(\n    this: MixedInParser,\n    error: IRecognitionException,\n  ): IRecognitionException {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK),\n      };\n      this._errors.push(error);\n      return error;\n    } else {\n      throw Error(\n        \"Trying to save an Error which is not a RecognitionException\",\n      );\n    }\n  }\n\n  get errors(): IRecognitionException[] {\n    return clone(this._errors);\n  }\n\n  set errors(newErrors: IRecognitionException[]) {\n    this._errors = newErrors;\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseEarlyExitException(\n    this: MixedInParser,\n    occurrence: number,\n    prodType: PROD_TYPE,\n    userDefinedErrMsg: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n      occurrence,\n      ruleGrammar,\n      prodType,\n      this.maxLookahead,\n    );\n    const insideProdPaths = lookAheadPathsPerAlternative[0];\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName,\n    });\n\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseNoAltException(\n    this: MixedInParser,\n    occurrence: number,\n    errMsgTypes: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOr(\n      occurrence,\n      ruleGrammar,\n      this.maxLookahead,\n    );\n\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const previousToken = this.LA(0);\n\n    const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName(),\n    });\n\n    throw this.SAVE_ERROR(\n      new NoViableAltException(errMsg, this.LA(1), previousToken),\n    );\n  }\n}\n","import {\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  NextAfterTokenWalker,\n  nextPossibleTokensAfter,\n} from \"../../grammar/interpreter.js\";\nimport { first, isUndefined } from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\nexport class ContentAssist {\n  initContentAssist() {}\n\n  public computeContentAssist(\n    this: MixedInParser,\n    startRuleName: string,\n    precedingInput: IToken[],\n  ): ISyntacticContentAssistPath[] {\n    const startRuleGast = this.gastProductionsCache[startRuleName];\n\n    if (isUndefined(startRuleGast)) {\n      throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n    }\n\n    return nextPossibleTokensAfter(\n      [startRuleGast],\n      precedingInput,\n      this.tokenMatcher,\n      this.maxLookahead,\n    );\n  }\n\n  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n  // TODO: should this be more explicitly part of the public API?\n  public getNextPossibleTokenTypes(\n    this: MixedInParser,\n    grammarPath: ITokenGrammarPath,\n  ): TokenType[] {\n    const topRuleName = first(grammarPath.ruleStack)!;\n    const gastProductions = this.getGAstProductions();\n    const topProduction = gastProductions[topRuleName];\n    const nextPossibleTokenTypes = new NextAfterTokenWalker(\n      topProduction,\n      grammarPath,\n    ).startWalking();\n    return nextPossibleTokenTypes;\n  }\n}\n","import { IParserConfig } from \"@chevrotain/types\";\nimport { has } from \"lodash-es\";\nimport { timer } from \"@chevrotain/utils\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class PerformanceTracer {\n  traceInitPerf: boolean | number;\n  traceInitMaxIdent: number;\n  traceInitIndent: number;\n\n  initPerformanceTracer(config: IParserConfig) {\n    if (has(config, \"traceInitPerf\")) {\n      const userTraceInitPerf = config.traceInitPerf;\n      const traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber\n        ? <number>userTraceInitPerf\n        : Infinity;\n      this.traceInitPerf = traceIsNumber\n        ? userTraceInitPerf > 0\n        : (userTraceInitPerf as boolean); // assumes end user provides the correct config value/type\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  }\n\n  TRACE_INIT<T>(this: MixedInParser, phaseDesc: string, phaseImpl: () => T): T {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  }\n}\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport filter from \"lodash-es/filter.js\"\r\nimport {\r\n    IProduction,\r\n    IProductionWithOccurrence,\r\n    TokenType,\r\n    Alternation,\r\n    NonTerminal,\r\n    Rule,\r\n    Option,\r\n    RepetitionMandatory,\r\n    Repetition,\r\n    Terminal,\r\n    Alternative,\r\n    RepetitionWithSeparator,\r\n    RepetitionMandatoryWithSeparator,\r\n    LookaheadProductionType\r\n} from \"chevrotain\"\r\n\r\nexport function buildATNKey(rule: Rule, type: LookaheadProductionType, occurrence: number): string {\r\n    return `${rule.name}_${type}_${occurrence}`;\r\n}\r\n\r\nexport interface ATN {\r\n    decisionMap: Record<string, DecisionState>\r\n    states: ATNState[]\r\n    decisionStates: DecisionState[]\r\n    ruleToStartState: Map<Rule, RuleStartState>\r\n    ruleToStopState: Map<Rule, RuleStopState>\r\n}\r\n\r\nexport const ATN_INVALID_TYPE = 0\r\nexport const ATN_BASIC = 1\r\nexport const ATN_RULE_START = 2\r\nexport const ATN_PLUS_BLOCK_START = 4\r\nexport const ATN_STAR_BLOCK_START = 5\r\n// Currently unused as the ATN is not used for lexing\r\nexport const ATN_TOKEN_START = 6\r\nexport const ATN_RULE_STOP = 7\r\nexport const ATN_BLOCK_END = 8\r\nexport const ATN_STAR_LOOP_BACK = 9\r\nexport const ATN_STAR_LOOP_ENTRY = 10\r\nexport const ATN_PLUS_LOOP_BACK = 11\r\nexport const ATN_LOOP_END = 12\r\n\r\nexport type ATNState =\r\n    | BasicState\r\n    | BasicBlockStartState\r\n    | PlusBlockStartState\r\n    | PlusLoopbackState\r\n    | StarBlockStartState\r\n    | StarLoopbackState\r\n    | StarLoopEntryState\r\n    | BlockEndState\r\n    | RuleStartState\r\n    | RuleStopState\r\n    | LoopEndState\r\n\r\nexport interface ATNBaseState {\r\n    atn: ATN\r\n    production: IProductionWithOccurrence\r\n    stateNumber: number\r\n    rule: Rule\r\n    epsilonOnlyTransitions: boolean\r\n    transitions: Transition[]\r\n    nextTokenWithinRule: number[]\r\n}\r\n\r\nexport interface BasicState extends ATNBaseState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface BlockStartState extends DecisionState {\r\n    end: BlockEndState\r\n}\r\n\r\nexport interface BasicBlockStartState extends BlockStartState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface PlusBlockStartState extends BlockStartState {\r\n    loopback: PlusLoopbackState\r\n    type: typeof ATN_PLUS_BLOCK_START\r\n}\r\n\r\nexport interface PlusLoopbackState extends DecisionState {\r\n    type: typeof ATN_PLUS_LOOP_BACK\r\n}\r\n\r\nexport interface StarBlockStartState extends BlockStartState {\r\n    type: typeof ATN_STAR_BLOCK_START\r\n}\r\n\r\nexport interface StarLoopbackState extends ATNBaseState {\r\n    type: typeof ATN_STAR_LOOP_BACK\r\n}\r\n\r\nexport interface StarLoopEntryState extends DecisionState {\r\n    loopback: StarLoopbackState\r\n    type: typeof ATN_STAR_LOOP_ENTRY\r\n}\r\n\r\nexport interface BlockEndState extends ATNBaseState {\r\n    start: BlockStartState\r\n    type: typeof ATN_BLOCK_END\r\n}\r\n\r\nexport interface DecisionState extends ATNBaseState {\r\n    decision: number\r\n}\r\n\r\nexport interface LoopEndState extends ATNBaseState {\r\n    loopback: ATNState\r\n    type: typeof ATN_LOOP_END\r\n}\r\n\r\nexport interface RuleStartState extends ATNBaseState {\r\n    stop: RuleStopState\r\n    type: typeof ATN_RULE_START\r\n}\r\n\r\nexport interface RuleStopState extends ATNBaseState {\r\n    type: typeof ATN_RULE_STOP\r\n}\r\n\r\nexport interface Transition {\r\n    target: ATNState\r\n    isEpsilon(): boolean\r\n}\r\n\r\nexport abstract class AbstractTransition implements Transition {\r\n    target: ATNState\r\n\r\n    constructor(target: ATNState) {\r\n        this.target = target\r\n    }\r\n\r\n    isEpsilon() {\r\n        return false\r\n    }\r\n}\r\n\r\nexport class AtomTransition extends AbstractTransition {\r\n    tokenType: TokenType\r\n\r\n    constructor(target: ATNState, tokenType: TokenType) {\r\n        super(target)\r\n        this.tokenType = tokenType\r\n    }\r\n}\r\n\r\nexport class EpsilonTransition extends AbstractTransition {\r\n    constructor(target: ATNState) {\r\n        super(target)\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\nexport class RuleTransition extends AbstractTransition {\r\n    rule: Rule\r\n    followState: ATNState\r\n\r\n    constructor(ruleStart: RuleStartState, rule: Rule, followState: ATNState) {\r\n        super(ruleStart)\r\n        this.rule = rule\r\n        this.followState = followState\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\ninterface ATNHandle {\r\n    left: ATNState\r\n    right: ATNState\r\n}\r\n\r\nexport function createATN(rules: Rule[]): ATN {\r\n    const atn: ATN = {\r\n        decisionMap: {},\r\n        decisionStates: [],\r\n        ruleToStartState: new Map(),\r\n        ruleToStopState: new Map(),\r\n        states: []\r\n    }\r\n    createRuleStartAndStopATNStates(atn, rules)\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const ruleBlock = block(atn, rule, rule)\r\n        if (ruleBlock === undefined) {\r\n            continue\r\n        }\r\n        buildRuleHandle(atn, rule, ruleBlock)\r\n    }\r\n    return atn\r\n}\r\n\r\nfunction createRuleStartAndStopATNStates(atn: ATN, rules: Rule[]): void {\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const start = newState<RuleStartState>(atn, rule, undefined, {\r\n            type: ATN_RULE_START\r\n        })\r\n        const stop = newState<RuleStopState>(atn, rule, undefined, {\r\n            type: ATN_RULE_STOP\r\n        })\r\n        start.stop = stop\r\n        atn.ruleToStartState.set(rule, start)\r\n        atn.ruleToStopState.set(rule, stop)\r\n    }\r\n}\r\n\r\nfunction atom(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProduction\r\n): ATNHandle | undefined {\r\n    if (production instanceof Terminal) {\r\n        return tokenRef(atn, rule, production.terminalType, production)\r\n    } else if (production instanceof NonTerminal) {\r\n        return ruleRef(atn, rule, production)\r\n    } else if (production instanceof Alternation) {\r\n        return alternation(atn, rule, production)\r\n    } else if (production instanceof Option) {\r\n        return option(atn, rule, production)\r\n    } else if (production instanceof Repetition) {\r\n        return repetition(atn, rule, production)\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return repetitionSep(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return repetitionMandatory(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return repetitionMandatorySep(atn, rule, production)\r\n    } else {\r\n        return block(atn, rule, production as Alternative)\r\n    }\r\n}\r\n\r\nfunction repetition(atn: ATN, rule: Rule, repetition: Repetition): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return star(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionSep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionWithSeparator\r\n): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return star(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction repetitionMandatory(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatory\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return plus(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionMandatorySep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatoryWithSeparator\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return plus(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction alternation(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    alternation: Alternation\r\n): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, alternation, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const alts = map(alternation.definition, (e) => atom(atn, rule, e))\r\n    const handle = makeAlts(atn, rule, start, alternation, ...alts)\r\n    return handle\r\n}\r\n\r\nfunction option(atn: ATN, rule: Rule, option: Option): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, option, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const handle = makeAlts(atn, rule, start, option, block(atn, rule, option))\r\n    return optional(atn, rule, option, handle)\r\n}\r\n\r\nfunction block(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    block: { definition: IProduction[] }\r\n): ATNHandle | undefined {\r\n    const handles = filter(\r\n        map(block.definition, (e) => atom(atn, rule, e)),\r\n        (e) => e !== undefined\r\n    ) as ATNHandle[]\r\n    if (handles.length === 1) {\r\n        return handles[0]\r\n    } else if (handles.length === 0) {\r\n        return undefined\r\n    } else {\r\n        return makeBlock(atn, handles)\r\n    }\r\n}\r\n\r\nfunction plus(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    plus: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const blkStart = handle.left as PlusBlockStartState\r\n    const blkEnd = handle.right\r\n\r\n    const loop = newState<PlusLoopbackState>(atn, rule, plus, {\r\n        type: ATN_PLUS_LOOP_BACK\r\n    })\r\n    defineDecisionState(atn, loop)\r\n    const end = newState<LoopEndState>(atn, rule, plus, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    blkStart.loopback = loop\r\n    end.loopback = loop\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionMandatoryWithSeparator' : 'RepetitionMandatory', plus.idx)] = loop;\r\n    epsilon(blkEnd, loop) // block can see loop back\r\n\r\n    // Depending on whether we have a separator we put the exit transition at index 1 or 0\r\n    // This influences the chosen option in the lookahead DFA\r\n    if (sep === undefined) {\r\n        epsilon(loop, blkStart) // loop back to start\r\n        epsilon(loop, end) // exit\r\n    } else {\r\n        epsilon(loop, end) // exit\r\n        // loop back to start with separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, blkStart)\r\n    }\r\n\r\n    return {\r\n        left: blkStart,\r\n        right: end\r\n    }\r\n}\r\n\r\nfunction star(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    star: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const start = handle.left\r\n    const end = handle.right\r\n\r\n    const entry = newState<StarLoopEntryState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_ENTRY\r\n    })\r\n    defineDecisionState(atn, entry)\r\n    const loopEnd = newState<LoopEndState>(atn, rule, star, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    const loop = newState<StarLoopbackState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_BACK\r\n    })\r\n    entry.loopback = loop\r\n    loopEnd.loopback = loop\r\n\r\n    epsilon(entry, start) // loop enter edge (alt 2)\r\n    epsilon(entry, loopEnd) // bypass loop edge (alt 1)\r\n    epsilon(end, loop) // block end hits loop back\r\n\r\n    if (sep !== undefined) {\r\n        epsilon(loop, loopEnd) // end loop\r\n        // loop back to start of handle using separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, start)\r\n    } else {\r\n        epsilon(loop, entry) // loop back to entry/exit decision\r\n    }\r\n\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionWithSeparator' : 'Repetition', star.idx)] = entry;\r\n    return {\r\n        left: entry,\r\n        right: loopEnd\r\n    }\r\n}\r\n\r\nfunction optional(atn: ATN, rule: Rule, optional: Option, handle: ATNHandle): ATNHandle {\r\n    const start = handle.left as DecisionState\r\n    const end = handle.right\r\n\r\n    epsilon(start, end)\r\n\r\n    atn.decisionMap[buildATNKey(rule, 'Option', optional.idx)] = start;\r\n    return handle\r\n}\r\n\r\nfunction defineDecisionState(atn: ATN, state: DecisionState): number {\r\n    atn.decisionStates.push(state)\r\n    state.decision = atn.decisionStates.length - 1\r\n    return state.decision\r\n}\r\n\r\nfunction makeAlts(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    start: BlockStartState,\r\n    production: IProductionWithOccurrence,\r\n    ...alts: (ATNHandle | undefined)[]\r\n): ATNHandle {\r\n    const end = newState<BlockEndState>(atn, rule, production, {\r\n        type: ATN_BLOCK_END,\r\n        start\r\n    })\r\n    start.end = end\r\n    for (const alt of alts) {\r\n        if (alt !== undefined) {\r\n            // hook alts up to decision block\r\n            epsilon(start, alt.left)\r\n            epsilon(alt.right, end)\r\n        } else {\r\n            epsilon(start, end)\r\n        }\r\n    }\r\n\r\n    const handle: ATNHandle = {\r\n        left: start as ATNState,\r\n        right: end\r\n    }\r\n    atn.decisionMap[buildATNKey(rule, getProdType(production), production.idx)] = start\r\n    return handle\r\n}\r\n\r\nfunction getProdType(production: IProduction): LookaheadProductionType {\r\n    if (production instanceof Alternation) {\r\n        return 'Alternation';\r\n    } else if (production instanceof Option) {\r\n        return 'Option';\r\n    } else if (production instanceof Repetition) {\r\n        return 'Repetition';\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return 'RepetitionWithSeparator';\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return 'RepetitionMandatory';\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return 'RepetitionMandatoryWithSeparator';\r\n    } else {\r\n        throw new Error('Invalid production type encountered');\r\n    }\r\n}\r\n\r\nfunction makeBlock(atn: ATN, alts: ATNHandle[]): ATNHandle {\r\n    const altsLength = alts.length\r\n    for (let i = 0; i < altsLength - 1; i++) {\r\n        const handle = alts[i]\r\n        let transition: Transition | undefined\r\n        if (handle.left.transitions.length === 1) {\r\n            transition = handle.left.transitions[0]\r\n        }\r\n        const isRuleTransition = transition instanceof RuleTransition\r\n        const ruleTransition = transition as RuleTransition\r\n        const next = alts[i + 1].left\r\n        if (\r\n            handle.left.type === ATN_BASIC &&\r\n            handle.right.type === ATN_BASIC &&\r\n            transition !== undefined &&\r\n            ((isRuleTransition && ruleTransition.followState === handle.right) ||\r\n                transition.target === handle.right)\r\n        ) {\r\n            // we can avoid epsilon edge to next element\r\n            if (isRuleTransition) {\r\n                ruleTransition.followState = next\r\n            } else {\r\n                transition.target = next\r\n            }\r\n            removeState(atn, handle.right) // we skipped over this state\r\n        } else {\r\n            // need epsilon if previous block's right end node is complex\r\n            epsilon(handle.right, next)\r\n        }\r\n    }\r\n\r\n    const first = alts[0]\r\n    const last = alts[altsLength - 1]\r\n    return {\r\n        left: first.left,\r\n        right: last.right\r\n    }\r\n}\r\n\r\nfunction tokenRef(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    tokenType: TokenType,\r\n    production: IProductionWithOccurrence\r\n): ATNHandle {\r\n    const left = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    addTransition(left, new AtomTransition(right, tokenType))\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction ruleRef(\r\n    atn: ATN,\r\n    currentRule: Rule,\r\n    nonTerminal: NonTerminal\r\n): ATNHandle {\r\n    const rule = nonTerminal.referencedRule\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    const left = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n\r\n    const call = new RuleTransition(start, rule, right)\r\n    addTransition(left, call)\r\n\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction buildRuleHandle(atn: ATN, rule: Rule, block: ATNHandle): ATNHandle {\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    epsilon(start, block.left)\r\n    const stop = atn.ruleToStopState.get(rule)!\r\n    epsilon(block.right, stop)\r\n    const handle: ATNHandle = {\r\n        left: start,\r\n        right: stop\r\n    }\r\n    return handle\r\n}\r\n\r\nfunction epsilon(a: ATNBaseState, b: ATNBaseState): void {\r\n    const transition = new EpsilonTransition(b as ATNState)\r\n    addTransition(a, transition)\r\n}\r\n\r\nfunction newState<T extends ATNState>(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProductionWithOccurrence | undefined,\r\n    partial: Partial<T>\r\n): T {\r\n    const t: T = {\r\n        atn,\r\n        production,\r\n        epsilonOnlyTransitions: false,\r\n        rule,\r\n        transitions: [],\r\n        nextTokenWithinRule: [],\r\n        stateNumber: atn.states.length,\r\n        ...partial\r\n    } as unknown as T\r\n    atn.states.push(t)\r\n    return t\r\n}\r\n\r\nfunction addTransition(state: ATNBaseState, transition: Transition) {\r\n    // A single ATN state can only contain epsilon transitions or non-epsilon transitions\r\n    // Because they are never mixed, only setting the property for the first transition is fine\r\n    if (state.transitions.length === 0) {\r\n        state.epsilonOnlyTransitions = transition.isEpsilon()\r\n    }\r\n    state.transitions.push(transition)\r\n}\r\n\r\nfunction removeState(atn: ATN, state: ATNState): void {\r\n    atn.states.splice(atn.states.indexOf(state), 1)\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport { ATNState, DecisionState } from \"./atn.js\"\r\n\r\nexport interface DFA {\r\n  start?: DFAState\r\n  states: Record<string, DFAState>\r\n  decision: number\r\n  atnStartState: DecisionState\r\n}\r\n\r\nexport interface DFAState {\r\n  configs: ATNConfigSet\r\n  edges: Record<number, DFAState>\r\n  isAcceptState: boolean\r\n  prediction: number\r\n}\r\n\r\nexport const DFA_ERROR = {} as DFAState\r\n\r\nexport interface ATNConfig {\r\n  state: ATNState\r\n  alt: number\r\n  stack: ATNState[]\r\n}\r\n\r\nexport class ATNConfigSet {\r\n  private map: Record<string, number> = {}\r\n  private configs: ATNConfig[] = []\r\n\r\n  uniqueAlt: number | undefined\r\n\r\n  get size(): number {\r\n    return this.configs.length\r\n  }\r\n\r\n  finalize(): void {\r\n    // Empties the map to free up memory\r\n    this.map = {}\r\n  }\r\n\r\n  add(config: ATNConfig): void {\r\n    const key = getATNConfigKey(config)\r\n    // Only add configs which don't exist in our map already\r\n    // While this does not influence the actual algorithm, adding them anyway would massively increase memory consumption\r\n    if (!(key in this.map)) {\r\n      this.map[key] = this.configs.length\r\n      this.configs.push(config)\r\n    }\r\n  }\r\n\r\n  get elements(): readonly ATNConfig[] {\r\n    return this.configs\r\n  }\r\n\r\n  get alts(): number[] {\r\n    return map(this.configs, (e) => e.alt)\r\n  }\r\n\r\n  get key(): string {\r\n    let value = \"\"\r\n    for (const k in this.map) {\r\n      value += k + \":\"\r\n    }\r\n    return value\r\n  }\r\n}\r\n\r\nexport function getATNConfigKey(config: ATNConfig, alt = true) {\r\n  return `${alt ? `a${config.alt}` : \"\"}s${\r\n    config.state.stateNumber\r\n  }:${config.stack.map((e) => e.stateNumber.toString()).join(\"_\")}`\r\n}\r\n","import baseIteratee from './_baseIteratee.js';\nimport baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nexport default uniqBy;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport {\r\n    IToken,\r\n    TokenType,\r\n    tokenMatcher,\r\n    tokenLabel,\r\n    Rule,\r\n    IProductionWithOccurrence,\r\n    NonTerminal,\r\n    Alternation,\r\n    Option,\r\n    RepetitionMandatory,\r\n    RepetitionMandatoryWithSeparator,\r\n    RepetitionWithSeparator,\r\n    Repetition,\r\n    Terminal,\r\n    BaseParser,\r\n    LLkLookaheadStrategy,\r\n    ILookaheadValidationError,\r\n    IOrAlt,\r\n    getLookaheadPaths,\r\n    OptionalProductionType\r\n} from \"chevrotain\";\r\nimport {\r\n    ATN,\r\n    ATNState,\r\n    ATN_RULE_STOP,\r\n    AtomTransition,\r\n    buildATNKey,\r\n    createATN,\r\n    DecisionState,\r\n    EpsilonTransition,\r\n    RuleTransition,\r\n    Transition\r\n} from \"./atn.js\";\r\nimport {\r\n    ATNConfig,\r\n    ATNConfigSet,\r\n    DFA,\r\n    DFAState,\r\n    DFA_ERROR,\r\n    getATNConfigKey\r\n} from \"./dfa.js\";\r\nimport min from \"lodash-es/min.js\";\r\nimport flatMap from \"lodash-es/flatMap.js\";\r\nimport uniqBy from \"lodash-es/uniqBy.js\";\r\nimport map from \"lodash-es/map.js\";\r\nimport flatten from \"lodash-es/flatten.js\";\r\nimport forEach from \"lodash-es/forEach.js\";\r\nimport isEmpty from \"lodash-es/isEmpty.js\";\r\nimport reduce from \"lodash-es/reduce.js\";\r\n\r\ntype DFACache = (predicateSet: PredicateSet) => DFA\r\n\r\nexport type AmbiguityReport = (message: string) => void;\r\n\r\nfunction createDFACache(startState: DecisionState, decision: number): DFACache {\r\n    const map: Record<string, DFA | undefined> = {}\r\n    return (predicateSet) => {\r\n        const key = predicateSet.toString()\r\n        let existing = map[key]\r\n        if (existing !== undefined) {\r\n            return existing\r\n        } else {\r\n            existing = {\r\n                atnStartState: startState,\r\n                decision,\r\n                states: {}\r\n            }\r\n            map[key] = existing\r\n            return existing\r\n        }\r\n    }\r\n}\r\n\r\nclass PredicateSet {\r\n    private predicates: boolean[] = []\r\n\r\n    is(index: number): boolean {\r\n        return index >= this.predicates.length || this.predicates[index]\r\n    }\r\n\r\n    set(index: number, value: boolean) {\r\n        this.predicates[index] = value\r\n    }\r\n\r\n    toString(): string {\r\n        let value = \"\"\r\n        const size = this.predicates.length\r\n        for (let i = 0; i < size; i++) {\r\n            value += this.predicates[i] === true ? \"1\" : \"0\"\r\n        }\r\n        return value\r\n    }\r\n}\r\n\r\ninterface AdaptivePredictError {\r\n    tokenPath: IToken[]\r\n    possibleTokenTypes: TokenType[]\r\n    actualToken: IToken\r\n}\r\n\r\nconst EMPTY_PREDICATES = new PredicateSet()\r\n\r\nexport interface LLStarLookaheadOptions {\r\n    logging?: AmbiguityReport\r\n}\r\n\r\nexport class LLStarLookaheadStrategy extends LLkLookaheadStrategy {\r\n\r\n    private atn: ATN;\r\n    private dfas: DFACache[];\r\n    private logging: AmbiguityReport;\r\n\r\n    constructor(options?: LLStarLookaheadOptions) {\r\n        super();\r\n        this.logging = options?.logging ?? ((message) => console.log(message));\r\n    }\r\n\r\n    override initialize(options: { rules: Rule[] }): void {\r\n        this.atn = createATN(options.rules);\r\n        this.dfas = initATNSimulator(this.atn);\r\n    }\r\n\r\n    override validateAmbiguousAlternationAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override validateEmptyOrAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override buildLookaheadForAlternation(options: {\r\n        prodOccurrence: number;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        hasPredicates: boolean;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser, orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\r\n        const { prodOccurrence, rule, hasPredicates, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, 'Alternation', prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const partialAlts: (TokenType | undefined)[][] = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType: \"Alternation\",\r\n                rule: rule\r\n            }),\r\n            (currAlt) => map(currAlt, (path) => path[0])\r\n        )\r\n\r\n        if (isLL1Sequence(partialAlts, false) && !dynamicTokensEnabled) {\r\n            const choiceToAlt = reduce(\r\n                partialAlts,\r\n                (result, currAlt, idx) => {\r\n                    forEach(currAlt, (currTokType) => {\r\n                        if (currTokType) {\r\n                            result[currTokType.tokenTypeIdx!] = idx\r\n                            forEach(currTokType.categoryMatches!, (currExtendingType) => {\r\n                                result[currExtendingType] = idx\r\n                            })\r\n                        }\r\n                    })\r\n                    return result\r\n                },\r\n                {} as Record<number, number>\r\n            )\r\n\r\n            if (hasPredicates) {\r\n                return function (this: BaseParser, orAlts) {\r\n                    const nextToken = this.LA(1)\r\n                    const prediction: number | undefined = choiceToAlt[nextToken.tokenTypeIdx]\r\n                    if (orAlts !== undefined && prediction !== undefined) {\r\n                        const gate = orAlts[prediction]?.GATE\r\n                        if (gate !== undefined && gate.call(this) === false) {\r\n                            return undefined;\r\n                        }\r\n                    }\r\n                    return prediction\r\n                }\r\n            } else {\r\n                return function (this: BaseParser): number | undefined {\r\n                    const nextToken = this.LA(1)\r\n                    return choiceToAlt[nextToken.tokenTypeIdx];\r\n                }\r\n            }\r\n        } else if (hasPredicates) {\r\n            return function (this: BaseParser, orAlts) {\r\n                const predicates = new PredicateSet()\r\n                const length = orAlts === undefined ? 0 : orAlts.length\r\n                for (let i = 0; i < length; i++) {\r\n                    const gate = orAlts?.[i].GATE\r\n                    predicates.set(i, gate === undefined || gate.call(this))\r\n                }\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, predicates, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        } else {\r\n            return function (this: BaseParser) {\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    override buildLookaheadForOptional(options: {\r\n        prodOccurrence: number;\r\n        prodType: OptionalProductionType;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser) => boolean {\r\n        const { prodOccurrence, rule, prodType, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, prodType, prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const alts = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType,\r\n                rule\r\n            }),\r\n            (e) => {\r\n              return map(e, (g) => g[0])\r\n            }\r\n          )\r\n        \r\n          if (isLL1Sequence(alts) && alts[0][0] && !dynamicTokensEnabled) {\r\n            const alt = alts[0]\r\n            const singleTokensTypes = flatten(alt)\r\n        \r\n            if (\r\n              singleTokensTypes.length === 1 &&\r\n              isEmpty(singleTokensTypes[0].categoryMatches)\r\n            ) {\r\n              const expectedTokenType = singleTokensTypes[0]\r\n              const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey\r\n              }\r\n            } else {\r\n              const choiceToAlt = reduce(\r\n                singleTokensTypes,\r\n                (result, currTokType) => {\r\n                  if (currTokType !== undefined) {\r\n                    result[currTokType.tokenTypeIdx!] = true\r\n                    forEach(currTokType.categoryMatches, (currExtendingType) => {\r\n                      result[currExtendingType] = true\r\n                    })\r\n                  }\r\n                  return result\r\n                },\r\n                {} as Record<number, boolean>\r\n              )\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                const nextToken = this.LA(1)\r\n                return choiceToAlt[nextToken.tokenTypeIdx] === true\r\n              }\r\n            }\r\n          }\r\n          return function (this: BaseParser) {\r\n            const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging)\r\n              return typeof result === \"object\" ? false : result === 0;\r\n          }\r\n    }\r\n\r\n}\r\n\r\nfunction isLL1Sequence(sequences: (TokenType | undefined)[][], allowEmpty = true): boolean {\r\n    const fullSet = new Set<number>()\r\n\r\n    for (const alt of sequences) {\r\n        const altSet = new Set<number>()\r\n        for (const tokType of alt) {\r\n            if (tokType === undefined) {\r\n                if (allowEmpty) {\r\n                    // Epsilon production encountered\r\n                    break\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            const indices = [tokType.tokenTypeIdx!].concat(tokType.categoryMatches!)\r\n            for (const index of indices) {\r\n                if (fullSet.has(index)) {\r\n                    if (!altSet.has(index)) {\r\n                        return false\r\n                    }\r\n                } else {\r\n                    fullSet.add(index)\r\n                    altSet.add(index)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction initATNSimulator(atn: ATN): DFACache[] {\r\n    const decisionLength = atn.decisionStates.length\r\n    const decisionToDFA: DFACache[] = Array(decisionLength)\r\n    for (let i = 0; i < decisionLength; i++) {\r\n        decisionToDFA[i] = createDFACache(atn.decisionStates[i], i)\r\n    }\r\n    return decisionToDFA;\r\n}\r\n\r\nfunction adaptivePredict(\r\n    this: BaseParser,\r\n    dfaCaches: DFACache[],\r\n    decision: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    const dfa = dfaCaches[decision](predicateSet)\r\n    let start = dfa.start\r\n    if (start === undefined) {\r\n        const closure = computeStartState(dfa.atnStartState as ATNState)\r\n        start = addDFAState(dfa, newDFAState(closure))\r\n        dfa.start = start\r\n    }\r\n\r\n    const alt = performLookahead.apply(this, [dfa, start, predicateSet, logging])\r\n    return alt\r\n}\r\n\r\nfunction performLookahead(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    s0: DFAState,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    let previousD = s0\r\n\r\n    let i = 1\r\n    const path: IToken[] = []\r\n    let t = this.LA(i++)\r\n\r\n    while (true) {\r\n        let d = getExistingTargetState(previousD, t)\r\n        if (d === undefined) {\r\n            d = computeLookaheadTarget.apply(this, [dfa, previousD, t, i, predicateSet, logging])\r\n        }\r\n\r\n        if (d === DFA_ERROR) {\r\n            return buildAdaptivePredictError(path, previousD, t)\r\n        }\r\n\r\n        if (d.isAcceptState === true) {\r\n            return d.prediction\r\n        }\r\n\r\n        previousD = d\r\n        path.push(t)\r\n        t = this.LA(i++)\r\n    }\r\n}\r\n\r\nfunction computeLookaheadTarget(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    previousD: DFAState,\r\n    token: IToken,\r\n    lookahead: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): DFAState {\r\n    const reach = computeReachSet(previousD.configs, token, predicateSet)\r\n    if (reach.size === 0) {\r\n        addDFAEdge(dfa, previousD, token, DFA_ERROR)\r\n        return DFA_ERROR\r\n    }\r\n\r\n    let newState = newDFAState(reach)\r\n    const predictedAlt = getUniqueAlt(reach, predicateSet)\r\n\r\n    if (predictedAlt !== undefined) {\r\n        newState.isAcceptState = true\r\n        newState.prediction = predictedAlt\r\n        newState.configs.uniqueAlt = predictedAlt\r\n    } else if (hasConflictTerminatingPrediction(reach)) {\r\n        const prediction = min(reach.alts)!\r\n        newState.isAcceptState = true\r\n        newState.prediction = prediction\r\n        newState.configs.uniqueAlt = prediction\r\n        reportLookaheadAmbiguity.apply(this, [dfa, lookahead, reach.alts, logging])\r\n    }\r\n\r\n    newState = addDFAEdge(dfa, previousD, token, newState)\r\n    return newState\r\n}\r\n\r\nfunction reportLookaheadAmbiguity(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    lookahead: number,\r\n    ambiguityIndices: number[],\r\n    logging: AmbiguityReport\r\n) {\r\n    const prefixPath: TokenType[] = []\r\n    for (let i = 1; i <= lookahead; i++) {\r\n        prefixPath.push(this.LA(i).tokenType)\r\n    }\r\n    const atnState = dfa.atnStartState\r\n    const topLevelRule = atnState.rule\r\n    const production = atnState.production\r\n    const message = buildAmbiguityError({\r\n        topLevelRule,\r\n        ambiguityIndices,\r\n        production,\r\n        prefixPath\r\n    })\r\n    logging(message)\r\n}\r\n\r\nfunction buildAmbiguityError(options: {\r\n    topLevelRule: Rule\r\n    prefixPath: TokenType[]\r\n    ambiguityIndices: number[]\r\n    production: IProductionWithOccurrence\r\n}): string {\r\n    const pathMsg = map(options.prefixPath, (currtok) =>\r\n        tokenLabel(currtok)\r\n    ).join(\", \")\r\n    const occurrence =\r\n        options.production.idx === 0 ? \"\" : options.production.idx\r\n    let currMessage =\r\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\r\n            \", \"\r\n        )}> in <${getProductionDslName(options.production)}${occurrence}>` +\r\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\r\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`\r\n\r\n    currMessage =\r\n        currMessage +\r\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\r\n        `For Further details.`\r\n    return currMessage\r\n}\r\n\r\nfunction getProductionDslName(prod: IProductionWithOccurrence): string {\r\n    if (prod instanceof NonTerminal) {\r\n        return \"SUBRULE\"\r\n    } else if (prod instanceof Option) {\r\n        return \"OPTION\"\r\n    } else if (prod instanceof Alternation) {\r\n        return \"OR\"\r\n    } else if (prod instanceof RepetitionMandatory) {\r\n        return \"AT_LEAST_ONE\"\r\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\r\n        return \"AT_LEAST_ONE_SEP\"\r\n    } else if (prod instanceof RepetitionWithSeparator) {\r\n        return \"MANY_SEP\"\r\n    } else if (prod instanceof Repetition) {\r\n        return \"MANY\"\r\n    } else if (prod instanceof Terminal) {\r\n        return \"CONSUME\"\r\n    } else {\r\n        throw Error(\"non exhaustive match\")\r\n    }\r\n}\r\n\r\nfunction buildAdaptivePredictError(\r\n    path: IToken[],\r\n    previous: DFAState,\r\n    current: IToken\r\n): AdaptivePredictError {\r\n    const nextTransitions = flatMap(\r\n        previous.configs.elements,\r\n        (e) => e.state.transitions\r\n    )\r\n    const nextTokenTypes = uniqBy(\r\n        nextTransitions\r\n            .filter((e): e is AtomTransition => e instanceof AtomTransition)\r\n            .map((e) => e.tokenType),\r\n        (e) => e.tokenTypeIdx\r\n    )\r\n    return {\r\n        actualToken: current,\r\n        possibleTokenTypes: nextTokenTypes,\r\n        tokenPath: path\r\n    }\r\n}\r\n\r\nfunction getExistingTargetState(\r\n    state: DFAState,\r\n    token: IToken\r\n): DFAState | undefined {\r\n    return state.edges[token.tokenTypeIdx]\r\n}\r\n\r\nfunction computeReachSet(\r\n    configs: ATNConfigSet,\r\n    token: IToken,\r\n    predicateSet: PredicateSet\r\n): ATNConfigSet {\r\n    const intermediate = new ATNConfigSet()\r\n    const skippedStopStates: ATNConfig[] = []\r\n\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === false) {\r\n            continue\r\n        }\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            skippedStopStates.push(c)\r\n            continue\r\n        }\r\n        const transitionLength = c.state.transitions.length\r\n        for (let i = 0; i < transitionLength; i++) {\r\n            const transition = c.state.transitions[i]\r\n            const target = getReachableTarget(transition, token)\r\n            if (target !== undefined) {\r\n                intermediate.add({\r\n                    state: target,\r\n                    alt: c.alt,\r\n                    stack: c.stack\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let reach: ATNConfigSet | undefined\r\n\r\n    if (skippedStopStates.length === 0 && intermediate.size === 1) {\r\n        reach = intermediate\r\n    }\r\n\r\n    if (reach === undefined) {\r\n        reach = new ATNConfigSet()\r\n        for (const c of intermediate.elements) {\r\n            closure(c, reach)\r\n        }\r\n    }\r\n\r\n    if (skippedStopStates.length > 0 && !hasConfigInRuleStopState(reach)) {\r\n        for (const c of skippedStopStates) {\r\n            reach.add(c)\r\n        }\r\n    }\r\n\r\n    return reach\r\n}\r\n\r\nfunction getReachableTarget(\r\n    transition: Transition,\r\n    token: IToken\r\n): ATNState | undefined {\r\n    if (\r\n        transition instanceof AtomTransition &&\r\n        tokenMatcher(token, transition.tokenType)\r\n    ) {\r\n        return transition.target\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction getUniqueAlt(\r\n    configs: ATNConfigSet,\r\n    predicateSet: PredicateSet\r\n): number | undefined {\r\n    let alt: number | undefined\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === true) {\r\n            if (alt === undefined) {\r\n                alt = c.alt\r\n            } else if (alt !== c.alt) {\r\n                return undefined\r\n            }\r\n        }\r\n    }\r\n    return alt\r\n}\r\n\r\nfunction newDFAState(closure: ATNConfigSet): DFAState {\r\n    return {\r\n        configs: closure,\r\n        edges: {},\r\n        isAcceptState: false,\r\n        prediction: -1\r\n    }\r\n}\r\n\r\nfunction addDFAEdge(\r\n    dfa: DFA,\r\n    from: DFAState,\r\n    token: IToken,\r\n    to: DFAState\r\n): DFAState {\r\n    to = addDFAState(dfa, to)\r\n    from.edges[token.tokenTypeIdx] = to\r\n    return to\r\n}\r\n\r\nfunction addDFAState(dfa: DFA, state: DFAState): DFAState {\r\n    if (state === DFA_ERROR) {\r\n        return state\r\n    }\r\n    // Repetitions have the same config set\r\n    // Therefore, storing the key of the config in a map allows us to create a loop in our DFA\r\n    const mapKey = state.configs.key\r\n    const existing = dfa.states[mapKey]\r\n    if (existing !== undefined) {\r\n        return existing\r\n    }\r\n    state.configs.finalize()\r\n    dfa.states[mapKey] = state\r\n    return state\r\n}\r\n\r\nfunction computeStartState(atnState: ATNState): ATNConfigSet {\r\n    const configs = new ATNConfigSet()\r\n\r\n    const numberOfTransitions = atnState.transitions.length\r\n    for (let i = 0; i < numberOfTransitions; i++) {\r\n        const target = atnState.transitions[i].target\r\n        const config: ATNConfig = {\r\n            state: target,\r\n            alt: i,\r\n            stack: []\r\n        }\r\n        closure(config, configs)\r\n    }\r\n\r\n    return configs\r\n}\r\n\r\nfunction closure(config: ATNConfig, configs: ATNConfigSet): void {\r\n    const p = config.state\r\n\r\n    if (p.type === ATN_RULE_STOP) {\r\n        if (config.stack.length > 0) {\r\n            const atnStack = [...config.stack]\r\n            const followState = atnStack.pop()!\r\n            const followConfig: ATNConfig = {\r\n                state: followState,\r\n                alt: config.alt,\r\n                stack: atnStack\r\n            }\r\n            closure(followConfig, configs)\r\n        } else {\r\n            // Dipping into outer context, simply add the config\r\n            // This will stop computation once every config is at the rule stop state\r\n            configs.add(config)\r\n        }\r\n        return\r\n    }\r\n\r\n    if (!p.epsilonOnlyTransitions) {\r\n        configs.add(config)\r\n    }\r\n\r\n    const transitionLength = p.transitions.length\r\n    for (let i = 0; i < transitionLength; i++) {\r\n        const transition = p.transitions[i]\r\n        const c = getEpsilonTarget(config, transition)\r\n\r\n        if (c !== undefined) {\r\n            closure(c, configs)\r\n        }\r\n    }\r\n}\r\n\r\nfunction getEpsilonTarget(\r\n    config: ATNConfig,\r\n    transition: Transition\r\n): ATNConfig | undefined {\r\n    if (transition instanceof EpsilonTransition) {\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack: config.stack\r\n        }\r\n    } else if (transition instanceof RuleTransition) {\r\n        const stack = [...config.stack, transition.followState]\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack\r\n        }\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction hasConfigInRuleStopState(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction allConfigsInRuleStopStates(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type !== ATN_RULE_STOP) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction hasConflictTerminatingPrediction(configs: ATNConfigSet): boolean {\r\n    if (allConfigsInRuleStopStates(configs)) {\r\n        return true\r\n    }\r\n    const altSets = getConflictingAltSets(configs.elements)\r\n    const heuristic =\r\n        hasConflictingAltSet(altSets) && !hasStateAssociatedWithOneAlt(altSets)\r\n    return heuristic\r\n}\r\n\r\nfunction getConflictingAltSets(\r\n    configs: readonly ATNConfig[]\r\n): Map<string, Record<number, boolean>> {\r\n    const configToAlts = new Map<string, Record<number, boolean>>()\r\n    for (const c of configs) {\r\n        const key = getATNConfigKey(c, false)\r\n        let alts = configToAlts.get(key)\r\n        if (alts === undefined) {\r\n            alts = {}\r\n            configToAlts.set(key, alts)\r\n        }\r\n        alts[c.alt] = true\r\n    }\r\n    return configToAlts\r\n}\r\n\r\nfunction hasConflictingAltSet(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length > 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction hasStateAssociatedWithOneAlt(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length === 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nexport var DocumentUri;\n(function (DocumentUri) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    DocumentUri.is = is;\n})(DocumentUri || (DocumentUri = {}));\nexport var URI;\n(function (URI) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    URI.is = is;\n})(URI || (URI = {}));\nexport var integer;\n(function (integer) {\n    integer.MIN_VALUE = -2147483648;\n    integer.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;\n    }\n    integer.is = is;\n})(integer || (integer = {}));\nexport var uinteger;\n(function (uinteger) {\n    uinteger.MIN_VALUE = 0;\n    uinteger.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;\n    }\n    uinteger.is = is;\n})(uinteger || (uinteger = {}));\n/**\n * The Position namespace provides helper functions to work with\n * {@link Position} literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        if (line === Number.MAX_VALUE) {\n            line = uinteger.MAX_VALUE;\n        }\n        if (character === Number.MAX_VALUE) {\n            character = uinteger.MAX_VALUE;\n        }\n        return { line, character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Position} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * {@link Range} literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Range} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * {@link Location} literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri, range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Location} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The LocationLink namespace provides helper functions to work with\n * {@link LocationLink} literals.\n */\nexport var LocationLink;\n(function (LocationLink) {\n    /**\n     * Creates a LocationLink literal.\n     * @param targetUri The definition's uri.\n     * @param targetRange The full range of the definition.\n     * @param targetSelectionRange The span of the symbol definition at the target.\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\n     */\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\n    }\n    LocationLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link LocationLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\n            && Range.is(candidate.targetSelectionRange)\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n    }\n    LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link Color} literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red,\n            green,\n            blue,\n            alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Color} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)\n            && Is.numberRange(candidate.green, 0, 1)\n            && Is.numberRange(candidate.blue, 0, 1)\n            && Is.numberRange(candidate.alpha, 0, 1);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * {@link ColorInformation} literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range,\n            color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link ColorPresentation} literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label,\n            textEdit,\n            additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * A set of predefined range kinds.\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind.Comment = 'comment';\n    /**\n     * Folding range for an import or include\n     */\n    FoldingRangeKind.Imports = 'imports';\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind.Region = 'region';\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * {@link FoldingRange} literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\n        const result = {\n            startLine,\n            endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        if (Is.defined(collapsedText)) {\n            result.collapsedText = collapsedText;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FoldingRange} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * {@link DiagnosticRelatedInformation} literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location,\n            message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The diagnostic tags.\n *\n * @since 3.15.0\n */\nexport var DiagnosticTag;\n(function (DiagnosticTag) {\n    /**\n     * Unused or unnecessary code.\n     *\n     * Clients are allowed to render diagnostics with this tag faded out instead of having\n     * an error squiggle.\n     */\n    DiagnosticTag.Unnecessary = 1;\n    /**\n     * Deprecated or obsolete code.\n     *\n     * Clients are allowed to rendered diagnostics with this tag strike through.\n     */\n    DiagnosticTag.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\n/**\n * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.\n *\n * @since 3.16.0\n */\nexport var CodeDescription;\n(function (CodeDescription) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.href);\n    }\n    CodeDescription.is = is;\n})(CodeDescription || (CodeDescription = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * {@link Diagnostic} literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        let result = { range, message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Diagnostic} interface.\n     */\n    function is(value) {\n        var _a;\n        let candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * {@link Command} literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command, ...args) {\n        let result = { title, command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Command} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range, newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates an insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\nexport var ChangeAnnotation;\n(function (ChangeAnnotation) {\n    function create(label, needsConfirmation, description) {\n        const result = { label };\n        if (needsConfirmation !== undefined) {\n            result.needsConfirmation = needsConfirmation;\n        }\n        if (description !== undefined) {\n            result.description = description;\n        }\n        return result;\n    }\n    ChangeAnnotation.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&\n            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    ChangeAnnotation.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nexport var ChangeAnnotationIdentifier;\n(function (ChangeAnnotationIdentifier) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate);\n    }\n    ChangeAnnotationIdentifier.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nexport var AnnotatedTextEdit;\n(function (AnnotatedTextEdit) {\n    /**\n     * Creates an annotated replace text edit.\n     *\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     * @param annotation The annotation.\n     */\n    function replace(range, newText, annotation) {\n        return { range, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.replace = replace;\n    /**\n     * Creates an annotated insert text edit.\n     *\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     * @param annotation The annotation.\n     */\n    function insert(position, newText, annotation) {\n        return { range: { start: position, end: position }, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.insert = insert;\n    /**\n     * Creates an annotated delete text edit.\n     *\n     * @param range The range of text to be deleted.\n     * @param annotation The annotation.\n     */\n    function del(range, annotation) {\n        return { range, newText: '', annotationId: annotation };\n    }\n    AnnotatedTextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    AnnotatedTextEdit.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument, edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate)\n            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var CreateFile;\n(function (CreateFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'create',\n            uri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    CreateFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\nexport var RenameFile;\n(function (RenameFile) {\n    function create(oldUri, newUri, options, annotation) {\n        let result = {\n            kind: 'rename',\n            oldUri,\n            newUri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    RenameFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\nexport var DeleteFile;\n(function (DeleteFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'delete',\n            uri\n        };\n        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    DeleteFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&\n            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {\n                if (Is.string(change.kind)) {\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n                }\n                else {\n                    return TextDocumentEdit.is(change);\n                }\n            }));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nclass TextEditChangeImpl {\n    constructor(edits, changeAnnotations) {\n        this.edits = edits;\n        this.changeAnnotations = changeAnnotations;\n    }\n    insert(position, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.insert(position, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.insert(position, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.insert(position, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    replace(range, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.replace(range, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.replace(range, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.replace(range, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    delete(range, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.del(range);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.del(range, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.del(range, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    add(edit) {\n        this.edits.push(edit);\n    }\n    all() {\n        return this.edits;\n    }\n    clear() {\n        this.edits.splice(0, this.edits.length);\n    }\n    assertChangeAnnotations(value) {\n        if (value === undefined) {\n            throw new Error(`Text edit change is not configured to manage change annotations.`);\n        }\n    }\n}\n/**\n * A helper class\n */\nclass ChangeAnnotations {\n    constructor(annotations) {\n        this._annotations = annotations === undefined ? Object.create(null) : annotations;\n        this._counter = 0;\n        this._size = 0;\n    }\n    all() {\n        return this._annotations;\n    }\n    get size() {\n        return this._size;\n    }\n    manage(idOrAnnotation, annotation) {\n        let id;\n        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {\n            id = idOrAnnotation;\n        }\n        else {\n            id = this.nextId();\n            annotation = idOrAnnotation;\n        }\n        if (this._annotations[id] !== undefined) {\n            throw new Error(`Id ${id} is already in use.`);\n        }\n        if (annotation === undefined) {\n            throw new Error(`No annotation provided for id ${id}`);\n        }\n        this._annotations[id] = annotation;\n        this._size++;\n        return id;\n    }\n    nextId() {\n        this._counter++;\n        return this._counter.toString();\n    }\n}\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nexport class WorkspaceChange {\n    constructor(workspaceEdit) {\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit !== undefined) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);\n                workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                workspaceEdit.documentChanges.forEach((change) => {\n                    if (TextDocumentEdit.is(change)) {\n                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);\n                        this._textEditChanges[change.textDocument.uri] = textEditChange;\n                    }\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach((key) => {\n                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n        else {\n            this._workspaceEdit = {};\n        }\n    }\n    /**\n     * Returns the underlying {@link WorkspaceEdit} literal\n     * use to be returned from a workspace edit operation like rename.\n     */\n    get edit() {\n        this.initDocumentChanges();\n        if (this._changeAnnotations !== undefined) {\n            if (this._changeAnnotations.size === 0) {\n                this._workspaceEdit.changeAnnotations = undefined;\n            }\n            else {\n                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n            }\n        }\n        return this._workspaceEdit;\n    }\n    getTextEditChange(key) {\n        if (OptionalVersionedTextDocumentIdentifier.is(key)) {\n            this.initDocumentChanges();\n            if (this._workspaceEdit.documentChanges === undefined) {\n                throw new Error('Workspace edit is not configured for document changes.');\n            }\n            const textDocument = { uri: key.uri, version: key.version };\n            let result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                const edits = [];\n                const textDocumentEdit = {\n                    textDocument,\n                    edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits, this._changeAnnotations);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            this.initChanges();\n            if (this._workspaceEdit.changes === undefined) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            let result = this._textEditChanges[key];\n            if (!result) {\n                let edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    }\n    initDocumentChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._changeAnnotations = new ChangeAnnotations();\n            this._workspaceEdit.documentChanges = [];\n            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n        }\n    }\n    initChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._workspaceEdit.changes = Object.create(null);\n        }\n    }\n    createFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = CreateFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = CreateFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    renameFile(oldUri, newUri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = RenameFile.create(oldUri, newUri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = RenameFile.create(oldUri, newUri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    deleteFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = DeleteFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = DeleteFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n}\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * {@link TextDocumentIdentifier} literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link VersionedTextDocumentIdentifier} literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link OptionalVersionedTextDocumentIdentifier} literals.\n */\nexport var OptionalVersionedTextDocumentIdentifier;\n(function (OptionalVersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new OptionalVersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    OptionalVersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n    }\n    OptionalVersionedTextDocumentIdentifier.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * {@link TextDocumentItem} literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri, languageId, version, text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n    /**\n     * Checks whether the given value is a value of the {@link MarkupKind} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the {@link MarkupContent} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * Completion item tags are extra annotations that tweak the rendering of a completion\n * item.\n *\n * @since 3.15.0\n */\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    /**\n     * Render a completion as obsolete, usually using a strike-out.\n     */\n    CompletionItemTag.Deprecated = 1;\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.\n *\n * @since 3.16.0\n */\nexport var InsertReplaceEdit;\n(function (InsertReplaceEdit) {\n    /**\n     * Creates a new insert / replace edit\n     */\n    function create(newText, insert, replace) {\n        return { newText, insert, replace };\n    }\n    InsertReplaceEdit.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\n    }\n    InsertReplaceEdit.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\n/**\n * How whitespace and indentation is handled during completion\n * item insertion.\n *\n * @since 3.16.0\n */\nexport var InsertTextMode;\n(function (InsertTextMode) {\n    /**\n     * The insertion or replace strings is taken as it is. If the\n     * value is multi line the lines below the cursor will be\n     * inserted using the indentation defined in the string value.\n     * The client will not apply any kind of adjustments to the\n     * string.\n     */\n    InsertTextMode.asIs = 1;\n    /**\n     * The editor adjusts leading whitespace of new lines so that\n     * they match the indentation up to the cursor of the line for\n     * which the item is accepted.\n     *\n     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n     * multi line completion item is indented using 2 tabs and all\n     * following lines inserted will be indented using 2 tabs as well.\n     */\n    InsertTextMode.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\nexport var CompletionItemLabelDetails;\n(function (CompletionItemLabelDetails) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    CompletionItemLabelDetails.is = is;\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the {@link MarkedString} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the {@link Hover} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * {@link ParameterInformation} literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label, documentation } : { label };\n    }\n    ParameterInformation.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * {@link SignatureInformation} literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation, ...parameters) {\n        let result = { label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * {@link DocumentHighlight} literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     * @param kind The highlight kind\n     */\n    function create(range, kind) {\n        let result = { range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\n/**\n * Symbol tags are extra annotations that tweak the rendering of a symbol.\n *\n * @since 3.16\n */\nexport var SymbolTag;\n(function (SymbolTag) {\n    /**\n     * Render a symbol as obsolete, usually using a strike-out.\n     */\n    SymbolTag.Deprecated = 1;\n})(SymbolTag || (SymbolTag = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        let result = {\n            name,\n            kind,\n            location: { uri, range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nexport var WorkspaceSymbol;\n(function (WorkspaceSymbol) {\n    /**\n     * Create a new workspace symbol.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param uri The resource of the location of the symbol.\n     * @param range An options range of the location.\n     * @returns A WorkspaceSymbol.\n     */\n    function create(name, kind, uri, range) {\n        return range !== undefined\n            ? { name, kind, location: { uri, range } }\n            : { name, kind, location: { uri } };\n    }\n    WorkspaceSymbol.create = create;\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\nexport var DocumentSymbol;\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        let result = {\n            name,\n            detail,\n            kind,\n            range,\n            selectionRange\n        };\n        if (children !== undefined) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === undefined || Is.string(candidate.detail)) &&\n            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === undefined || Array.isArray(candidate.children)) &&\n            (candidate.tags === undefined || Array.isArray(candidate.tags));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Empty kind.\n     */\n    CodeActionKind.Empty = '';\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n    /**\n     * Base kind for auto-fix source actions: `source.fixAll`.\n     *\n     * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n     *\n     * @since 3.15.0\n     */\n    CodeActionKind.SourceFixAll = 'source.fixAll';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The reason why code actions were requested.\n *\n * @since 3.17.0\n */\nexport var CodeActionTriggerKind;\n(function (CodeActionTriggerKind) {\n    /**\n     * Code actions were explicitly requested by the user or by an extension.\n     */\n    CodeActionTriggerKind.Invoked = 1;\n    /**\n     * Code actions were requested automatically.\n     *\n     * This typically happens when current selection in a file changes, but can\n     * also be triggered when file content changes.\n     */\n    CodeActionTriggerKind.Automatic = 2;\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * {@link CodeActionContext} literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only, triggerKind) {\n        let result = { diagnostics };\n        if (only !== undefined && only !== null) {\n            result.only = only;\n        }\n        if (triggerKind !== undefined && triggerKind !== null) {\n            result.triggerKind = triggerKind;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)\n            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))\n            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, kindOrCommandOrEdit, kind) {\n        let result = { title };\n        let checkKind = true;\n        if (typeof kindOrCommandOrEdit === 'string') {\n            checkKind = false;\n            result.kind = kindOrCommandOrEdit;\n        }\n        else if (Command.is(kindOrCommandOrEdit)) {\n            result.command = kindOrCommandOrEdit;\n        }\n        else {\n            result.edit = kindOrCommandOrEdit;\n        }\n        if (checkKind && kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === undefined || Is.string(candidate.kind)) &&\n            (candidate.edit !== undefined || candidate.command !== undefined) &&\n            (candidate.command === undefined || Command.is(candidate.command)) &&\n            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&\n            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * {@link CodeLens} literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        let result = { range };\n        if (Is.defined(data)) {\n            result.data = data;\n        }\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeLens} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * {@link FormattingOptions} literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize, insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * The DocumentLink namespace provides helper functions to work with\n * {@link DocumentLink} literals.\n */\nexport var DocumentLink;\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range, target, data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n/**\n * The SelectionRange namespace provides helper function to work with\n * SelectionRange literals.\n */\nexport var SelectionRange;\n(function (SelectionRange) {\n    /**\n     * Creates a new SelectionRange\n     * @param range the range.\n     * @param parent an optional parent.\n     */\n    function create(range, parent) {\n        return { range, parent };\n    }\n    SelectionRange.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));\n    }\n    SelectionRange.is = is;\n})(SelectionRange || (SelectionRange = {}));\n/**\n * A set of predefined token types. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenTypes;\n(function (SemanticTokenTypes) {\n    SemanticTokenTypes[\"namespace\"] = \"namespace\";\n    /**\n     * Represents a generic type. Acts as a fallback for types which can't be mapped to\n     * a specific type like class or enum.\n     */\n    SemanticTokenTypes[\"type\"] = \"type\";\n    SemanticTokenTypes[\"class\"] = \"class\";\n    SemanticTokenTypes[\"enum\"] = \"enum\";\n    SemanticTokenTypes[\"interface\"] = \"interface\";\n    SemanticTokenTypes[\"struct\"] = \"struct\";\n    SemanticTokenTypes[\"typeParameter\"] = \"typeParameter\";\n    SemanticTokenTypes[\"parameter\"] = \"parameter\";\n    SemanticTokenTypes[\"variable\"] = \"variable\";\n    SemanticTokenTypes[\"property\"] = \"property\";\n    SemanticTokenTypes[\"enumMember\"] = \"enumMember\";\n    SemanticTokenTypes[\"event\"] = \"event\";\n    SemanticTokenTypes[\"function\"] = \"function\";\n    SemanticTokenTypes[\"method\"] = \"method\";\n    SemanticTokenTypes[\"macro\"] = \"macro\";\n    SemanticTokenTypes[\"keyword\"] = \"keyword\";\n    SemanticTokenTypes[\"modifier\"] = \"modifier\";\n    SemanticTokenTypes[\"comment\"] = \"comment\";\n    SemanticTokenTypes[\"string\"] = \"string\";\n    SemanticTokenTypes[\"number\"] = \"number\";\n    SemanticTokenTypes[\"regexp\"] = \"regexp\";\n    SemanticTokenTypes[\"operator\"] = \"operator\";\n    /**\n     * @since 3.17.0\n     */\n    SemanticTokenTypes[\"decorator\"] = \"decorator\";\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\n/**\n * A set of predefined token modifiers. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenModifiers;\n(function (SemanticTokenModifiers) {\n    SemanticTokenModifiers[\"declaration\"] = \"declaration\";\n    SemanticTokenModifiers[\"definition\"] = \"definition\";\n    SemanticTokenModifiers[\"readonly\"] = \"readonly\";\n    SemanticTokenModifiers[\"static\"] = \"static\";\n    SemanticTokenModifiers[\"deprecated\"] = \"deprecated\";\n    SemanticTokenModifiers[\"abstract\"] = \"abstract\";\n    SemanticTokenModifiers[\"async\"] = \"async\";\n    SemanticTokenModifiers[\"modification\"] = \"modification\";\n    SemanticTokenModifiers[\"documentation\"] = \"documentation\";\n    SemanticTokenModifiers[\"defaultLibrary\"] = \"defaultLibrary\";\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\n/**\n * @since 3.16.0\n */\nexport var SemanticTokens;\n(function (SemanticTokens) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&\n            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');\n    }\n    SemanticTokens.is = is;\n})(SemanticTokens || (SemanticTokens = {}));\n/**\n * The InlineValueText namespace provides functions to deal with InlineValueTexts.\n *\n * @since 3.17.0\n */\nexport var InlineValueText;\n(function (InlineValueText) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, text) {\n        return { range, text };\n    }\n    InlineValueText.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\n    }\n    InlineValueText.is = is;\n})(InlineValueText || (InlineValueText = {}));\n/**\n * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.\n *\n * @since 3.17.0\n */\nexport var InlineValueVariableLookup;\n(function (InlineValueVariableLookup) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, variableName, caseSensitiveLookup) {\n        return { range, variableName, caseSensitiveLookup };\n    }\n    InlineValueVariableLookup.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)\n            && (Is.string(candidate.variableName) || candidate.variableName === undefined);\n    }\n    InlineValueVariableLookup.is = is;\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\n/**\n * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.\n *\n * @since 3.17.0\n */\nexport var InlineValueEvaluatableExpression;\n(function (InlineValueEvaluatableExpression) {\n    /**\n     * Creates a new InlineValueEvaluatableExpression literal.\n     */\n    function create(range, expression) {\n        return { range, expression };\n    }\n    InlineValueEvaluatableExpression.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range)\n            && (Is.string(candidate.expression) || candidate.expression === undefined);\n    }\n    InlineValueEvaluatableExpression.is = is;\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\n/**\n * The InlineValueContext namespace provides helper functions to work with\n * {@link InlineValueContext} literals.\n *\n * @since 3.17.0\n */\nexport var InlineValueContext;\n(function (InlineValueContext) {\n    /**\n     * Creates a new InlineValueContext literal.\n     */\n    function create(frameId, stoppedLocation) {\n        return { frameId, stoppedLocation };\n    }\n    InlineValueContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.defined(candidate) && Range.is(value.stoppedLocation);\n    }\n    InlineValueContext.is = is;\n})(InlineValueContext || (InlineValueContext = {}));\n/**\n * Inlay hint kinds.\n *\n * @since 3.17.0\n */\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    /**\n     * An inlay hint that for a type annotation.\n     */\n    InlayHintKind.Type = 1;\n    /**\n     * An inlay hint that is for a parameter.\n     */\n    InlayHintKind.Parameter = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    InlayHintKind.is = is;\n})(InlayHintKind || (InlayHintKind = {}));\nexport var InlayHintLabelPart;\n(function (InlayHintLabelPart) {\n    function create(value) {\n        return { value };\n    }\n    InlayHintLabelPart.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.location === undefined || Location.is(candidate.location))\n            && (candidate.command === undefined || Command.is(candidate.command));\n    }\n    InlayHintLabelPart.is = is;\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\nexport var InlayHint;\n(function (InlayHint) {\n    function create(position, label, kind) {\n        const result = { position, label };\n        if (kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    InlayHint.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.position)\n            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))\n            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))\n            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))\n            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));\n    }\n    InlayHint.is = is;\n})(InlayHint || (InlayHint = {}));\nexport var StringValue;\n(function (StringValue) {\n    function createSnippet(value) {\n        return { kind: 'snippet', value };\n    }\n    StringValue.createSnippet = createSnippet;\n})(StringValue || (StringValue = {}));\nexport var InlineCompletionItem;\n(function (InlineCompletionItem) {\n    function create(insertText, filterText, range, command) {\n        return { insertText, filterText, range, command };\n    }\n    InlineCompletionItem.create = create;\n})(InlineCompletionItem || (InlineCompletionItem = {}));\nexport var InlineCompletionList;\n(function (InlineCompletionList) {\n    function create(items) {\n        return { items };\n    }\n    InlineCompletionList.create = create;\n})(InlineCompletionList || (InlineCompletionList = {}));\n/**\n * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.\n *\n * @since 3.18.0\n * @proposed\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     */\n    InlineCompletionTriggerKind.Invoked = 0;\n    /**\n     * Completion was triggered automatically while editing.\n     */\n    InlineCompletionTriggerKind.Automatic = 1;\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SelectedCompletionInfo;\n(function (SelectedCompletionInfo) {\n    function create(range, text) {\n        return { range, text };\n    }\n    SelectedCompletionInfo.create = create;\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\nexport var InlineCompletionContext;\n(function (InlineCompletionContext) {\n    function create(triggerKind, selectedCompletionInfo) {\n        return { triggerKind, selectedCompletionInfo };\n    }\n    InlineCompletionContext.create = create;\n})(InlineCompletionContext || (InlineCompletionContext = {}));\nexport var WorkspaceFolder;\n(function (WorkspaceFolder) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\n    }\n    WorkspaceFolder.is = is;\n})(WorkspaceFolder || (WorkspaceFolder = {}));\nexport const EOL = ['\\n', '\\r\\n', '\\r'];\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId The document's language Id.\n     * @param version The document's version.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ITextDocument} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        let text = document.getText();\n        let sortedEdits = mergeSort(edits, (a, b) => {\n            let diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = text.length;\n        for (let i = sortedEdits.length - 1; i >= 0; i--) {\n            let e = sortedEdits[i];\n            let startOffset = document.offsetAt(e.range.start);\n            let endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Overlapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        const p = (data.length / 2) | 0;\n        const left = data.slice(0, p);\n        const right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        let leftIdx = 0;\n        let rightIdx = 0;\n        let i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            let ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            let start = this.offsetAt(range.start);\n            let end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = undefined;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            let lineOffsets = [];\n            let text = this._content;\n            let isLineStart = true;\n            for (let i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                let ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        let lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        let line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    }\n    offsetAt(position) {\n        let lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        let lineOffset = lineOffsets[position.line];\n        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n}\nvar Is;\n(function (Is) {\n    const toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function numberRange(value, min, max) {\n        return toString.call(value) === '[object Number]' && min <= value && value <= max;\n    }\n    Is.numberRange = numberRange;\n    function integer(value) {\n        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;\n    }\n    Is.integer = integer;\n    function uinteger(value) {\n        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;\n    }\n    Is.uinteger = uinteger;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { IToken, TokenType } from 'chevrotain';\nimport type { Range } from 'vscode-languageserver-types';\nimport type { AbstractElement } from '../languages/generated/ast.js';\nimport type { AstNode, CompositeCstNode, CstNode, LeafCstNode, RootCstNode } from '../syntax-tree.js';\nimport { Position } from 'vscode-languageserver-types';\nimport { isCompositeCstNode } from '../syntax-tree.js';\nimport { tokenToRange } from '../utils/cst-utils.js';\n\nexport class CstNodeBuilder {\n\n    private rootNode!: RootCstNodeImpl;\n    private nodeStack: CompositeCstNodeImpl[] = [];\n\n    private get current(): CompositeCstNodeImpl {\n        return this.nodeStack[this.nodeStack.length - 1];\n    }\n\n    buildRootNode(input: string): RootCstNode {\n        this.rootNode = new RootCstNodeImpl(input);\n        this.rootNode.root = this.rootNode;\n        this.nodeStack = [this.rootNode];\n        return this.rootNode;\n    }\n\n    buildCompositeNode(feature: AbstractElement): CompositeCstNode {\n        const compositeNode = new CompositeCstNodeImpl();\n        compositeNode.grammarSource = feature;\n        compositeNode.root = this.rootNode;\n        this.current.content.push(compositeNode);\n        this.nodeStack.push(compositeNode);\n        return compositeNode;\n    }\n\n    buildLeafNode(token: IToken, feature: AbstractElement): LeafCstNode {\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, false);\n        leafNode.grammarSource = feature;\n        leafNode.root = this.rootNode;\n        this.current.content.push(leafNode);\n        return leafNode;\n    }\n\n    removeNode(node: CstNode): void {\n        const parent = node.container;\n        if (parent) {\n            const index = parent.content.indexOf(node);\n            if (index >= 0) {\n                parent.content.splice(index, 1);\n            }\n        }\n    }\n\n    construct(item: { $type: string | symbol | undefined, $cstNode: CstNode }): void {\n        const current: CstNode = this.current;\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\n        // Only if the $type is a string, we actually assign the element\n        if (typeof item.$type === 'string') {\n            this.current.astNode = <AstNode>item;\n        }\n        item.$cstNode = current;\n        const node = this.nodeStack.pop();\n        // Empty composite nodes are not valid\n        // Simply remove the node from the tree\n        if (node?.content.length === 0) {\n            this.removeNode(node);\n        }\n    }\n\n    addHiddenTokens(hiddenTokens: IToken[]): void {\n        for (const token of hiddenTokens) {\n            const hiddenNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, true);\n            hiddenNode.root = this.rootNode;\n            this.addHiddenToken(this.rootNode, hiddenNode);\n        }\n    }\n\n    private addHiddenToken(node: CompositeCstNode, token: LeafCstNode): void {\n        const { offset: tokenStart, end: tokenEnd } = token;\n\n        for (let i = 0; i < node.content.length; i++) {\n            const child = node.content[i];\n            const { offset: childStart, end: childEnd } = child;\n            if (isCompositeCstNode(child) && tokenStart > childStart && tokenEnd < childEnd) {\n                this.addHiddenToken(child, token);\n                return;\n            } else if (tokenEnd <= childStart) {\n                node.content.splice(i, 0, token);\n                return;\n            }\n        }\n\n        // We know that we haven't found a suited position for the token\n        // So we simply add it to the end of the current node\n        node.content.push(token);\n    }\n}\n\nexport abstract class AbstractCstNode implements CstNode {\n    abstract get offset(): number;\n    abstract get length(): number;\n    abstract get end(): number;\n    abstract get range(): Range;\n\n    container?: CompositeCstNode;\n    grammarSource: AbstractElement;\n    root: RootCstNode;\n    private _astNode?: AstNode;\n\n    /** @deprecated use `container` instead. */\n    get parent(): CompositeCstNode | undefined {\n        return this.container;\n    }\n\n    /** @deprecated use `grammarSource` instead. */\n    get feature(): AbstractElement {\n        return this.grammarSource;\n    }\n\n    get hidden(): boolean {\n        return false;\n    }\n\n    get astNode(): AstNode {\n        const node = typeof this._astNode?.$type === 'string' ? this._astNode : this.container?.astNode;\n        if (!node) {\n            throw new Error('This node has no associated AST element');\n        }\n        return node;\n    }\n\n    set astNode(value: AstNode) {\n        this._astNode = value;\n    }\n\n    /** @deprecated use `astNode` instead. */\n    get element(): AstNode {\n        return this.astNode;\n    }\n\n    get text(): string {\n        return this.root.fullText.substring(this.offset, this.end);\n    }\n}\n\nexport class LeafCstNodeImpl extends AbstractCstNode implements LeafCstNode {\n    get offset(): number {\n        return this._offset;\n    }\n\n    get length(): number {\n        return this._length;\n    }\n\n    get end(): number {\n        return this._offset + this._length;\n    }\n\n    override get hidden(): boolean {\n        return this._hidden;\n    }\n\n    get tokenType(): TokenType {\n        return this._tokenType;\n    }\n\n    get range(): Range {\n        return this._range;\n    }\n\n    private _hidden: boolean;\n    private _offset: number;\n    private _length: number;\n    private _range: Range;\n    private _tokenType: TokenType;\n\n    constructor(offset: number, length: number, range: Range, tokenType: TokenType, hidden = false) {\n        super();\n        this._hidden = hidden;\n        this._offset = offset;\n        this._tokenType = tokenType;\n        this._length = length;\n        this._range = range;\n    }\n}\n\nexport class CompositeCstNodeImpl extends AbstractCstNode implements CompositeCstNode {\n    readonly content: CstNode[] = new CstNodeContainer(this);\n    private _rangeCache?: Range;\n\n    /** @deprecated use `content` instead. */\n    get children(): CstNode[] {\n        return this.content;\n    }\n\n    get offset(): number {\n        return this.firstNonHiddenNode?.offset ?? 0;\n    }\n\n    get length(): number {\n        return this.end - this.offset;\n    }\n\n    get end(): number {\n        return this.lastNonHiddenNode?.end ?? 0;\n    }\n\n    get range(): Range {\n        const firstNode = this.firstNonHiddenNode;\n        const lastNode = this.lastNonHiddenNode;\n        if (firstNode && lastNode) {\n            if (this._rangeCache === undefined) {\n                const { range: firstRange } = firstNode;\n                const { range: lastRange } = lastNode;\n                this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };\n            }\n            return this._rangeCache;\n        } else {\n            return { start: Position.create(0, 0), end: Position.create(0, 0) };\n        }\n    }\n\n    private get firstNonHiddenNode(): CstNode | undefined {\n        for (const child of this.content) {\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[0];\n    }\n\n    private get lastNonHiddenNode(): CstNode | undefined {\n        for (let i = this.content.length - 1; i >= 0; i--) {\n            const child = this.content[i];\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[this.content.length - 1];\n    }\n}\n\nclass CstNodeContainer extends Array<CstNode> {\n    readonly parent: CompositeCstNode;\n\n    constructor(parent: CompositeCstNode) {\n        super();\n        this.parent = parent;\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\n    }\n\n    override push(...items: CstNode[]): number {\n        this.addParents(items);\n        return super.push(...items);\n    }\n\n    override unshift(...items: CstNode[]): number {\n        this.addParents(items);\n        return super.unshift(...items);\n    }\n\n    override splice(start: number, count: number, ...items: CstNode[]): CstNode[] {\n        this.addParents(items);\n        return super.splice(start, count, ...items);\n    }\n\n    private addParents(items: CstNode[]): void {\n        for (const item of items) {\n            (<AbstractCstNode>item).container = this.parent;\n        }\n    }\n}\n\nexport class RootCstNodeImpl extends CompositeCstNodeImpl implements RootCstNode {\n    private _text = '';\n\n    override get text(): string {\n        return this._text.substring(this.offset, this.end);\n    }\n\n    get fullText(): string {\n        return this._text;\n    }\n\n    constructor(input?: string) {\n        super();\n        this._text = input ?? '';\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { DSLMethodOpts, ILexingError, IOrAlt, IParserErrorMessageProvider, IRecognitionException, IToken, TokenType, TokenVocabulary } from 'chevrotain';\nimport type { AbstractElement, Action, Assignment, ParserRule } from '../languages/generated/ast.js';\nimport type { Linker } from '../references/linker.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstReflection, CompositeCstNode, CstNode } from '../syntax-tree.js';\nimport type { Lexer } from './lexer.js';\nimport type { IParserConfig } from './parser-config.js';\nimport type { ValueConverter } from './value-converter.js';\nimport { defaultParserErrorProvider, EmbeddedActionsParser, LLkLookaheadStrategy } from 'chevrotain';\nimport { LLStarLookaheadStrategy } from 'chevrotain-allstar';\nimport { isAssignment, isCrossReference, isKeyword } from '../languages/generated/ast.js';\nimport { getTypeName, isDataTypeRule } from '../utils/grammar-utils.js';\nimport { assignMandatoryProperties, getContainerOfType, linkContentToContainer } from '../utils/ast-utils.js';\nimport { CstNodeBuilder } from './cst-node-builder.js';\n\nexport type ParseResult<T = AstNode> = {\n    value: T,\n    parserErrors: IRecognitionException[],\n    lexerErrors: ILexingError[]\n}\n\nexport const DatatypeSymbol = Symbol('Datatype');\n\ninterface DataTypeNode {\n    $cstNode: CompositeCstNode\n    /** Instead of a string, this node is uniquely identified by the `Datatype` symbol */\n    $type: symbol\n    /** Used as a storage for all parsed terminals, keywords and sub-datatype rules */\n    value: string\n}\n\nfunction isDataTypeNode(node: { $type: string | symbol | undefined }): node is DataTypeNode {\n    return node.$type === DatatypeSymbol;\n}\n\ntype RuleResult = (args: Args) => any;\n\ntype Args = Record<string, boolean>;\n\ntype RuleImpl = (args: Args) => any;\n\ninterface AssignmentElement {\n    assignment?: Assignment\n    isCrossRef: boolean\n}\n\nexport interface BaseParser {\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult;\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void;\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void;\n    many(idx: number, callback: DSLMethodOpts<unknown>): void;\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void;\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\n    subrule(idx: number, rule: RuleResult, feature: AbstractElement, args: Args): void;\n    action($type: string, action: Action): void;\n    construct(): unknown;\n    isRecording(): boolean;\n    get unorderedGroups(): Map<string, boolean[]>;\n    getRuleStack(): number[];\n}\n\nconst ruleSuffix = '\\u200B';\nconst withRuleSuffix = (name: string): string => name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\n\nexport abstract class AbstractLangiumParser implements BaseParser {\n\n    protected readonly lexer: Lexer;\n    protected readonly wrapper: ChevrotainWrapper;\n    protected _unorderedGroups: Map<string, boolean[]> = new Map<string, boolean[]>();\n\n    constructor(services: LangiumCoreServices) {\n        this.lexer = services.parser.Lexer;\n        const tokens = this.lexer.definition;\n        this.wrapper = new ChevrotainWrapper(tokens, {\n            ...services.parser.ParserConfig,\n            errorMessageProvider: services.parser.ParserErrorMessageProvider\n        });\n    }\n\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void {\n        this.wrapper.wrapOr(idx, choices);\n    }\n\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.wrapper.wrapOption(idx, callback);\n    }\n\n    many(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.wrapper.wrapMany(idx, callback);\n    }\n\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.wrapper.wrapAtLeastOne(idx, callback);\n    }\n\n    abstract rule(rule: ParserRule, impl: RuleImpl): RuleResult;\n    abstract consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\n    abstract subrule(idx: number, rule: RuleResult, feature: AbstractElement, args: Args): void;\n    abstract action($type: string, action: Action): void;\n    abstract construct(): unknown;\n\n    isRecording(): boolean {\n        return this.wrapper.IS_RECORDING;\n    }\n\n    get unorderedGroups(): Map<string, boolean[]> {\n        return this._unorderedGroups;\n    }\n\n    getRuleStack(): number[] {\n        return (this.wrapper as any).RULE_STACK;\n    }\n\n    finalize(): void {\n        this.wrapper.wrapSelfAnalysis();\n    }\n}\n\nexport class LangiumParser extends AbstractLangiumParser {\n    private readonly linker: Linker;\n    private readonly converter: ValueConverter;\n    private readonly astReflection: AstReflection;\n    private readonly nodeBuilder = new CstNodeBuilder();\n    private stack: any[] = [];\n    private mainRule!: RuleResult;\n    private assignmentMap = new Map<AbstractElement, AssignmentElement | undefined>();\n\n    private get current(): any {\n        return this.stack[this.stack.length - 1];\n    }\n\n    constructor(services: LangiumCoreServices) {\n        super(services);\n        this.linker = services.references.Linker;\n        this.converter = services.parser.ValueConverter;\n        this.astReflection = services.shared.AstReflection;\n    }\n\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\n        const type = rule.fragment ? undefined : isDataTypeRule(rule) ? DatatypeSymbol : getTypeName(rule);\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n\n    parse<T extends AstNode = AstNode>(input: string): ParseResult<T> {\n        this.nodeBuilder.buildRootNode(input);\n        const lexerResult = this.lexer.tokenize(input);\n        this.wrapper.input = lexerResult.tokens;\n        const result = this.mainRule.call(this.wrapper, {});\n        this.nodeBuilder.addHiddenTokens(lexerResult.hidden);\n        this.unorderedGroups.clear();\n        return {\n            value: result,\n            lexerErrors: lexerResult.errors,\n            parserErrors: this.wrapper.errors\n        };\n    }\n\n    private startImplementation($type: string | symbol | undefined, implementation: RuleImpl): RuleImpl {\n        return (args) => {\n            if (!this.isRecording()) {\n                const node: any = { $type };\n                this.stack.push(node);\n                if ($type === DatatypeSymbol) {\n                    node.value = '';\n                }\n            }\n            let result: unknown;\n            try {\n                result = implementation(args);\n            } catch (err) {\n                result = undefined;\n            }\n            if (!this.isRecording() && result === undefined) {\n                result = this.construct();\n            }\n            return result;\n        };\n    }\n\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\n        const token = this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording() && this.isValidToken(token)) {\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\n            const { assignment, isCrossRef } = this.getAssignment(feature);\n            const current = this.current;\n            if (assignment) {\n                const convertedValue = isKeyword(feature) ? token.image : this.converter.convert(token.image, leafNode);\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\n            } else if (isDataTypeNode(current)) {\n                let text = token.image;\n                if (!isKeyword(feature)) {\n                    text = this.converter.convert(text, leafNode).toString();\n                }\n                current.value += text;\n            }\n        }\n    }\n\n    /**\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\n     *\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\n     */\n    private isValidToken(token: IToken): boolean {\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === 'number' && !isNaN(token.endOffset);\n    }\n\n    subrule(idx: number, rule: RuleResult, feature: AbstractElement, args: Args): void {\n        let cstNode: CompositeCstNode | undefined;\n        if (!this.isRecording()) {\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\n        }\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args) as any;\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\n        }\n    }\n\n    private performSubruleAssignment(result: any, feature: AbstractElement, cstNode: CompositeCstNode): void {\n        const { assignment, isCrossRef } = this.getAssignment(feature);\n        if (assignment) {\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\n        } else if (!assignment) {\n            // If we call a subrule without an assignment we either:\n            // 1. append the result of the subrule (data type rule)\n            // 2. override the current object with the newly parsed object\n            // If the current element is an AST node and the result of the subrule\n            // is a data type rule, we can safely discard the results.\n            const current = this.current;\n            if (isDataTypeNode(current)) {\n                current.value += result.toString();\n            } else if (typeof result === 'object' && result) {\n                const resultKind = result.$type;\n                const object = this.assignWithoutOverride(result, current);\n                if (resultKind) {\n                    object.$type = resultKind;\n                }\n                const newItem = object;\n                this.stack.pop();\n                this.stack.push(newItem);\n            }\n        }\n    }\n\n    action($type: string, action: Action): void {\n        if (!this.isRecording()) {\n            let last = this.current;\n            // This branch is used for left recursive grammar rules.\n            // Those don't call `construct` before another action.\n            // Therefore, we need to call it here.\n            if (!last.$cstNode && action.feature && action.operator) {\n                last = this.construct(false);\n                const feature = last.$cstNode.feature;\n                this.nodeBuilder.buildCompositeNode(feature);\n            }\n            const newItem = { $type };\n            this.stack.pop();\n            this.stack.push(newItem);\n            if (action.feature && action.operator) {\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\n            }\n        }\n    }\n\n    construct(pop = true): unknown {\n        if (this.isRecording()) {\n            return undefined;\n        }\n        const obj = this.current;\n        linkContentToContainer(obj);\n        this.nodeBuilder.construct(obj);\n        if (pop) {\n            this.stack.pop();\n        }\n        if (isDataTypeNode(obj)) {\n            return this.converter.convert(obj.value, obj.$cstNode);\n        } else {\n            assignMandatoryProperties(this.astReflection, obj);\n        }\n        return obj;\n    }\n\n    private getAssignment(feature: AbstractElement): AssignmentElement {\n        if (!this.assignmentMap.has(feature)) {\n            const assignment = getContainerOfType(feature, isAssignment);\n            this.assignmentMap.set(feature, {\n                assignment: assignment,\n                isCrossRef: assignment ? isCrossReference(assignment.terminal) : false\n            });\n        }\n        return this.assignmentMap.get(feature)!;\n    }\n\n    private assign(operator: string, feature: string, value: unknown, cstNode: CstNode, isCrossRef: boolean): void {\n        const obj = this.current;\n        let item: unknown;\n        if (isCrossRef && typeof value === 'string') {\n            item = this.linker.buildReference(obj, feature, cstNode, value);\n        } else {\n            item = value;\n        }\n        switch (operator) {\n            case '=': {\n                obj[feature] = item;\n                break;\n            }\n            case '?=': {\n                obj[feature] = true;\n                break;\n            }\n            case '+=': {\n                if (!Array.isArray(obj[feature])) {\n                    obj[feature] = [];\n                }\n                obj[feature].push(item);\n            }\n        }\n    }\n\n    private assignWithoutOverride(target: any, source: any): any {\n        for (const [name, existingValue] of Object.entries(source)) {\n            const newValue = target[name];\n            if (newValue === undefined) {\n                target[name] = existingValue;\n            } else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\n                existingValue.push(...newValue);\n                target[name] = existingValue;\n            }\n        }\n        return target;\n    }\n\n    get definitionErrors(): IParserDefinitionError[] {\n        return this.wrapper.definitionErrors;\n    }\n}\n\nexport interface IParserDefinitionError {\n    message: string\n    type: number\n    ruleName?: string\n}\n\nexport abstract class AbstractParserErrorMessageProvider implements IParserErrorMessageProvider {\n\n    buildMismatchTokenMessage(options: {\n        expected: TokenType\n        actual: IToken\n        previous: IToken\n        ruleName: string\n    }): string {\n        return defaultParserErrorProvider.buildMismatchTokenMessage(options);\n    }\n\n    buildNotAllInputParsedMessage(options: {\n        firstRedundant: IToken\n        ruleName: string\n    }): string {\n        return defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\n    }\n\n    buildNoViableAltMessage(options: {\n        expectedPathsPerAlt: TokenType[][][]\n        actual: IToken[]\n        previous: IToken\n        customUserDescription: string\n        ruleName: string\n    }): string {\n        return defaultParserErrorProvider.buildNoViableAltMessage(options);\n    }\n\n    buildEarlyExitMessage(options: {\n        expectedIterationPaths: TokenType[][]\n        actual: IToken[]\n        previous: IToken\n        customUserDescription: string\n        ruleName: string\n    }): string {\n        return defaultParserErrorProvider.buildEarlyExitMessage(options);\n    }\n\n}\n\nexport class LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\n\n    override buildMismatchTokenMessage({ expected, actual }: {\n        expected: TokenType\n        actual: IToken\n        previous: IToken\n        ruleName: string\n    }): string {\n        const expectedMsg = expected.LABEL\n            ? '`' + expected.LABEL + '`'\n            : expected.name.endsWith(':KW')\n                ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'`\n                : `token of type '${expected.name}'`;\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\n    }\n\n    override buildNotAllInputParsedMessage({ firstRedundant }: {\n        firstRedundant: IToken\n        ruleName: string\n    }): string {\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\n    }\n}\n\nexport interface CompletionParserResult {\n    tokens: IToken[]\n    elementStack: AbstractElement[]\n    tokenIndex: number\n}\n\nexport class LangiumCompletionParser extends AbstractLangiumParser {\n    private mainRule!: RuleResult;\n    private tokens: IToken[] = [];\n\n    private elementStack: AbstractElement[] = [];\n    private lastElementStack: AbstractElement[] = [];\n    private nextTokenIndex = 0;\n    private stackSize = 0;\n\n    action(): void {\n        // NOOP\n    }\n\n    construct(): unknown {\n        // NOOP\n        return undefined;\n    }\n\n    parse(input: string): CompletionParserResult {\n        this.resetState();\n        const tokens = this.lexer.tokenize(input);\n        this.tokens = tokens.tokens;\n        this.wrapper.input = [...this.tokens];\n        this.mainRule.call(this.wrapper, {});\n        this.unorderedGroups.clear();\n        return {\n            tokens: this.tokens,\n            elementStack: [...this.lastElementStack],\n            tokenIndex: this.nextTokenIndex\n        };\n    }\n\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n\n    private resetState(): void {\n        this.elementStack = [];\n        this.lastElementStack = [];\n        this.nextTokenIndex = 0;\n        this.stackSize = 0;\n    }\n\n    private startImplementation(implementation: RuleImpl): RuleImpl {\n        return (args) => {\n            const size = this.keepStackSize();\n            try {\n                implementation(args);\n            } finally {\n                this.resetStackSize(size);\n            }\n        };\n    }\n\n    private removeUnexpectedElements(): void {\n        this.elementStack.splice(this.stackSize);\n    }\n\n    keepStackSize(): number {\n        const size = this.elementStack.length;\n        this.stackSize = size;\n        return size;\n    }\n\n    resetStackSize(size: number): void {\n        this.removeUnexpectedElements();\n        this.stackSize = size;\n    }\n\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\n        this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording()) {\n            this.lastElementStack = [...this.elementStack, feature];\n            this.nextTokenIndex = this.currIdx + 1;\n        }\n    }\n\n    subrule(idx: number, rule: RuleResult, feature: AbstractElement, args: Args): void {\n        this.before(feature);\n        this.wrapper.wrapSubrule(idx, rule, args);\n        this.after(feature);\n    }\n\n    before(element: AbstractElement): void {\n        if (!this.isRecording()) {\n            this.elementStack.push(element);\n        }\n    }\n\n    after(element: AbstractElement): void {\n        if (!this.isRecording()) {\n            const index = this.elementStack.lastIndexOf(element);\n            if (index >= 0) {\n                this.elementStack.splice(index);\n            }\n        }\n    }\n\n    get currIdx(): number {\n        return (this.wrapper as any).currIdx;\n    }\n}\n\nconst defaultConfig: IParserConfig = {\n    recoveryEnabled: true,\n    nodeLocationTracking: 'full',\n    skipValidations: true,\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\n};\n\n/**\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\n * This way, we can build the `LangiumParser` as a composition.\n */\nclass ChevrotainWrapper extends EmbeddedActionsParser {\n\n    // This array is set in the base implementation of Chevrotain.\n    definitionErrors: IParserDefinitionError[];\n\n    constructor(tokens: TokenVocabulary, config?: IParserConfig) {\n        const useDefaultLookahead = config && 'maxLookahead' in config;\n        super(tokens, {\n            ...defaultConfig,\n            lookaheadStrategy: useDefaultLookahead\n                ? new LLkLookaheadStrategy({ maxLookahead: config.maxLookahead })\n                : new LLStarLookaheadStrategy(),\n            ...config,\n        });\n    }\n\n    get IS_RECORDING(): boolean {\n        return this.RECORDING_PHASE;\n    }\n\n    DEFINE_RULE(name: string, impl: RuleImpl): RuleResult {\n        return this.RULE(name, impl);\n    }\n\n    wrapSelfAnalysis(): void {\n        this.performSelfAnalysis();\n    }\n\n    wrapConsume(idx: number, tokenType: TokenType): IToken {\n        return this.consume(idx, tokenType);\n    }\n\n    wrapSubrule(idx: number, rule: RuleResult, args: Args): unknown {\n        return this.subrule(idx, rule, {\n            ARGS: [args]\n        });\n    }\n\n    wrapOr(idx: number, choices: Array<IOrAlt<any>>): void {\n        this.or(idx, choices);\n    }\n\n    wrapOption(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.option(idx, callback);\n    }\n\n    wrapMany(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.many(idx, callback);\n    }\n\n    wrapAtLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.atLeastOne(idx, callback);\n    }\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { IOrAlt, TokenType, TokenTypeDictionary } from 'chevrotain';\nimport type { AbstractElement, Action, Alternatives, Condition, CrossReference, Grammar, Group, Keyword, NamedArgument, ParserRule, RuleCall, UnorderedGroup } from '../languages/generated/ast.js';\nimport type { BaseParser } from './langium-parser.js';\nimport type { AstNode } from '../syntax-tree.js';\nimport type { Cardinality } from '../utils/grammar-utils.js';\nimport { EMPTY_ALT, EOF } from 'chevrotain';\nimport { isAction, isAlternatives, isEndOfFile, isAssignment, isConjunction, isCrossReference, isDisjunction, isGroup, isKeyword, isNegation, isParameterReference, isParserRule, isRuleCall, isTerminalRule, isUnorderedGroup, isBooleanLiteral } from '../languages/generated/ast.js';\nimport { assertUnreachable, ErrorWithLocation } from '../utils/errors.js';\nimport { stream } from '../utils/stream.js';\nimport { findNameAssignment, getAllReachableRules, getTypeName } from '../utils/grammar-utils.js';\n\ntype RuleContext = {\n    optional: number,\n    consume: number,\n    subrule: number,\n    many: number,\n    or: number\n} & ParserContext;\n\ntype ParserContext = {\n    parser: BaseParser\n    tokens: TokenTypeDictionary\n    rules: Map<string, Rule>\n    ruleNames: Map<AstNode, string>\n}\n\ntype Rule = (args: Args) => unknown;\n\ntype Args = Record<string, boolean>;\n\ntype Predicate = (args: Args) => boolean;\n\ntype Method = (args: Args) => void;\n\nexport function createParser<T extends BaseParser>(grammar: Grammar, parser: T, tokens: TokenTypeDictionary): T {\n    const rules = new Map<string, Rule>();\n    const parserContext: ParserContext = {\n        parser,\n        tokens,\n        rules,\n        ruleNames: new Map()\n    };\n    buildRules(parserContext, grammar);\n    return parser;\n}\n\nfunction buildRules(parserContext: ParserContext, grammar: Grammar): void {\n    const reachable = getAllReachableRules(grammar, false);\n    const parserRules = stream(grammar.rules).filter(isParserRule).filter(rule => reachable.has(rule));\n    for (const rule of parserRules) {\n        const ctx: RuleContext = {\n            ...parserContext,\n            consume: 1,\n            optional: 1,\n            subrule: 1,\n            many: 1,\n            or: 1\n        };\n        ctx.rules.set(\n            rule.name,\n            parserContext.parser.rule(rule, buildElement(ctx, rule.definition))\n        );\n    }\n}\n\nfunction buildElement(ctx: RuleContext, element: AbstractElement, ignoreGuard = false): Method {\n    let method: Method;\n    if (isKeyword(element)) {\n        method = buildKeyword(ctx, element);\n    } else if (isAction(element)) {\n        method = buildAction(ctx, element);\n    } else if (isAssignment(element)) {\n        method = buildElement(ctx, element.terminal);\n    } else if (isCrossReference(element)) {\n        method = buildCrossReference(ctx, element);\n    } else if (isRuleCall(element)) {\n        method = buildRuleCall(ctx, element);\n    } else if (isAlternatives(element)) {\n        method = buildAlternatives(ctx, element);\n    } else if (isUnorderedGroup(element)) {\n        method = buildUnorderedGroup(ctx, element);\n    } else if (isGroup(element)) {\n        method = buildGroup(ctx, element);\n    } else if(isEndOfFile(element)) {\n        const idx = ctx.consume++;\n        method = () => ctx.parser.consume(idx, EOF, element);\n    } else {\n        throw new ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\n    }\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\n}\n\nfunction buildAction(ctx: RuleContext, action: Action): Method {\n    const actionType = getTypeName(action);\n    return () => ctx.parser.action(actionType, action);\n}\n\nfunction buildRuleCall(ctx: RuleContext, ruleCall: RuleCall): Method {\n    const rule = ruleCall.rule.ref;\n    if (isParserRule(rule)) {\n        const idx = ctx.subrule++;\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), ruleCall, predicate(args));\n    } else if (isTerminalRule(rule)) {\n        const idx = ctx.consume++;\n        const method = getToken(ctx, rule.name);\n        return () => ctx.parser.consume(idx, method, ruleCall);\n    } else if (!rule) {\n        throw new ErrorWithLocation(ruleCall.$cstNode, `Undefined rule type: ${ruleCall.$type}`);\n    } else {\n        assertUnreachable(rule);\n    }\n}\n\nfunction buildRuleCallPredicate(rule: ParserRule, namedArgs: NamedArgument[]): (args: Args) => Args {\n    const predicates = namedArgs.map(e => buildPredicate(e.value));\n    return (args) => {\n        const ruleArgs: Args = {};\n        for (let i = 0; i < predicates.length; i++) {\n            const ruleTarget = rule.parameters[i];\n            const predicate = predicates[i];\n            ruleArgs[ruleTarget.name] = predicate(args);\n        }\n        return ruleArgs;\n    };\n}\n\ninterface PredicatedMethod {\n    ALT: Method,\n    GATE?: Predicate\n}\n\nfunction buildPredicate(condition: Condition): Predicate {\n    if (isDisjunction(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) || right(args));\n    } else if (isConjunction(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) && right(args));\n    } else if (isNegation(condition)) {\n        const value = buildPredicate(condition.value);\n        return (args) => !value(args);\n    } else if (isParameterReference(condition)) {\n        const name = condition.parameter.ref!.name;\n        return (args) => args !== undefined && args[name] === true;\n    } else if (isBooleanLiteral(condition)) {\n        const value = Boolean(condition.true);\n        return () => value;\n    }\n    assertUnreachable(condition);\n}\n\nfunction buildAlternatives(ctx: RuleContext, alternatives: Alternatives): Method {\n    if (alternatives.elements.length === 1) {\n        return buildElement(ctx, alternatives.elements[0]);\n    } else {\n        const methods: PredicatedMethod[] = [];\n\n        for (const element of alternatives.elements) {\n            const predicatedMethod: PredicatedMethod = {\n                // Since we handle the guard condition in the alternative already\n                // We can ignore the group guard condition inside\n                ALT: buildElement(ctx, element, true)\n            };\n            const guard = getGuardCondition(element);\n            if (guard) {\n                predicatedMethod.GATE = buildPredicate(guard);\n            }\n            methods.push(predicatedMethod);\n        }\n\n        const idx = ctx.or++;\n        return (args) => ctx.parser.alternatives(idx, methods.map(method => {\n            const alt: IOrAlt<unknown> = {\n                ALT: () => method.ALT(args)\n            };\n            const gate = method.GATE;\n            if (gate) {\n                alt.GATE = () => gate(args);\n            }\n            return alt;\n        }));\n    }\n}\n\nfunction buildUnorderedGroup(ctx: RuleContext, group: UnorderedGroup): Method {\n    if (group.elements.length === 1) {\n        return buildElement(ctx, group.elements[0]);\n    }\n    const methods: PredicatedMethod[] = [];\n\n    for (const element of group.elements) {\n        const predicatedMethod: PredicatedMethod = {\n            // Since we handle the guard condition in the alternative already\n            // We can ignore the group guard condition inside\n            ALT: buildElement(ctx, element, true)\n        };\n        const guard = getGuardCondition(element);\n        if (guard) {\n            predicatedMethod.GATE = buildPredicate(guard);\n        }\n        methods.push(predicatedMethod);\n    }\n\n    const orIdx = ctx.or++;\n\n    const idFunc = (groupIdx: number, lParser: BaseParser) => {\n        const stackId = lParser.getRuleStack().join('-');\n        return `uGroup_${groupIdx}_${stackId}`;\n    };\n    const alternatives: Method = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {\n        const alt: IOrAlt<unknown> = { ALT: () => true };\n        const parser = ctx.parser;\n        alt.ALT = () => {\n            method.ALT(args);\n            if (!parser.isRecording()) {\n                const key = idFunc(orIdx, parser);\n                if (!parser.unorderedGroups.get(key)) {\n                    // init after clear state\n                    parser.unorderedGroups.set(key, []);\n                }\n                const groupState = parser.unorderedGroups.get(key)!;\n                if (typeof groupState?.[idx] === 'undefined') {\n                    // Not accessed yet\n                    groupState[idx] = true;\n                }\n            }\n        };\n        const gate = method.GATE;\n        if (gate) {\n            alt.GATE = () => gate(args);\n        } else {\n            alt.GATE = () => {\n                const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\n                const allow = !trackedAlternatives?.[idx];\n                return allow;\n            };\n        }\n        return alt;\n    }));\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, '*');\n    return (args) => {\n        wrapped(args);\n        if (!ctx.parser.isRecording()) {\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\n        }\n    };\n}\n\nfunction buildGroup(ctx: RuleContext, group: Group): Method {\n    const methods = group.elements.map(e => buildElement(ctx, e));\n    return (args) => methods.forEach(method => method(args));\n}\n\nfunction getGuardCondition(element: AbstractElement): Condition | undefined {\n    if (isGroup(element)) {\n        return element.guardCondition;\n    }\n    return undefined;\n}\n\nfunction buildCrossReference(ctx: RuleContext, crossRef: CrossReference, terminal = crossRef.terminal): Method {\n    if (!terminal) {\n        if (!crossRef.type.ref) {\n            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);\n        }\n        const assignment = findNameAssignment(crossRef.type.ref);\n        const assignTerminal = assignment?.terminal;\n        if (!assignTerminal) {\n            throw new Error('Could not find name assignment for type: ' + getTypeName(crossRef.type.ref));\n        }\n        return buildCrossReference(ctx, crossRef, assignTerminal);\n    } else if (isRuleCall(terminal) && isParserRule(terminal.rule.ref)) {\n        const idx = ctx.subrule++;\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, terminal.rule.ref as ParserRule), crossRef, args);\n    } else if (isRuleCall(terminal) && isTerminalRule(terminal.rule.ref)) {\n        const idx = ctx.consume++;\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\n        return () => ctx.parser.consume(idx, terminalRule, crossRef);\n    } else if (isKeyword(terminal)) {\n        const idx = ctx.consume++;\n        const keyword = getToken(ctx, terminal.value);\n        return () => ctx.parser.consume(idx, keyword, crossRef);\n    }\n    else {\n        throw new Error('Could not build cross reference parser');\n    }\n}\n\nfunction buildKeyword(ctx: RuleContext, keyword: Keyword): Method {\n    const idx = ctx.consume++;\n    const token = ctx.tokens[keyword.value];\n    if (!token) {\n        throw new Error('Could not find token for keyword: ' + keyword.value);\n    }\n    return () => ctx.parser.consume(idx, token, keyword);\n}\n\nfunction wrap(ctx: RuleContext, guard: Condition | undefined, method: Method, cardinality: Cardinality): Method {\n    const gate = guard && buildPredicate(guard);\n\n    if (!cardinality) {\n        if (gate) {\n            const idx = ctx.or++;\n            return (args) => ctx.parser.alternatives(idx, [\n                {\n                    ALT: () => method(args),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: EMPTY_ALT(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        } else {\n            return method;\n        }\n    }\n\n    if (cardinality === '*') {\n        const idx = ctx.many++;\n        return (args) => ctx.parser.many(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    } else if (cardinality === '+') {\n        const idx = ctx.many++;\n        if (gate) {\n            const orIdx = ctx.or++;\n            // In the case of a guard condition for the `+` group\n            // We combine it with an empty alternative\n            // If the condition returns true, it needs to parse at least a single iteration\n            // If its false, it is not allowed to parse anything\n            return (args) => ctx.parser.alternatives(orIdx, [\n                {\n                    ALT: () => ctx.parser.atLeastOne(idx, {\n                        DEF: () => method(args)\n                    }),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: EMPTY_ALT(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        } else {\n            return (args) => ctx.parser.atLeastOne(idx, {\n                DEF: () => method(args),\n            });\n        }\n    } else if (cardinality === '?') {\n        const idx = ctx.optional++;\n        return (args) => ctx.parser.optional(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    } else {\n        assertUnreachable(cardinality);\n    }\n}\n\nfunction getRule(ctx: ParserContext, element: ParserRule | AbstractElement): Rule {\n    const name = getRuleName(ctx, element);\n    const rule = ctx.rules.get(name);\n    if (!rule) throw new Error(`Rule \"${name}\" not found.\"`);\n    return rule;\n}\n\nfunction getRuleName(ctx: ParserContext, element: ParserRule | AbstractElement): string {\n    if (isParserRule(element)) {\n        return element.name;\n    } else if (ctx.ruleNames.has(element)) {\n        return ctx.ruleNames.get(element)!;\n    } else {\n        let item: AstNode = element;\n        let parent: AstNode = item.$container!;\n        let ruleName: string = element.$type;\n        while (!isParserRule(parent)) {\n            if (isGroup(parent) || isAlternatives(parent) || isUnorderedGroup(parent)) {\n                const index = parent.elements.indexOf(item as AbstractElement);\n                ruleName = index.toString() + ':' + ruleName;\n            }\n            item = parent;\n            parent = parent.$container!;\n        }\n        const rule = parent as ParserRule;\n        ruleName = rule.name + ':' + ruleName;\n        ctx.ruleNames.set(element, ruleName);\n        return ruleName;\n    }\n}\n\nfunction getToken(ctx: ParserContext, name: string): TokenType {\n    const token = ctx.tokens[name];\n    if (!token) throw new Error(`Token \"${name}\" not found.\"`);\n    return token;\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport { LangiumParser } from './langium-parser.js';\nimport { createParser } from './parser-builder-base.js';\n\n/**\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\n * available at `services.Grammar`.\n */\nexport function createLangiumParser(services: LangiumCoreServices): LangiumParser {\n    const parser = prepareLangiumParser(services);\n    parser.finalize();\n    return parser;\n}\n\n/**\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\n * information when the parser is initially validated.\n */\nexport function prepareLangiumParser(services: LangiumCoreServices): LangiumParser {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new LangiumParser(services);\n    return createParser(grammar, parser, lexer.definition);\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { CustomPatternMatcherFunc, TokenPattern, TokenType, TokenVocabulary } from 'chevrotain';\nimport type { AbstractRule, Grammar, Keyword, TerminalRule } from '../languages/generated/ast.js';\nimport type { Stream } from '../utils/stream.js';\nimport { Lexer } from 'chevrotain';\nimport { isKeyword, isParserRule, isTerminalRule } from '../languages/generated/ast.js';\nimport { streamAllContents } from '../utils/ast-utils.js';\nimport { getAllReachableRules, terminalRegex } from '../utils/grammar-utils.js';\nimport { getCaseInsensitivePattern, isWhitespace, partialMatches } from '../utils/regexp-utils.js';\nimport { stream } from '../utils/stream.js';\n\nexport interface TokenBuilderOptions {\n    caseInsensitive?: boolean\n}\n\nexport interface TokenBuilder {\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary;\n}\n\nexport class DefaultTokenBuilder implements TokenBuilder {\n\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary {\n        const reachableRules = stream(getAllReachableRules(grammar, false));\n        const terminalTokens: TokenType[] = this.buildTerminalTokens(reachableRules);\n        const tokens: TokenType[] = this.buildKeywordTokens(reachableRules, terminalTokens, options);\n\n        terminalTokens.forEach(terminalToken => {\n            const pattern = terminalToken.PATTERN;\n            if (typeof pattern === 'object' && pattern && 'test' in pattern && isWhitespace(pattern)) {\n                tokens.unshift(terminalToken);\n            } else {\n                tokens.push(terminalToken);\n            }\n        });\n        // We don't need to add the EOF token explicitly.\n        // It is automatically available at the end of the token stream.\n        return tokens;\n    }\n\n    protected buildTerminalTokens(rules: Stream<AbstractRule>): TokenType[] {\n        return rules.filter(isTerminalRule).filter(e => !e.fragment)\n            .map(terminal => this.buildTerminalToken(terminal)).toArray();\n    }\n\n    protected buildTerminalToken(terminal: TerminalRule): TokenType {\n        const regex = terminalRegex(terminal);\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\n        const tokenType: TokenType = {\n            name: terminal.name,\n            PATTERN: pattern,\n            LINE_BREAKS: true\n        };\n        if (terminal.hidden) {\n            // Only skip tokens that are able to accept whitespace\n            tokenType.GROUP = isWhitespace(regex) ? Lexer.SKIPPED : 'hidden';\n        }\n        return tokenType;\n    }\n\n    protected requiresCustomPattern(regex: RegExp): boolean {\n        if (regex.flags.includes('u')) {\n            // Unicode regexes are not supported by Chevrotain.\n            return true;\n        } else if (regex.source.includes('?<=') || regex.source.includes('?<!')) {\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    protected regexPatternFunction(regex: RegExp): CustomPatternMatcherFunc {\n        const stickyRegex = new RegExp(regex, regex.flags + 'y');\n        return (text, offset) => {\n            stickyRegex.lastIndex = offset;\n            const execResult = stickyRegex.exec(text);\n            return execResult;\n        };\n    }\n\n    protected buildKeywordTokens(rules: Stream<AbstractRule>, terminalTokens: TokenType[], options?: TokenBuilderOptions): TokenType[] {\n        return rules\n            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\n            .filter(isParserRule)\n            .flatMap(rule => streamAllContents(rule).filter(isKeyword))\n            .distinct(e => e.value).toArray()\n            // Sort keywords by descending length\n            .sort((a, b) => b.value.length - a.value.length)\n            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, Boolean(options?.caseInsensitive)));\n    }\n\n    protected buildKeywordToken(keyword: Keyword, terminalTokens: TokenType[], caseInsensitive: boolean): TokenType {\n        return {\n            name: keyword.value,\n            PATTERN: this.buildKeywordPattern(keyword, caseInsensitive),\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\n        };\n    }\n\n    protected buildKeywordPattern(keyword: Keyword, caseInsensitive: boolean): TokenPattern {\n        return caseInsensitive ?\n            new RegExp(getCaseInsensitivePattern(keyword.value)) :\n            keyword.value;\n    }\n\n    protected findLongerAlt(keyword: Keyword, terminalTokens: TokenType[]): TokenType[] {\n        return terminalTokens.reduce((longerAlts: TokenType[], token) => {\n            const pattern = token?.PATTERN as RegExp;\n            if (pattern?.source && partialMatches('^' + pattern.source + '$', keyword.value)) {\n                longerAlts.push(token);\n            }\n            return longerAlts;\n        }, []);\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { AbstractElement, AbstractRule } from '../languages/generated/ast.js';\nimport type { CstNode } from '../syntax-tree.js';\nimport { isCrossReference, isRuleCall } from '../languages/generated/ast.js';\nimport { getCrossReferenceTerminal, getRuleType } from '../utils/grammar-utils.js';\n\n/**\n * Language-specific service for converting string values from the source text format into a value to be held in the AST.\n */\nexport interface ValueConverter {\n    /**\n     * Converts a string value from the source text format into a value to be held in the AST.\n     */\n    convert(input: string, cstNode: CstNode): ValueType;\n}\n\nexport type ValueType = string | number | boolean | bigint | Date;\n\nexport class DefaultValueConverter implements ValueConverter {\n\n    convert(input: string, cstNode: CstNode): ValueType {\n        let feature: AbstractElement | undefined = cstNode.grammarSource;\n        if (isCrossReference(feature)) {\n            feature = getCrossReferenceTerminal(feature);\n        }\n        if (isRuleCall(feature)) {\n            const rule = feature.rule.ref;\n            if (!rule) {\n                throw new Error('This cst node was not parsed by a rule.');\n            }\n            return this.runConverter(rule, input, cstNode);\n        }\n        return input;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected runConverter(rule: AbstractRule, input: string, cstNode: CstNode): ValueType {\n        switch (rule.name.toUpperCase()) {\n            case 'INT': return ValueConverter.convertInt(input);\n            case 'STRING': return ValueConverter.convertString(input);\n            case 'ID': return ValueConverter.convertID(input);\n        }\n        switch (getRuleType(rule)?.toLowerCase()) {\n            case 'number': return ValueConverter.convertNumber(input);\n            case 'boolean': return ValueConverter.convertBoolean(input);\n            case 'bigint': return ValueConverter.convertBigint(input);\n            case 'date': return ValueConverter.convertDate(input);\n            default: return input;\n        }\n    }\n}\n\nexport namespace ValueConverter {\n\n    export function convertString(input: string): string {\n        let result = '';\n        for (let i = 1; i < input.length - 1; i++) {\n            const c = input.charAt(i);\n            if (c === '\\\\') {\n                const c1 = input.charAt(++i);\n                result += convertEscapeCharacter(c1);\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n\n    function convertEscapeCharacter(char: string): string {\n        switch (char) {\n            case 'b': return '\\b';\n            case 'f': return '\\f';\n            case 'n': return '\\n';\n            case 'r': return '\\r';\n            case 't': return '\\t';\n            case 'v': return '\\v';\n            case '0': return '\\0';\n            default: return char;\n        }\n    }\n\n    export function convertID(input: string): string {\n        if (input.charAt(0) === '^') {\n            return input.substring(1);\n        } else {\n            return input;\n        }\n    }\n\n    export function convertInt(input: string): number {\n        return parseInt(input);\n    }\n\n    export function convertBigint(input: string): bigint {\n        return BigInt(input);\n    }\n\n    export function convertDate(input: string): Date {\n        return new Date(input);\n    }\n\n    export function convertNumber(input: string): number {\n        return Number(input);\n    }\n\n    export function convertBoolean(input: string): boolean {\n        return input.toLowerCase() === 'true';\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { CancellationToken, CancellationTokenSource, type AbstractCancellationTokenSource } from '../utils/cancellation.js';\n\nexport type MaybePromise<T> = T | Promise<T>\n\n/**\n * Delays the execution of the current code to the next tick of the event loop.\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\n */\nexport function delayNextTick(): Promise<void> {\n    return new Promise(resolve => {\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\n        // Using `setTimeout` of the browser API accomplishes the same result.\n        if (typeof setImmediate === 'undefined') {\n            setTimeout(resolve, 0);\n        } else {\n            setImmediate(resolve);\n        }\n    });\n}\n\nlet lastTick = 0;\nlet globalInterruptionPeriod = 10;\n\n/**\n * Reset the global interruption period and create a cancellation token source.\n */\nexport function startCancelableOperation(): AbstractCancellationTokenSource {\n    lastTick = Date.now();\n    return new CancellationTokenSource();\n}\n\n/**\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\n * The default value is 10ms.\n */\nexport function setInterruptionPeriod(period: number): void {\n    globalInterruptionPeriod = period;\n}\n\n/**\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\n * this symbol as rejection reason.\n */\nexport const OperationCancelled = Symbol('OperationCancelled');\n\n/**\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\n * has been cancelled.\n */\nexport function isOperationCancelled(err: unknown): err is typeof OperationCancelled {\n    return err === OperationCancelled;\n}\n\n/**\n * This function does two things:\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\n *\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\n * the promise) to avoid that event being exposed as an error.\n */\nexport async function interruptAndCheck(token: CancellationToken): Promise<void> {\n    if (token === CancellationToken.None) {\n        // Early exit in case cancellation was disabled by the caller\n        return;\n    }\n    const current = Date.now();\n    if (current - lastTick >= globalInterruptionPeriod) {\n        lastTick = current;\n        await delayNextTick();\n    }\n    if (token.isCancellationRequested) {\n        throw OperationCancelled;\n    }\n}\n\n/**\n * Simple implementation of the deferred pattern.\n * An object that exposes a promise and functions to resolve and reject it.\n */\nexport class Deferred<T = void> {\n    resolve: (value: T) => this;\n    reject: (err?: unknown) => this;\n\n    promise = new Promise<T>((resolve, reject) => {\n        this.resolve = (arg) => {\n            resolve(arg);\n            return this;\n        };\n        this.reject = (err) => {\n            reject(err);\n            return this;\n        };\n    });\n}\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            const start = this.offsetAt(range.start);\n            const end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(changes, version) {\n        for (const change of changes) {\n            if (FullTextDocument.isIncremental(change)) {\n                // makes sure start is before end\n                const range = getWellformedRange(change.range);\n                // update content\n                const startOffset = this.offsetAt(range.start);\n                const endOffset = this.offsetAt(range.end);\n                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n                // update the offsets\n                const startLine = Math.max(range.start.line, 0);\n                const endLine = Math.max(range.end.line, 0);\n                let lineOffsets = this._lineOffsets;\n                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n                if (endLine - startLine === addedLineOffsets.length) {\n                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\n                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n                    }\n                }\n                else {\n                    if (addedLineOffsets.length < 10000) {\n                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\n                    }\n                    else { // avoid too many arguments for splice\n                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n                    }\n                }\n                const diff = change.text.length - (endOffset - startOffset);\n                if (diff !== 0) {\n                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n                        lineOffsets[i] = lineOffsets[i] + diff;\n                    }\n                }\n            }\n            else if (FullTextDocument.isFull(change)) {\n                this._content = change.text;\n                this._lineOffsets = undefined;\n            }\n            else {\n                throw new Error('Unknown change event received');\n            }\n        }\n        this._version = version;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            this._lineOffsets = computeLineOffsets(this._content, true);\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        const lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return { line: 0, character: offset };\n        }\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        const line = low - 1;\n        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);\n        return { line, character: offset - lineOffsets[line] };\n    }\n    offsetAt(position) {\n        const lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        const lineOffset = lineOffsets[position.line];\n        if (position.character <= 0) {\n            return lineOffset;\n        }\n        const nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        const offset = Math.min(lineOffset + position.character, nextLineOffset);\n        return this.ensureBeforeEOL(offset, lineOffset);\n    }\n    ensureBeforeEOL(offset, lineOffset) {\n        while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {\n            offset--;\n        }\n        return offset;\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n    static isIncremental(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    static isFull(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n}\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new text document.\n     *\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param version The document's initial version number.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Updates a TextDocument by modifying its content.\n     *\n     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.\n     * @param changes the changes to apply to the document.\n     * @param version the changes version for the document.\n     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.\n     *\n     */\n    function update(document, changes, version) {\n        if (document instanceof FullTextDocument) {\n            document.update(changes, version);\n            return document;\n        }\n        else {\n            throw new Error('TextDocument.update: document must be created by TextDocument.create');\n        }\n    }\n    TextDocument.update = update;\n    function applyEdits(document, edits) {\n        const text = document.getText();\n        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {\n            const diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = 0;\n        const spans = [];\n        for (const e of sortedEdits) {\n            const startOffset = document.offsetAt(e.range.start);\n            if (startOffset < lastModifiedOffset) {\n                throw new Error('Overlapping edit');\n            }\n            else if (startOffset > lastModifiedOffset) {\n                spans.push(text.substring(lastModifiedOffset, startOffset));\n            }\n            if (e.newText.length) {\n                spans.push(e.newText);\n            }\n            lastModifiedOffset = document.offsetAt(e.range.end);\n        }\n        spans.push(text.substr(lastModifiedOffset));\n        return spans.join('');\n    }\n    TextDocument.applyEdits = applyEdits;\n})(TextDocument || (TextDocument = {}));\nfunction mergeSort(data, compare) {\n    if (data.length <= 1) {\n        // sorted\n        return data;\n    }\n    const p = (data.length / 2) | 0;\n    const left = data.slice(0, p);\n    const right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    let leftIdx = 0;\n    let rightIdx = 0;\n    let i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n        const ret = compare(left[leftIdx], right[rightIdx]);\n        if (ret <= 0) {\n            // smaller_equal -> take left to preserve order\n            data[i++] = left[leftIdx++];\n        }\n        else {\n            // greater -> take right\n            data[i++] = right[rightIdx++];\n        }\n    }\n    while (leftIdx < left.length) {\n        data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n        data[i++] = right[rightIdx++];\n    }\n    return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\n    const result = isAtLineStart ? [textOffset] : [];\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charCodeAt(i);\n        if (isEOL(ch)) {\n            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                i++;\n            }\n            result.push(textOffset + i + 1);\n        }\n    }\n    return result;\n}\nfunction isEOL(char) {\n    return char === 13 /* CharCode.CarriageReturn */ || char === 10 /* CharCode.LineFeed */;\n}\nfunction getWellformedRange(range) {\n    const start = range.start;\n    const end = range.end;\n    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {\n        return { start: end, end: start };\n    }\n    return range;\n}\nfunction getWellformedEdit(textEdit) {\n    const range = getWellformedRange(textEdit.range);\n    if (range !== textEdit.range) {\n        return { newText: textEdit.newText, range };\n    }\n    return textEdit;\n}\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n// !!!!!\n// SEE https://github.com/microsoft/vscode/blob/master/src/vs/base/common/platform.ts\n// !!!!!\n\ndeclare const process: { platform: 'win32' };\ndeclare const navigator: { userAgent: string };\n\nexport let isWindows: boolean;\n\nif (typeof process === 'object') {\n\tisWindows = process.platform === 'win32';\n} else if (typeof navigator === 'object') {\n\tlet userAgent = navigator.userAgent;\n\tisWindows = userAgent.indexOf('Windows') >= 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { CharCode } from './charCode'\nimport { isWindows } from './platform';\n\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\n\nfunction _validateUri(ret: URI, _strict?: boolean): void {\n\n\t// scheme, must be set\n\tif (!ret.scheme && _strict) {\n\t\tthrow new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\n\t}\n\n\t// scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n\t// ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\tif (ret.scheme && !_schemePattern.test(ret.scheme)) {\n\t\tthrow new Error('[UriError]: Scheme contains illegal characters.');\n\t}\n\n\t// path, http://tools.ietf.org/html/rfc3986#section-3.3\n\t// If a URI contains an authority component, then the path component\n\t// must either be empty or begin with a slash (\"/\") character.  If a URI\n\t// does not contain an authority component, then the path cannot begin\n\t// with two slash characters (\"//\").\n\tif (ret.path) {\n\t\tif (ret.authority) {\n\t\t\tif (!_singleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n\t\t\t}\n\t\t} else {\n\t\t\tif (_doubleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n\t\t\t}\n\t\t}\n\t}\n}\n\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme: string, _strict: boolean): string {\n\tif (!scheme && !_strict) {\n\t\treturn 'file';\n\t}\n\treturn scheme;\n}\n\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme: string, path: string): string {\n\n\t// the slash-character is our 'default base' as we don't\n\t// support constructing URIs relative to other URIs. This\n\t// also means that we alter and potentially break paths.\n\t// see https://tools.ietf.org/html/rfc3986#section-5.1.4\n\tswitch (scheme) {\n\t\tcase 'https':\n\t\tcase 'http':\n\t\tcase 'file':\n\t\t\tif (!path) {\n\t\t\t\tpath = _slash;\n\t\t\t} else if (path[0] !== _slash) {\n\t\t\t\tpath = _slash + path;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\treturn path;\n}\n\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nexport class URI implements UriComponents {\n\n\tstatic isUri(thing: any): thing is URI {\n\t\tif (thing instanceof URI) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!thing) {\n\t\t\treturn false;\n\t\t}\n\t\treturn typeof (<URI>thing).authority === 'string'\n\t\t\t&& typeof (<URI>thing).fragment === 'string'\n\t\t\t&& typeof (<URI>thing).path === 'string'\n\t\t\t&& typeof (<URI>thing).query === 'string'\n\t\t\t&& typeof (<URI>thing).scheme === 'string'\n\t\t\t&& typeof (<URI>thing).fsPath === 'string'\n\t\t\t&& typeof (<URI>thing).with === 'function'\n\t\t\t&& typeof (<URI>thing).toString === 'function';\n\t}\n\n\t/**\n\t * scheme is the 'http' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part before the first colon.\n\t */\n\treadonly scheme: string;\n\n\t/**\n\t * authority is the 'www.example.com' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part between the first double slashes and the next slash.\n\t */\n\treadonly authority: string;\n\n\t/**\n\t * path is the '/some/path' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly path: string;\n\n\t/**\n\t * query is the 'query' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly query: string;\n\n\t/**\n\t * fragment is the 'fragment' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly fragment: string;\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(scheme: string, authority?: string, path?: string, query?: string, fragment?: string, _strict?: boolean);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(components: UriComponents);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(schemeOrData: string | UriComponents, authority?: string, path?: string, query?: string, fragment?: string, _strict: boolean = false) {\n\n\t\tif (typeof schemeOrData === 'object') {\n\t\t\tthis.scheme = schemeOrData.scheme || _empty;\n\t\t\tthis.authority = schemeOrData.authority || _empty;\n\t\t\tthis.path = schemeOrData.path || _empty;\n\t\t\tthis.query = schemeOrData.query || _empty;\n\t\t\tthis.fragment = schemeOrData.fragment || _empty;\n\t\t\t// no validation because it's this URI\n\t\t\t// that creates uri components.\n\t\t\t// _validateUri(this);\n\t\t} else {\n\t\t\tthis.scheme = _schemeFix(schemeOrData, _strict);\n\t\t\tthis.authority = authority || _empty;\n\t\t\tthis.path = _referenceResolution(this.scheme, path || _empty);\n\t\t\tthis.query = query || _empty;\n\t\t\tthis.fragment = fragment || _empty;\n\n\t\t\t_validateUri(this, _strict);\n\t\t}\n\t}\n\n\t// ---- filesystem path -----------------------\n\n\t/**\n\t * Returns a string representing the corresponding file system path of this URI.\n\t * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n\t * platform specific path separator.\n\t *\n\t * * Will *not* validate the path for invalid characters and semantics.\n\t * * Will *not* look at the scheme of this URI.\n\t * * The result shall *not* be used for display purposes but for accessing a file on disk.\n\t *\n\t *\n\t * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n\t * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n\t *\n\t * ```ts\n\t\tconst u = URI.parse('file://server/c$/folder/file.txt')\n\t\tu.authority === 'server'\n\t\tu.path === '/shares/c$/file.txt'\n\t\tu.fsPath === '\\\\server\\c$\\folder\\file.txt'\n\t```\n\t *\n\t * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n\t * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\n\t * with URIs that represent files on disk (`file` scheme).\n\t */\n\tget fsPath(): string {\n\t\t// if (this.scheme !== 'file') {\n\t\t// \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n\t\t// }\n\t\treturn uriToFsPath(this, false);\n\t}\n\n\t// ---- modify to new -------------------------\n\n\twith(change: { scheme?: string; authority?: string | null; path?: string | null; query?: string | null; fragment?: string | null }): URI {\n\n\t\tif (!change) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet { scheme, authority, path, query, fragment } = change;\n\t\tif (scheme === undefined) {\n\t\t\tscheme = this.scheme;\n\t\t} else if (scheme === null) {\n\t\t\tscheme = _empty;\n\t\t}\n\t\tif (authority === undefined) {\n\t\t\tauthority = this.authority;\n\t\t} else if (authority === null) {\n\t\t\tauthority = _empty;\n\t\t}\n\t\tif (path === undefined) {\n\t\t\tpath = this.path;\n\t\t} else if (path === null) {\n\t\t\tpath = _empty;\n\t\t}\n\t\tif (query === undefined) {\n\t\t\tquery = this.query;\n\t\t} else if (query === null) {\n\t\t\tquery = _empty;\n\t\t}\n\t\tif (fragment === undefined) {\n\t\t\tfragment = this.fragment;\n\t\t} else if (fragment === null) {\n\t\t\tfragment = _empty;\n\t\t}\n\n\t\tif (scheme === this.scheme\n\t\t\t&& authority === this.authority\n\t\t\t&& path === this.path\n\t\t\t&& query === this.query\n\t\t\t&& fragment === this.fragment) {\n\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new Uri(scheme, authority, path, query, fragment);\n\t}\n\n\t// ---- parse & validate ------------------------\n\n\t/**\n\t * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\n\t * `file:///usr/home`, or `scheme:with/path`.\n\t *\n\t * @param value A string which represents an URI (see `URI#toString`).\n\t */\n\tstatic parse(value: string, _strict: boolean = false): URI {\n\t\tconst match = _regexp.exec(value);\n\t\tif (!match) {\n\t\t\treturn new Uri(_empty, _empty, _empty, _empty, _empty);\n\t\t}\n\t\treturn new Uri(\n\t\t\tmatch[2] || _empty,\n\t\t\tpercentDecode(match[4] || _empty),\n\t\t\tpercentDecode(match[5] || _empty),\n\t\t\tpercentDecode(match[7] || _empty),\n\t\t\tpercentDecode(match[9] || _empty),\n\t\t\t_strict\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n\t * `/usr/home`, or `\\\\server\\share\\some\\path`.\n\t *\n\t * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n\t * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n\t * `URI.parse('file://' + path)` because the path might contain characters that are\n\t * interpreted (# and ?). See the following sample:\n\t * ```ts\n\tconst good = URI.file('/coding/c#/project1');\n\tgood.scheme === 'file';\n\tgood.path === '/coding/c#/project1';\n\tgood.fragment === '';\n\tconst bad = URI.parse('file://' + '/coding/c#/project1');\n\tbad.scheme === 'file';\n\tbad.path === '/coding/c'; // path is now broken\n\tbad.fragment === '/project1';\n\t```\n\t *\n\t * @param path A file system path (see `URI#fsPath`)\n\t */\n\tstatic file(path: string): URI {\n\n\t\tlet authority = _empty;\n\n\t\t// normalize to fwd-slashes on windows,\n\t\t// on other systems bwd-slashes are valid\n\t\t// filename character, eg /f\\oo/ba\\r.txt\n\t\tif (isWindows) {\n\t\t\tpath = path.replace(/\\\\/g, _slash);\n\t\t}\n\n\t\t// check for authority as used in UNC shares\n\t\t// or use the path as given\n\t\tif (path[0] === _slash && path[1] === _slash) {\n\t\t\tconst idx = path.indexOf(_slash, 2);\n\t\t\tif (idx === -1) {\n\t\t\t\tauthority = path.substring(2);\n\t\t\t\tpath = _slash;\n\t\t\t} else {\n\t\t\t\tauthority = path.substring(2, idx);\n\t\t\t\tpath = path.substring(idx) || _slash;\n\t\t\t}\n\t\t}\n\n\t\treturn new Uri('file', authority, path, _empty, _empty);\n\t}\n\n\tstatic from(components: { scheme: string; authority?: string; path?: string; query?: string; fragment?: string }): URI {\n\t\tconst result = new Uri(\n\t\t\tcomponents.scheme,\n\t\t\tcomponents.authority,\n\t\t\tcomponents.path,\n\t\t\tcomponents.query,\n\t\t\tcomponents.fragment,\n\t\t);\n\t\t_validateUri(result, true);\n\t\treturn result;\n\t}\n\n\t// ---- printing/externalize ---------------------------\n\n\t/**\n\t * Creates a string representation for this URI. It's guaranteed that calling\n\t * `URI.parse` with the result of this function creates an URI which is equal\n\t * to this URI.\n\t *\n\t * * The result shall *not* be used for display purposes but for externalization or transport.\n\t * * The result will be encoded using the percentage encoding and encoding happens mostly\n\t * ignore the scheme-specific encoding rules.\n\t *\n\t * @param skipEncoding Do not encode the result, default is `false`\n\t */\n\ttoString(skipEncoding: boolean = false): string {\n\t\treturn _asFormatted(this, skipEncoding);\n\t}\n\n\ttoJSON(): UriComponents {\n\t\treturn this;\n\t}\n\n\tstatic revive(data: UriComponents | URI): URI;\n\tstatic revive(data: UriComponents | URI | undefined): URI | undefined;\n\tstatic revive(data: UriComponents | URI | null): URI | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null {\n\t\tif (!data) {\n\t\t\treturn <any>data;\n\t\t} else if (data instanceof URI) {\n\t\t\treturn data;\n\t\t} else {\n\t\t\tconst result = new Uri(data);\n\t\t\tresult._formatted = (<UriState>data).external;\n\t\t\tresult._fsPath = (<UriState>data)._sep === _pathSepMarker ? (<UriState>data).fsPath : null;\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport interface UriComponents {\n\tscheme: string;\n\tauthority: string;\n\tpath: string;\n\tquery: string;\n\tfragment: string;\n}\n\ninterface UriState extends UriComponents {\n\t$mid: number;\n\texternal: string;\n\tfsPath: string;\n\t_sep: 1 | undefined;\n}\n\nconst _pathSepMarker = isWindows ? 1 : undefined;\n\n// This class exists so that URI is compatible with vscode.Uri (API).\nclass Uri extends URI {\n\n\t_formatted: string | null = null;\n\t_fsPath: string | null = null;\n\n\toverride get fsPath(): string {\n\t\tif (!this._fsPath) {\n\t\t\tthis._fsPath = uriToFsPath(this, false);\n\t\t}\n\t\treturn this._fsPath;\n\t}\n\n\toverride toString(skipEncoding: boolean = false): string {\n\t\tif (!skipEncoding) {\n\t\t\tif (!this._formatted) {\n\t\t\t\tthis._formatted = _asFormatted(this, false);\n\t\t\t}\n\t\t\treturn this._formatted;\n\t\t} else {\n\t\t\t// we don't cache that\n\t\t\treturn _asFormatted(this, true);\n\t\t}\n\t}\n\n\toverride toJSON(): UriComponents {\n\t\tconst res = <UriState>{\n\t\t\t$mid: 1\n\t\t};\n\t\t// cached state\n\t\tif (this._fsPath) {\n\t\t\tres.fsPath = this._fsPath;\n\t\t\tres._sep = _pathSepMarker;\n\t\t}\n\t\tif (this._formatted) {\n\t\t\tres.external = this._formatted;\n\t\t}\n\t\t// uri components\n\t\tif (this.path) {\n\t\t\tres.path = this.path;\n\t\t}\n\t\tif (this.scheme) {\n\t\t\tres.scheme = this.scheme;\n\t\t}\n\t\tif (this.authority) {\n\t\t\tres.authority = this.authority;\n\t\t}\n\t\tif (this.query) {\n\t\t\tres.query = this.query;\n\t\t}\n\t\tif (this.fragment) {\n\t\t\tres.fragment = this.fragment;\n\t\t}\n\t\treturn res;\n\t}\n}\n\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable: { [ch: number]: string } = {\n\t[CharCode.Colon]: '%3A', // gen-delims\n\t[CharCode.Slash]: '%2F',\n\t[CharCode.QuestionMark]: '%3F',\n\t[CharCode.Hash]: '%23',\n\t[CharCode.OpenSquareBracket]: '%5B',\n\t[CharCode.CloseSquareBracket]: '%5D',\n\t[CharCode.AtSign]: '%40',\n\n\t[CharCode.ExclamationMark]: '%21', // sub-delims\n\t[CharCode.DollarSign]: '%24',\n\t[CharCode.Ampersand]: '%26',\n\t[CharCode.SingleQuote]: '%27',\n\t[CharCode.OpenParen]: '%28',\n\t[CharCode.CloseParen]: '%29',\n\t[CharCode.Asterisk]: '%2A',\n\t[CharCode.Plus]: '%2B',\n\t[CharCode.Comma]: '%2C',\n\t[CharCode.Semicolon]: '%3B',\n\t[CharCode.Equals]: '%3D',\n\n\t[CharCode.Space]: '%20',\n};\n\nfunction encodeURIComponentFast(uriComponent: string, isPath: boolean, isAuthority: boolean): string {\n\tlet res: string | undefined = undefined;\n\tlet nativeEncodePos = -1;\n\n\tfor (let pos = 0; pos < uriComponent.length; pos++) {\n\t\tconst code = uriComponent.charCodeAt(pos);\n\n\t\t// unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n\t\tif (\n\t\t\t(code >= CharCode.a && code <= CharCode.z)\n\t\t\t|| (code >= CharCode.A && code <= CharCode.Z)\n\t\t\t|| (code >= CharCode.Digit0 && code <= CharCode.Digit9)\n\t\t\t|| code === CharCode.Dash\n\t\t\t|| code === CharCode.Period\n\t\t\t|| code === CharCode.Underline\n\t\t\t|| code === CharCode.Tilde\n\t\t\t|| (isPath && code === CharCode.Slash)\n\t\t\t|| (isAuthority && code === CharCode.OpenSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.CloseSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.Colon)\n\t\t) {\n\t\t\t// check if we are delaying native encode\n\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\tnativeEncodePos = -1;\n\t\t\t}\n\t\t\t// check if we write into a new string (by default we try to return the param)\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += uriComponent.charAt(pos);\n\t\t\t}\n\n\t\t} else {\n\t\t\t// encoding needed, we need to allocate a new string\n\t\t\tif (res === undefined) {\n\t\t\t\tres = uriComponent.substr(0, pos);\n\t\t\t}\n\n\t\t\t// check with default table first\n\t\t\tconst escaped = encodeTable[code];\n\t\t\tif (escaped !== undefined) {\n\n\t\t\t\t// check if we are delaying native encode\n\t\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\t\tnativeEncodePos = -1;\n\t\t\t\t}\n\n\t\t\t\t// append escaped variant to result\n\t\t\t\tres += escaped;\n\n\t\t\t} else if (nativeEncodePos === -1) {\n\t\t\t\t// use native encode only when needed\n\t\t\t\tnativeEncodePos = pos;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (nativeEncodePos !== -1) {\n\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n\t}\n\n\treturn res !== undefined ? res : uriComponent;\n}\n\nfunction encodeURIComponentMinimal(path: string): string {\n\tlet res: string | undefined = undefined;\n\tfor (let pos = 0; pos < path.length; pos++) {\n\t\tconst code = path.charCodeAt(pos);\n\t\tif (code === CharCode.Hash || code === CharCode.QuestionMark) {\n\t\t\tif (res === undefined) {\n\t\t\t\tres = path.substr(0, pos);\n\t\t\t}\n\t\t\tres += encodeTable[code];\n\t\t} else {\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += path[pos];\n\t\t\t}\n\t\t}\n\t}\n\treturn res !== undefined ? res : path;\n}\n\n/**\n * Compute `fsPath` for the given uri\n */\nexport function uriToFsPath(uri: URI, keepDriveLetterCasing: boolean): string {\n\n\tlet value: string;\n\tif (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n\t\t// unc path: file://shares/c$/far/boo\n\t\tvalue = `//${uri.authority}${uri.path}`;\n\t} else if (\n\t\turi.path.charCodeAt(0) === CharCode.Slash\n\t\t&& (uri.path.charCodeAt(1) >= CharCode.A && uri.path.charCodeAt(1) <= CharCode.Z || uri.path.charCodeAt(1) >= CharCode.a && uri.path.charCodeAt(1) <= CharCode.z)\n\t\t&& uri.path.charCodeAt(2) === CharCode.Colon\n\t) {\n\t\tif (!keepDriveLetterCasing) {\n\t\t\t// windows drive letter: file:///c:/far/boo\n\t\t\tvalue = uri.path[1].toLowerCase() + uri.path.substr(2);\n\t\t} else {\n\t\t\tvalue = uri.path.substr(1);\n\t\t}\n\t} else {\n\t\t// other path\n\t\tvalue = uri.path;\n\t}\n\tif (isWindows) {\n\t\tvalue = value.replace(/\\//g, '\\\\');\n\t}\n\treturn value;\n}\n\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri: URI, skipEncoding: boolean): string {\n\n\tconst encoder = !skipEncoding\n\t\t? encodeURIComponentFast\n\t\t: encodeURIComponentMinimal;\n\n\tlet res = '';\n\tlet { scheme, authority, path, query, fragment } = uri;\n\tif (scheme) {\n\t\tres += scheme;\n\t\tres += ':';\n\t}\n\tif (authority || scheme === 'file') {\n\t\tres += _slash;\n\t\tres += _slash;\n\t}\n\tif (authority) {\n\t\tlet idx = authority.indexOf('@');\n\t\tif (idx !== -1) {\n\t\t\t// <user>@<auth>\n\t\t\tconst userinfo = authority.substr(0, idx);\n\t\t\tauthority = authority.substr(idx + 1);\n\t\t\tidx = userinfo.lastIndexOf(':');\n\t\t\tif (idx === -1) {\n\t\t\t\tres += encoder(userinfo, false, false);\n\t\t\t} else {\n\t\t\t\t// <user>:<pass>@<auth>\n\t\t\t\tres += encoder(userinfo.substr(0, idx), false, false);\n\t\t\t\tres += ':';\n\t\t\t\tres += encoder(userinfo.substr(idx + 1), false, true);\n\t\t\t}\n\t\t\tres += '@';\n\t\t}\n\t\tauthority = authority.toLowerCase();\n\t\tidx = authority.lastIndexOf(':');\n\t\tif (idx === -1) {\n\t\t\tres += encoder(authority, false, true);\n\t\t} else {\n\t\t\t// <auth>:<port>\n\t\t\tres += encoder(authority.substr(0, idx), false, true);\n\t\t\tres += authority.substr(idx);\n\t\t}\n\t}\n\tif (path) {\n\t\t// lower-case windows drive letters in /C:/fff or C:/fff\n\t\tif (path.length >= 3 && path.charCodeAt(0) === CharCode.Slash && path.charCodeAt(2) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(1);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t} else if (path.length >= 2 && path.charCodeAt(1) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(0);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t}\n\t\t// encode the rest of the path\n\t\tres += encoder(path, true, false);\n\t}\n\tif (query) {\n\t\tres += '?';\n\t\tres += encoder(query, false, false);\n\t}\n\tif (fragment) {\n\t\tres += '#';\n\t\tres += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\n\t}\n\treturn res;\n}\n\n// --- decode\n\nfunction decodeURIComponentGraceful(str: string): string {\n\ttry {\n\t\treturn decodeURIComponent(str);\n\t} catch {\n\t\tif (str.length > 3) {\n\t\t\treturn str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n\t\t} else {\n\t\t\treturn str;\n\t\t}\n\t}\n}\n\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\n\nfunction percentDecode(str: string): string {\n\tif (!str.match(_rEncodedAsHex)) {\n\t\treturn str;\n\t}\n\treturn str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\n}\n\n/**\n * Mapped-type that replaces all occurrences of URI with UriComponents\n */\nexport type UriDto<T> = { [K in keyof T]: T[K] extends URI\n\t? UriComponents\n\t: UriDto<T[K]> };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { CharCode } from './charCode';\nimport { URI } from './uri';\nimport * as nodePath from 'path';\n\nconst posixPath = nodePath.posix || nodePath;\nconst slash = '/';\n\nexport namespace Utils {\n\n    /**\n     * Joins one or more input paths to the path of URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved.\n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are preserved.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to be joined with the path of URI.\n     * @returns A URI with the joined path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function joinPath(uri: URI, ...paths: string[]): URI {\n        return uri.with({ path: posixPath.join(uri.path, ...paths) });\n    }\n\n\n    /**\n     * Resolves one or more paths against the path of a URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved. \n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are removed.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to resolve against the path of URI.\n     * @returns A URI with the resolved path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function resolvePath(uri: URI, ...paths: string[]): URI {\n        let path = uri.path; \n        let slashAdded = false;\n        if (path[0] !== slash) {\n            path = slash + path; // make the path abstract: for posixPath.resolve the first segments has to be absolute or cwd is used.\n            slashAdded = true;\n        }\n        let resolvedPath = posixPath.resolve(path, ...paths);\n        if (slashAdded && resolvedPath[0] === slash && !uri.authority) {\n            resolvedPath = resolvedPath.substring(1);\n        }\n        return uri.with({ path: resolvedPath });\n    }\n\n    /**\n     * Returns a URI where the path is the directory name of the input uri, similar to the Unix dirname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The orignal URI is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The last segment of the URIs path.\n     */\n    export function dirname(uri: URI): URI {\n        if (uri.path.length === 0 || uri.path === slash) {\n            return uri;\n        }\n        let path = posixPath.dirname(uri.path);\n        if (path.length === 1 && path.charCodeAt(0) === CharCode.Period) {\n            path = '';\n        }\n        return uri.with({ path });\n    }\n\n    /**\n     * Returns the last segment of the path of a URI, similar to the Unix basename command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The base name of the URIs path.\n     */\n    export function basename(uri: URI): string {\n        return posixPath.basename(uri.path);\n    }\n\n    /**\n     * Returns the extension name of the path of a URI, similar to the Unix extname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The extension name of the URIs path.\n     */\n    export function extname(uri: URI): string {\n        return posixPath.extname(uri.path);\n    }\n}","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { URI, Utils } from 'vscode-uri';\n\nexport { URI };\n\nexport namespace UriUtils {\n\n    export const basename = Utils.basename;\n    export const dirname = Utils.dirname;\n    export const extname = Utils.extname;\n    export const joinPath = Utils.joinPath;\n    export const resolvePath = Utils.resolvePath;\n\n    export function equals(a?: URI | string, b?: URI | string): boolean {\n        return a?.toString() === b?.toString();\n    }\n\n    export function relative(from: URI | string, to: URI | string): string {\n        const fromPath = typeof from === 'string' ? from : from.path;\n        const toPath = typeof to === 'string' ? to : to.path;\n        const fromParts = fromPath.split('/').filter(e => e.length > 0);\n        const toParts = toPath.split('/').filter(e => e.length > 0);\n        let i = 0;\n        for (; i < fromParts.length; i++) {\n            if (fromParts[i] !== toParts[i]) {\n                break;\n            }\n        }\n        const backPart = '../'.repeat(fromParts.length - i);\n        const toPart = toParts.slice(i).join('/');\n        return backPart + toPart;\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\n *  the overhead is very small, just a few kilobytes.\n * Everything else of that package (at the time contributing) is also defined\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\n */\nexport { TextDocument } from 'vscode-languageserver-textdocument';\n\nimport type { Diagnostic, Range } from 'vscode-languageserver-types';\nimport type { FileSystemProvider } from './file-system-provider.js';\nimport type { ParseResult } from '../parser/langium-parser.js';\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, Mutable, Reference } from '../syntax-tree.js';\nimport type { MultiMap } from '../utils/collections.js';\nimport type { Stream } from '../utils/stream.js';\nimport { TextDocument } from './documents.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { stream } from '../utils/stream.js';\nimport { URI } from '../utils/uri-utils.js';\n\n/**\n * A Langium document holds the parse result (AST and CST) and any additional state that is derived\n * from the AST, e.g. the result of scope precomputation.\n */\nexport interface LangiumDocument<T extends AstNode = AstNode> {\n    /** The Uniform Resource Identifier (URI) of the document */\n    readonly uri: URI;\n    /** The text document used to convert between offsets and positions */\n    readonly textDocument: TextDocument;\n    /** The current state of the document */\n    state: DocumentState;\n    /** The parse result holds the Abstract Syntax Tree (AST) and potentially also parser / lexer errors */\n    parseResult: ParseResult<T>;\n    /** Result of the scope precomputation phase */\n    precomputedScopes?: PrecomputedScopes;\n    /** An array of all cross-references found in the AST while linking */\n    references: Reference[];\n    /** Result of the validation phase */\n    diagnostics?: Diagnostic[]\n}\n\n/**\n * A document is subject to several phases that are run in predefined order. Any state value implies that\n * smaller state values are finished as well.\n */\nexport enum DocumentState {\n    /**\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\n     * document instance is no longer valid.\n     */\n    Changed = 0,\n    /**\n     * An AST has been created from the text content. The document structure can be traversed,\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\n     * at this stage as a preprocessing step.\n     */\n    Parsed = 1,\n    /**\n     * The `IndexManager` service has processed AST nodes of this document. This means the\n     * exported symbols are available in the global scope and can be resolved from other documents.\n     */\n    IndexedContent = 2,\n    /**\n     * The `ScopeComputation` service has processed this document. This means the local symbols\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\n     * Once a document has reached this state, you may follow every reference - it will lazily\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\n     * the target is not in scope.\n     */\n    ComputedScopes = 3,\n    /**\n     * The `Linker` service has processed this document. All outgoing references have been\n     * resolved or marked as erroneous.\n     */\n    Linked = 4,\n    /**\n     * The `IndexManager` service has processed AST node references of this document. This is\n     * necessary to determine which documents are affected by a change in one of the workspace\n     * documents.\n     */\n    IndexedReferences = 5,\n    /**\n     * The `DocumentValidator` service has processed this document. The language server listens\n     * to the results of this phase and sends diagnostics to the client.\n     */\n    Validated = 6\n}\n\n/**\n * Result of the scope precomputation phase (`ScopeComputation` service).\n * It maps every AST node to the set of symbols that are visible in the subtree of that node.\n */\nexport type PrecomputedScopes = MultiMap<AstNode, AstNodeDescription>\n\nexport interface DocumentSegment {\n    readonly range: Range\n    readonly offset: number\n    readonly length: number\n    readonly end: number\n}\n\n/**\n * Surrogate definition of the `TextDocuments` interface from the `vscode-languageserver` package.\n * No implementation object is expected to be offered by `LangiumCoreServices`, but only by `LangiumLSPServices`.\n */\nexport type TextDocumentProvider = {\n    get(uri: string): TextDocument | undefined\n}\n\n/**\n * Shared service for creating `LangiumDocument` instances.\n *\n * Register a custom implementation if special (additional) behavior is required for your language(s).\n * Note: If you specialize {@link fromString} or {@link fromTextDocument} you probably might want to\n * specialize {@link update}, too!\n */\nexport interface LangiumDocumentFactory {\n    /**\n     * Create a Langium document from a `TextDocument` (usually associated with a file).\n     */\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI): LangiumDocument<T>;\n    /**\n     * Create a Langium document from a `TextDocument` asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\n     */\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\n\n    /**\n     * Create an Langium document from an in-memory string.\n     */\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI): LangiumDocument<T>;\n    /**\n     * Create a Langium document from an in-memory string asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\n     */\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\n\n    /**\n     * Create an Langium document from a model that has been constructed in memory.\n     */\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T>;\n\n    /**\n     * Create an Langium document from a specified `URI`. The factory will use the `FileSystemAccess` service to read the file.\n     */\n    fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument<T>>;\n\n    /**\n     * Update the given document after changes in the corresponding textual representation.\n     * Method is called by the document builder after it has been requested to build an existing\n     * document and the document's state is {@link DocumentState.Changed}.\n     * The text parsing is expected to be done the same way as in {@link fromTextDocument}\n     * and {@link fromString}.\n     */\n    update<T extends AstNode = AstNode>(document: LangiumDocument<T>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>\n}\n\nexport class DefaultLangiumDocumentFactory implements LangiumDocumentFactory {\n\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly textDocuments?: TextDocumentProvider;\n    protected readonly fileSystemProvider: FileSystemProvider;\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.serviceRegistry = services.ServiceRegistry;\n        this.textDocuments = services.workspace.TextDocuments;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n    }\n\n    async fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken = CancellationToken.None): Promise<LangiumDocument<T>> {\n        const content = await this.fileSystemProvider.readFile(uri);\n        return this.createAsync<T>(uri, content, cancellationToken);\n    }\n\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI): LangiumDocument<T>;\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, cancellationToken?: CancellationToken): LangiumDocument<T> | Promise<LangiumDocument<T>> {\n        uri = uri ?? URI.parse(textDocument.uri);\n        if (cancellationToken) {\n            return this.createAsync<T>(uri, textDocument, cancellationToken);\n        } else {\n            return this.create<T>(uri, textDocument);\n        }\n    }\n\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI): LangiumDocument<T>;\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken?: CancellationToken): LangiumDocument<T> | Promise<LangiumDocument<T>> {\n        if (cancellationToken) {\n            return this.createAsync<T>(uri, text, cancellationToken);\n        } else {\n            return this.create<T>(uri, text);\n        }\n    }\n\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T> {\n        return this.create<T>(uri, { $model: model });\n    }\n\n    protected create<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument | { $model: T }): LangiumDocument<T> {\n        if (typeof content === 'string') {\n            const parseResult = this.parse<T>(uri, content);\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\n\n        } else if ('$model' in content) {\n            const parseResult = { value: content.$model, parserErrors: [], lexerErrors: [] };\n            return this.createLangiumDocument<T>(parseResult, uri);\n\n        } else {\n            const parseResult = this.parse<T>(uri, content.getText());\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n\n    protected async createAsync<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument, cancelToken: CancellationToken): Promise<LangiumDocument<T>> {\n        if (typeof content === 'string') {\n            const parseResult = await this.parseAsync<T>(uri, content, cancelToken);\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\n        } else {\n            const parseResult = await this.parseAsync<T>(uri, content.getText(), cancelToken);\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n\n    /**\n     * Create a LangiumDocument from a given parse result.\n     *\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\n     * should not be necessary because the main purpose of the TextDocument is to convert between\n     * text ranges and offsets, which is done solely in LSP request handling.\n     *\n     * With the introduction of {@link update} below this method is supposed to be mainly called\n     * during workspace initialization and on addition/recognition of new files, while changes in\n     * existing documents are processed via {@link update}.\n     */\n    protected createLangiumDocument<T extends AstNode = AstNode>(parseResult: ParseResult<T>, uri: URI, textDocument?: TextDocument, text?: string): LangiumDocument<T> {\n        let document: LangiumDocument<T>;\n        if (textDocument) {\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                textDocument\n            };\n        } else {\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                get textDocument() {\n                    return textDocumentGetter();\n                }\n            };\n        }\n        (parseResult.value as Mutable<AstNode>).$document = document;\n        return document;\n    }\n\n    async update<T extends AstNode = AstNode>(document: Mutable<LangiumDocument<T>>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>> {\n        // The CST full text property contains the original text that was used to create the AST.\n        const oldText = document.parseResult.value.$cstNode?.root.fullText;\n        const textDocument = this.textDocuments?.get(document.uri.toString());\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\n\n        if (textDocument) {\n            Object.defineProperty(\n                document,\n                'textDocument',\n                {\n                    value: textDocument\n                }\n            );\n        } else {\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\n            Object.defineProperty(\n                document,\n                'textDocument',\n                {\n                    get: textDocumentGetter\n                }\n            );\n        }\n\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\n        // Therefore, we only parse if the text has actually changed.\n        if (oldText !== text) {\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\n            (document.parseResult.value as Mutable<AstNode>).$document = document;\n        }\n        document.state = DocumentState.Parsed;\n        return document;\n    }\n\n    protected parse<T extends AstNode>(uri: URI, text: string): ParseResult<T> {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.LangiumParser.parse<T>(text);\n    }\n\n    protected parseAsync<T extends AstNode>(uri: URI, text: string, cancellationToken: CancellationToken): Promise<ParseResult<T>> {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.AsyncParser.parse<T>(text, cancellationToken);\n    }\n\n    protected createTextDocumentGetter(uri: URI, text?: string): () => TextDocument {\n        const serviceRegistry = this.serviceRegistry;\n        let textDoc: TextDocument | undefined = undefined;\n        return () => {\n            return textDoc ??= TextDocument.create(\n                uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text ?? ''\n            );\n        };\n    }\n}\n\n/**\n * Shared service for managing Langium documents.\n */\nexport interface LangiumDocuments {\n\n    /**\n     * A stream of all documents managed under this service.\n     */\n    readonly all: Stream<LangiumDocument>\n\n    /**\n     * Manage a new document under this service.\n     * @throws an error if a document with the same URI is already present.\n     */\n    addDocument(document: LangiumDocument): void;\n\n    /**\n     * Retrieve the document with the given URI, if present. Otherwise returns `undefined`.\n     */\n    getDocument(uri: URI): LangiumDocument | undefined;\n\n    /**\n     * Retrieve the document with the given URI. If not present, a new one will be created using the file system access.\n     * The new document will be added to the list of documents managed under this service.\n     */\n    getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument>;\n\n    /**\n     * Creates a new document with the given URI and text content.\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\n     *\n     * @throws an error if a document with the same URI is already present.\n     */\n    createDocument(uri: URI, text: string): LangiumDocument;\n\n    /**\n     * Creates a new document with the given URI and text content asynchronously.\n     * The process can be interrupted with a cancellation token.\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\n     *\n     * @throws an error if a document with the same URI is already present.\n     */\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\n\n    /**\n     * Returns `true` if a document with the given URI is managed under this service.\n     */\n    hasDocument(uri: URI): boolean;\n\n    /**\n     * Flag the document with the given URI as `Changed`, if present, meaning that its content\n     * is no longer valid. The content (parseResult) stays untouched, while internal data may\n     * be dropped to reduce memory footprint.\n     *\n     * @returns the affected {@link LangiumDocument} if existing for convenience\n     */\n    invalidateDocument(uri: URI): LangiumDocument | undefined;\n\n    /**\n     * Remove the document with the given URI, if present, and mark it as `Changed`, meaning\n     * that its content is no longer valid. The next call to `getOrCreateDocument` with the same\n     * URI will create a new document instance.\n     *\n     * @returns the affected {@link LangiumDocument} if existing for convenience\n     */\n    deleteDocument(uri: URI): LangiumDocument | undefined;\n}\n\nexport class DefaultLangiumDocuments implements LangiumDocuments {\n\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\n\n    protected readonly documentMap: Map<string, LangiumDocument> = new Map();\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n    }\n\n    get all(): Stream<LangiumDocument> {\n        return stream(this.documentMap.values());\n    }\n\n    addDocument(document: LangiumDocument): void {\n        const uriString = document.uri.toString();\n        if (this.documentMap.has(uriString)) {\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\n        }\n        this.documentMap.set(uriString, document);\n    }\n\n    getDocument(uri: URI): LangiumDocument | undefined {\n        const uriString = uri.toString();\n        return this.documentMap.get(uriString);\n    }\n\n    async getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument> {\n        let document = this.getDocument(uri);\n        if (document) {\n            return document;\n        }\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\n        this.addDocument(document);\n        return document;\n    }\n\n    createDocument(uri: URI, text: string): LangiumDocument;\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\n    createDocument(uri: URI, text: string, cancellationToken?: CancellationToken): LangiumDocument | Promise<LangiumDocument> {\n        if (cancellationToken) {\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then(document => {\n                this.addDocument(document);\n                return document;\n            });\n        } else {\n            const document = this.langiumDocumentFactory.fromString(text, uri);\n            this.addDocument(document);\n            return document;\n        }\n    }\n\n    hasDocument(uri: URI): boolean {\n        return this.documentMap.has(uri.toString());\n    }\n\n    invalidateDocument(uri: URI): LangiumDocument | undefined {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            langiumDoc.state = DocumentState.Changed;\n            langiumDoc.precomputedScopes = undefined;\n            langiumDoc.references = [];\n            langiumDoc.diagnostics = undefined;\n        }\n        return langiumDoc;\n    }\n\n    deleteDocument(uri: URI): LangiumDocument | undefined {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            langiumDoc.state = DocumentState.Changed;\n            this.documentMap.delete(uriString);\n        }\n        return langiumDoc;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, AstReflection, CstNode, LinkingError, Reference, ReferenceInfo } from '../syntax-tree.js';\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\nimport type { LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\nimport type { ScopeProvider } from './scope-provider.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { isAstNode, isAstNodeDescription, isLinkingError } from '../syntax-tree.js';\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\nimport { DocumentState } from '../workspace/documents.js';\n\n/**\n * Language-specific service for resolving cross-references in the AST.\n */\nexport interface Linker {\n\n    /**\n     * Links all cross-references within the specified document. The default implementation loads only target\n     * elements from documents that are present in the `LangiumDocuments` service. The linked references are\n     * stored in the document's `references` property.\n     *\n     * @param document A LangiumDocument that shall be linked.\n     * @param cancelToken A token for cancelling the operation.\n     */\n    link(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Unlinks all references within the specified document and removes them from the list of `references`.\n     *\n     * @param document A LangiumDocument that shall be unlinked.\n     */\n    unlink(document: LangiumDocument): void;\n\n    /**\n     * Determines a candidate AST node description for linking the given reference.\n     *\n     * @param node The AST node containing the reference.\n     * @param refId The reference identifier used to build a scope.\n     * @param reference The actual reference to resolve.\n     */\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError;\n\n    /**\n     * Creates a cross reference node being aware of its containing AstNode, the corresponding CstNode,\n     * the cross reference text denoting the target AstNode being already extracted of the document text,\n     * as well as the unique cross reference identifier.\n     *\n     * Default behavior:\n     *  - The returned Reference's 'ref' property pointing to the target AstNode is populated lazily on its\n     *    first visit.\n     *  - If the target AstNode cannot be resolved on the first visit, an error indicator will be installed\n     *    and further resolution attempts will *not* be performed.\n     *\n     * @param node The containing AST node\n     * @param refNode The corresponding CST node\n     * @param refId The cross reference identifier like '<entityTypeName>:<propertyName>'\n     * @param refText The cross reference text denoting the target AstNode\n     * @returns the desired Reference node, whose behavior wrt. resolving the cross reference is implementation specific.\n     */\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference;\n\n}\n\ninterface DefaultReference extends Reference {\n    _ref?: AstNode | LinkingError;\n    _nodeDescription?: AstNodeDescription;\n}\n\nexport class DefaultLinker implements Linker {\n    protected readonly reflection: AstReflection;\n    protected readonly scopeProvider: ScopeProvider;\n    protected readonly astNodeLocator: AstNodeLocator;\n    protected readonly langiumDocuments: () => LangiumDocuments;\n\n    constructor(services: LangiumCoreServices) {\n        this.reflection = services.shared.AstReflection;\n        this.langiumDocuments = () => services.shared.workspace.LangiumDocuments;\n        this.scopeProvider = services.references.ScopeProvider;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n    }\n\n    async link(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\n        for (const node of streamAst(document.parseResult.value)) {\n            await interruptAndCheck(cancelToken);\n            streamReferences(node).forEach(ref => this.doLink(ref, document));\n        }\n    }\n\n    protected doLink(refInfo: ReferenceInfo, document: LangiumDocument): void {\n        const ref = refInfo.reference as DefaultReference;\n        // The reference may already have been resolved lazily by accessing its `ref` property.\n        if (ref._ref === undefined) {\n            try {\n                const description = this.getCandidate(refInfo);\n                if (isLinkingError(description)) {\n                    ref._ref = description;\n                } else {\n                    ref._nodeDescription = description;\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\n                        // The target document is already loaded\n                        const linkedNode = this.loadAstNode(description);\n                        ref._ref = linkedNode ?? this.createLinkingError(refInfo, description);\n                    }\n                }\n            } catch (err) {\n                ref._ref = {\n                    ...refInfo,\n                    message: `An error occurred while resolving reference to '${ref.$refText}': ${err}`\n                };\n            }\n        }\n        // Add the reference to the document's array of references\n        document.references.push(ref);\n    }\n\n    unlink(document: LangiumDocument): void {\n        for (const ref of document.references) {\n            delete (ref as DefaultReference)._ref;\n            delete (ref as DefaultReference)._nodeDescription;\n        }\n        document.references = [];\n    }\n\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError {\n        const scope = this.scopeProvider.getScope(refInfo);\n        const description = scope.getElement(refInfo.reference.$refText);\n        return description ?? this.createLinkingError(refInfo);\n    }\n\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference {\n        // See behavior description in doc of Linker, update that on changes in here.\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const linker = this;\n        const reference: DefaultReference = {\n            $refNode: refNode,\n            $refText: refText,\n\n            get ref() {\n                if (isAstNode(this._ref)) {\n                    // Most frequent case: the target is already resolved.\n                    return this._ref;\n                } else if (isAstNodeDescription(this._nodeDescription)) {\n                    // A candidate has been found before, but it is not loaded yet.\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\n                    this._ref = linkedNode ??\n                        linker.createLinkingError({ reference, container: node, property }, this._nodeDescription);\n                } else if (this._ref === undefined) {\n                    // The reference has not been linked yet, so do that now.\n                    const refData = linker.getLinkedNode({ reference, container: node, property });\n                    if (refData.error && getDocument(node).state < DocumentState.ComputedScopes) {\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\n                        return undefined;\n                    }\n                    this._ref = refData.node ?? refData.error;\n                    this._nodeDescription = refData.descr;\n                }\n                return isAstNode(this._ref) ? this._ref : undefined;\n            },\n            get $nodeDescription() {\n                return this._nodeDescription;\n            },\n            get error() {\n                return isLinkingError(this._ref) ? this._ref : undefined;\n            }\n        };\n        return reference;\n    }\n\n    protected getLinkedNode(refInfo: ReferenceInfo): { node?: AstNode, descr?: AstNodeDescription, error?: LinkingError } {\n        try {\n            const description = this.getCandidate(refInfo);\n            if (isLinkingError(description)) {\n                return { error: description };\n            }\n            const linkedNode = this.loadAstNode(description);\n            if (linkedNode) {\n                return { node: linkedNode, descr: description };\n            }\n            else {\n                return {\n                    descr: description,\n                    error:\n                        this.createLinkingError(refInfo, description)\n                };\n            }\n        } catch (err) {\n            return {\n                error: {\n                    ...refInfo,\n                    message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${err}`\n                }\n            };\n        }\n    }\n\n    protected loadAstNode(nodeDescription: AstNodeDescription): AstNode | undefined {\n        if (nodeDescription.node) {\n            return nodeDescription.node;\n        }\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\n        if (!doc) {\n            return undefined;\n        }\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\n    }\n\n    protected createLinkingError(refInfo: ReferenceInfo, targetDescription?: AstNodeDescription): LinkingError {\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\n        // in the language implementation.\n        const document = getDocument(refInfo.container);\n        if (document.state < DocumentState.ComputedScopes) {\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\n        }\n        const referenceType = this.reflection.getReferenceType(refInfo);\n        return {\n            ...refInfo,\n            message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`,\n            targetDescription\n        };\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { AstNode, CstNode } from '../syntax-tree.js';\nimport { findNodeForProperty } from '../utils/grammar-utils.js';\n\nexport interface NamedAstNode extends AstNode {\n    name: string;\n}\n\nexport function isNamed(node: AstNode): node is NamedAstNode {\n    return typeof (node as NamedAstNode).name === 'string';\n}\n\n/**\n * Utility service for retrieving the `name` of an `AstNode` or the `CstNode` containing a `name`.\n */\nexport interface NameProvider {\n    /**\n     * Returns the `name` of a given AstNode.\n     * @param node Specified `AstNode` whose name node shall be retrieved.\n     */\n    getName(node: AstNode): string | undefined;\n    /**\n     * Returns the `CstNode` which contains the parsed value of the `name` assignment.\n     * @param node Specified `AstNode` whose name node shall be retrieved.\n     */\n    getNameNode(node: AstNode): CstNode | undefined;\n}\n\nexport class DefaultNameProvider implements NameProvider {\n    getName(node: AstNode): string | undefined {\n        if (isNamed(node)) {\n            return node.name;\n        }\n        return undefined;\n    }\n\n    getNameNode(node: AstNode): CstNode | undefined {\n        return findNodeForProperty(node.$cstNode, 'name');\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, CstNode, GenericAstNode } from '../syntax-tree.js';\nimport type { Stream } from '../utils/stream.js';\nimport type { ReferenceDescription } from '../workspace/ast-descriptions.js';\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\nimport type { IndexManager } from '../workspace/index-manager.js';\nimport type { NameProvider } from './name-provider.js';\nimport type { URI } from '../utils/uri-utils.js';\nimport { findAssignment } from '../utils/grammar-utils.js';\nimport { isReference } from '../syntax-tree.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { isChildNode, toDocumentSegment } from '../utils/cst-utils.js';\nimport { stream } from '../utils/stream.js';\nimport { UriUtils } from '../utils/uri-utils.js';\n\n/**\n * Language-specific service for finding references and declaration of a given `CstNode`.\n */\nexport interface References {\n\n    /**\n     * If the CstNode is a reference node the target CstNode will be returned.\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\n     *\n     * @param sourceCstNode CstNode that points to a AstNode\n     */\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined;\n\n    /**\n     * If the CstNode is a reference node the target CstNode will be returned.\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\n     *\n     * @param sourceCstNode CstNode that points to a AstNode\n     */\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined;\n\n    /**\n     * Finds all references to the target node as references (local references) or reference descriptions.\n     *\n     * @param targetNode Specified target node whose references should be returned\n     */\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription>;\n}\n\nexport interface FindReferencesOptions {\n    /**\n     * @deprecated Since v1.2.0. Please use `documentUri` instead.\n     */\n    onlyLocal?: boolean;\n    /**\n     * When set, the `findReferences` method will only return references/declarations from the specified document.\n     */\n    documentUri?: URI;\n    /**\n     * Whether the returned list of references should include the declaration.\n     */\n    includeDeclaration?: boolean;\n}\n\nexport class DefaultReferences implements References {\n    protected readonly nameProvider: NameProvider;\n    protected readonly index: IndexManager;\n    protected readonly nodeLocator: AstNodeLocator;\n\n    constructor(services: LangiumCoreServices) {\n        this.nameProvider = services.references.NameProvider;\n        this.index = services.shared.workspace.IndexManager;\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined {\n        if (sourceCstNode) {\n            const assignment = findAssignment(sourceCstNode);\n            const nodeElem = sourceCstNode.astNode;\n            if (assignment && nodeElem) {\n                const reference = (nodeElem as GenericAstNode)[assignment.feature];\n\n                if (isReference(reference)) {\n                    return reference.ref;\n                } else if (Array.isArray(reference)) {\n                    for (const ref of reference) {\n                        if (isReference(ref) && ref.$refNode\n                            && ref.$refNode.offset <= sourceCstNode.offset\n                            && ref.$refNode.end >= sourceCstNode.end) {\n                            return ref.ref;\n                        }\n                    }\n                }\n            }\n            if (nodeElem) {\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\n                if (nameNode && (nameNode === sourceCstNode || isChildNode(sourceCstNode, nameNode))) {\n                    return nodeElem;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined {\n        const astNode = this.findDeclaration(sourceCstNode);\n        if (astNode?.$cstNode) {\n            const targetNode = this.nameProvider.getNameNode(astNode);\n            return targetNode ?? astNode.$cstNode;\n        }\n        return undefined;\n    }\n\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription> {\n        const refs: ReferenceDescription[] = [];\n        if (options.includeDeclaration) {\n            const ref = this.getReferenceToSelf(targetNode);\n            if (ref) {\n                refs.push(ref);\n            }\n        }\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\n        if (options.documentUri) {\n            indexReferences = indexReferences.filter(ref => UriUtils.equals(ref.sourceUri, options.documentUri));\n        }\n        refs.push(...indexReferences);\n        return stream(refs);\n    }\n\n    protected getReferenceToSelf(targetNode: AstNode): ReferenceDescription | undefined {\n        const nameNode = this.nameProvider.getNameNode(targetNode);\n        if (nameNode) {\n            const doc = getDocument(targetNode);\n            const path = this.nodeLocator.getAstNodePath(targetNode);\n            return {\n                sourceUri: doc.uri,\n                sourcePath: path,\n                targetUri: doc.uri,\n                targetPath: path,\n                segment: toDocumentSegment(nameNode),\n                local: true\n            };\n        }\n        return undefined;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { Stream } from './stream.js';\nimport { Reduction, stream } from './stream.js';\n\n/**\n * A multimap is a variation of a Map that has potentially multiple values for every key.\n */\nexport class MultiMap<K, V> {\n\n    private map = new Map<K, V[]>();\n\n    constructor()\n    constructor(elements: Array<[K, V]>)\n    constructor(elements?: Array<[K, V]>) {\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.add(key, value);\n            }\n        }\n    }\n\n    /**\n     * The total number of values in the multimap.\n     */\n    get size(): number {\n        return Reduction.sum(stream(this.map.values()).map(a => a.length));\n    }\n\n    /**\n     * Clear all entries in the multimap.\n     */\n    clear(): void {\n        this.map.clear();\n    }\n\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\n     *  * Without a value, all values associated with the given key are deleted.\n     *\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\n     *     key / value does not exist.\n     */\n    delete(key: K, value?: V): boolean {\n        if (value === undefined) {\n            return this.map.delete(key);\n        } else {\n            const values = this.map.get(key);\n            if (values) {\n                const index = values.indexOf(value);\n                if (index >= 0) {\n                    if (values.length === 1) {\n                        this.map.delete(key);\n                    } else {\n                        values.splice(index, 1);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Returns an array of all values associated with the given key. If no value exists,\n     * an empty array is returned.\n     *\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\n     * value and `delete` to remove a value from the multimap.\n     */\n    get(key: K): readonly V[] {\n        return this.map.get(key) ?? [];\n    }\n\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\n     */\n    has(key: K, value?: V): boolean {\n        if (value === undefined) {\n            return this.map.has(key);\n        } else {\n            const values = this.map.get(key);\n            if (values) {\n                return values.indexOf(value) >= 0;\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Add the given key / value pair to the multimap.\n     */\n    add(key: K, value: V): this {\n        if (this.map.has(key)) {\n            this.map.get(key)!.push(value);\n        } else {\n            this.map.set(key, [value]);\n        }\n        return this;\n    }\n\n    /**\n     * Add the given set of key / value pairs to the multimap.\n     */\n    addAll(key: K, values: Iterable<V>): this {\n        if (this.map.has(key)) {\n            this.map.get(key)!.push(...values);\n        } else {\n            this.map.set(key, Array.from(values));\n        }\n        return this;\n    }\n\n    /**\n     * Invokes the given callback function for every key / value pair in the multimap.\n     */\n    forEach(callbackfn: (value: V, key: K, map: this) => void): void {\n        this.map.forEach((array, key) =>\n            array.forEach(value => callbackfn(value, key, this))\n        );\n    }\n\n    /**\n     * Returns an iterator of key, value pairs for every entry in the map.\n     */\n    [Symbol.iterator](): Iterator<[K, V]> {\n        return this.entries().iterator();\n    }\n\n    /**\n     * Returns a stream of key, value pairs for every entry in the map.\n     */\n    entries(): Stream<[K, V]> {\n        return stream(this.map.entries())\n            .flatMap(([key, array]) => array.map(value => [key, value] as [K, V]));\n    }\n\n    /**\n     * Returns a stream of keys in the map.\n     */\n    keys(): Stream<K> {\n        return stream(this.map.keys());\n    }\n\n    /**\n     * Returns a stream of values in the map.\n     */\n    values(): Stream<V> {\n        return stream(this.map.values()).flat();\n    }\n\n    /**\n     * Returns a stream of key, value set pairs for every key in the map.\n     */\n    entriesGroupedByKey(): Stream<[K, V[]]> {\n        return stream(this.map.entries());\n    }\n\n}\n\nexport class BiMap<K, V> {\n\n    private map = new Map<K, V>();\n    private inverse = new Map<V, K>();\n\n    get size(): number {\n        return this.map.size;\n    }\n\n    constructor()\n    constructor(elements: Array<[K, V]>)\n    constructor(elements?: Array<[K, V]>) {\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.set(key, value);\n            }\n        }\n    }\n\n    clear(): void {\n        this.map.clear();\n        this.inverse.clear();\n    }\n\n    set(key: K, value: V): this {\n        this.map.set(key, value);\n        this.inverse.set(value, key);\n        return this;\n    }\n\n    get(key: K): V | undefined {\n        return this.map.get(key);\n    }\n\n    getKey(value: V): K | undefined {\n        return this.inverse.get(value);\n    }\n\n    delete(key: K): boolean {\n        const value = this.map.get(key);\n        if (value !== undefined) {\n            this.map.delete(key);\n            this.inverse.delete(value);\n            return true;\n        }\n        return false;\n    }\n}\n","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\nimport type { LangiumDocument, PrecomputedScopes } from '../workspace/documents.js';\nimport type { NameProvider } from './name-provider.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { streamAllContents, streamContents } from '../utils/ast-utils.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\n\n/**\n * Language-specific service for precomputing global and local scopes. The service methods are executed\n * as the first and second phase in the `DocumentBuilder`.\n */\nexport interface ScopeComputation {\n\n    /**\n     * Creates descriptions of all AST nodes that shall be exported into the _global_ scope from the given\n     * document. These descriptions are gathered by the `IndexManager` and stored in the global index so\n     * they can be referenced from other documents.\n     *\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference resolution\n     * depends on the scope computation phase to be completed (`computeScope` method), which runs after the\n     * initial indexing where this method is used.\n     *\n     * @param document The document from which to gather exported AST nodes.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    computeExports(document: LangiumDocument, cancelToken?: CancellationToken): Promise<AstNodeDescription[]>;\n\n    /**\n     * Precomputes the _local_ scopes for a document, which are necessary for the default way of\n     * resolving references to symbols in the same document. The result is a multimap assigning a\n     * set of AST node descriptions to every level of the AST. These data are used by the `ScopeProvider`\n     * service to determine which target nodes are visible in the context of a specific cross-reference.\n     *\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference\n     * resolution depends on the scope computation phase to be completed.\n     *\n     * @param document The document in which to compute scopes.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    computeLocalScopes(document: LangiumDocument, cancelToken?: CancellationToken): Promise<PrecomputedScopes>;\n\n}\n\n/**\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\n * contained child nodes.\n *\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\n * are _invisible_ by default, but that can be changed by customizing this service.\n */\nexport class DefaultScopeComputation implements ScopeComputation {\n\n    protected readonly nameProvider: NameProvider;\n    protected readonly descriptions: AstNodeDescriptionProvider;\n\n    constructor(services: LangiumCoreServices) {\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n    }\n\n    async computeExports(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<AstNodeDescription[]> {\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\n    }\n\n    /**\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\n     * The list of children to be considered is determined by the function parameter {@link children}.\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\n     *\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\n     * @param document The document containing the AST node to be exported.\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution.\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\n     */\n    async computeExportsForNode(parentNode: AstNode, document: LangiumDocument<AstNode>, children: (root: AstNode) => Iterable<AstNode> = streamContents, cancelToken: CancellationToken = CancellationToken.None): Promise<AstNodeDescription[]> {\n        const exports: AstNodeDescription[] = [];\n\n        this.exportNode(parentNode, exports, document);\n        for (const node of children(parentNode)) {\n            await interruptAndCheck(cancelToken);\n            this.exportNode(node, exports, document);\n        }\n        return exports;\n    }\n\n    /**\n     * Add a single node to the list of exports if it has a name. Override this method to change how\n     * symbols are exported, e.g. by modifying their exported name.\n     */\n    protected exportNode(node: AstNode, exports: AstNodeDescription[], document: LangiumDocument): void {\n        const name = this.nameProvider.getName(node);\n        if (name) {\n            exports.push(this.descriptions.createDescription(node, name, document));\n        }\n    }\n\n    async computeLocalScopes(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<PrecomputedScopes> {\n        const rootNode = document.parseResult.value;\n        const scopes = new MultiMap<AstNode, AstNodeDescription>();\n        // Here we navigate the full AST - local scopes shall be available in the whole document\n        for (const node of streamAllContents(rootNode)) {\n            await interruptAndCheck(cancelToken);\n            this.processNode(node, document, scopes);\n        }\n        return scopes;\n    }\n\n    /**\n     * Process a single node during scopes computation. The default implementation makes the node visible\n     * in the subtree of its container (if the node has a name). Override this method to change this,\n     * e.g. by increasing the visibility to a higher level in the AST.\n     */\n    protected processNode(node: AstNode, document: LangiumDocument, scopes: PrecomputedScopes): void {\n        const container = node.$container;\n        if (container) {\n            const name = this.nameProvider.getName(node);\n            if (name) {\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\n            }\n        }\n    }\n\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { AstNodeDescription } from '../syntax-tree.js';\nimport type { Stream } from '../utils/stream.js';\nimport { EMPTY_STREAM, stream } from '../utils/stream.js';\n\n/**\n * A scope describes what target elements are visible from a specific cross-reference context.\n */\nexport interface Scope {\n\n    /**\n     * Find a target element matching the given name. If no element is found, `undefined` is returned.\n     * If multiple matching elements are present, the selection of the returned element should be done\n     * according to the semantics of your language. Usually it is the element that is most closely defined.\n     *\n     * @param name Name of the cross-reference target as it appears in the source text.\n     */\n    getElement(name: string): AstNodeDescription | undefined;\n\n    /**\n     * Create a stream of all elements in the scope. This is used to compute completion proposals to be\n     * shown in the editor.\n     */\n    getAllElements(): Stream<AstNodeDescription>;\n\n}\n\nexport interface ScopeOptions {\n    caseInsensitive?: boolean;\n}\n\n/**\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\n * the next level of elements, which are queried when a target element is not found in the stream provided\n * to this scope.\n */\nexport class StreamScope implements Scope {\n    readonly elements: Stream<AstNodeDescription>;\n    readonly outerScope?: Scope;\n    readonly caseInsensitive: boolean;\n\n    constructor(elements: Stream<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\n        this.elements = elements;\n        this.outerScope = outerScope;\n        this.caseInsensitive = options?.caseInsensitive ?? false;\n    }\n\n    getAllElements(): Stream<AstNodeDescription> {\n        if (this.outerScope) {\n            return this.elements.concat(this.outerScope.getAllElements());\n        } else {\n            return this.elements;\n        }\n    }\n\n    getElement(name: string): AstNodeDescription | undefined {\n        const local = this.caseInsensitive\n            ? this.elements.find(e => e.name.toLowerCase() === name.toLowerCase())\n            : this.elements.find(e => e.name === name);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n}\n\nexport class MapScope implements Scope {\n    readonly elements: Map<string, AstNodeDescription>;\n    readonly outerScope?: Scope;\n    readonly caseInsensitive: boolean;\n\n    constructor(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\n        this.elements = new Map();\n        this.caseInsensitive = options?.caseInsensitive ?? false;\n        for (const element of elements) {\n            const name = this.caseInsensitive\n                ? element.name.toLowerCase()\n                : element.name;\n            this.elements.set(name, element);\n        }\n        this.outerScope = outerScope;\n    }\n\n    getElement(name: string): AstNodeDescription | undefined {\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\n        const local = this.elements.get(localName);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n\n    getAllElements(): Stream<AstNodeDescription> {\n        let elementStream = stream(this.elements.values());\n        if (this.outerScope) {\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\n        }\n        return elementStream;\n    }\n\n}\n\nexport const EMPTY_SCOPE: Scope = {\n    getElement(): undefined {\n        return undefined;\n    },\n    getAllElements(): Stream<AstNodeDescription> {\n        return EMPTY_STREAM;\n    }\n};\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { Disposable } from './disposable.js';\nimport type { URI } from './uri-utils.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\n\nexport abstract class DisposableCache implements Disposable {\n\n    protected toDispose: Disposable[] = [];\n    protected isDisposed = false;\n\n    onDispose(disposable: Disposable): void {\n        this.toDispose.push(disposable);\n    }\n\n    dispose(): void {\n        this.throwIfDisposed();\n        this.clear();\n        this.isDisposed = true;\n        this.toDispose.forEach(disposable => disposable.dispose());\n    }\n\n    protected throwIfDisposed(): void {\n        if (this.isDisposed) {\n            throw new Error('This cache has already been disposed');\n        }\n    }\n\n    abstract clear(): void;\n}\n\nexport class SimpleCache<K, V> extends DisposableCache {\n    protected readonly cache = new Map<K, V>();\n\n    has(key: K): boolean {\n        this.throwIfDisposed();\n        return this.cache.has(key);\n    }\n\n    set(key: K, value: V): void {\n        this.throwIfDisposed();\n        this.cache.set(key, value);\n    }\n\n    get(key: K): V | undefined;\n    get(key: K, provider: () => V): V;\n    get(key: K, provider?: () => V): V | undefined {\n        this.throwIfDisposed();\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        } else if (provider) {\n            const value = provider();\n            this.cache.set(key, value);\n            return value;\n        } else {\n            return undefined;\n        }\n    }\n\n    delete(key: K): boolean {\n        this.throwIfDisposed();\n        return this.cache.delete(key);\n    }\n\n    clear(): void {\n        this.throwIfDisposed();\n        this.cache.clear();\n    }\n}\n\nexport class ContextCache<Context, Key, Value, ContextKey = Context> extends DisposableCache {\n\n    private readonly cache = new Map<ContextKey | Context, Map<Key, Value>>();\n    private readonly converter: (input: Context) => ContextKey | Context;\n\n    constructor(converter?: (input: Context) => ContextKey) {\n        super();\n        this.converter = converter ?? (value => value);\n    }\n\n    has(contextKey: Context, key: Key): boolean {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).has(key);\n    }\n\n    set(contextKey: Context, key: Key, value: Value): void {\n        this.throwIfDisposed();\n        this.cacheForContext(contextKey).set(key, value);\n    }\n\n    get(contextKey: Context, key: Key): Value | undefined;\n    get(contextKey: Context, key: Key, provider: () => Value): Value;\n    get(contextKey: Context, key: Key, provider?: () => Value): Value | undefined {\n        this.throwIfDisposed();\n        const contextCache = this.cacheForContext(contextKey);\n        if (contextCache.has(key)) {\n            return contextCache.get(key);\n        } else if (provider) {\n            const value = provider();\n            contextCache.set(key, value);\n            return value;\n        } else {\n            return undefined;\n        }\n    }\n\n    delete(contextKey: Context, key: Key): boolean {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).delete(key);\n    }\n\n    clear(): void;\n    clear(contextKey: Context): void;\n    clear(contextKey?: Context): void {\n        this.throwIfDisposed();\n        if (contextKey) {\n            const mapKey = this.converter(contextKey);\n            this.cache.delete(mapKey);\n        } else {\n            this.cache.clear();\n        }\n    }\n\n    protected cacheForContext(contextKey: Context): Map<Key, Value> {\n        const mapKey = this.converter(contextKey);\n        let documentCache = this.cache.get(mapKey);\n        if (!documentCache) {\n            documentCache = new Map();\n            this.cache.set(mapKey, documentCache);\n        }\n        return documentCache;\n    }\n}\n\n/**\n * Every key/value pair in this cache is scoped to a document.\n * If this document is changed or deleted, all associated key/value pairs are deleted.\n */\nexport class DocumentCache<K, V> extends ContextCache<URI | string, K, V, string> {\n    constructor(sharedServices: LangiumSharedCoreServices) {\n        super(uri => uri.toString());\n        this.onDispose(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted) => {\n            const allUris = changed.concat(deleted);\n            for (const uri of allUris) {\n                this.clear(uri);\n            }\n        }));\n    }\n}\n\n/**\n * Every key/value pair in this cache is scoped to the whole workspace.\n * If any document in the workspace changes, the whole cache is evicted.\n */\nexport class WorkspaceCache<K, V> extends SimpleCache<K, V> {\n    constructor(sharedServices: LangiumSharedCoreServices) {\n        super();\n        this.onDispose(sharedServices.workspace.DocumentBuilder.onUpdate(() => {\n            this.clear();\n        }));\n    }\n}\n","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, AstReflection, ReferenceInfo } from '../syntax-tree.js';\nimport type { Stream } from '../utils/stream.js';\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\nimport type { IndexManager } from '../workspace/index-manager.js';\nimport type { NameProvider } from './name-provider.js';\nimport type { Scope, ScopeOptions} from './scope.js';\nimport { MapScope, StreamScope } from './scope.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { stream } from '../utils/stream.js';\nimport { WorkspaceCache } from '../utils/caching.js';\n\n/**\n * Language-specific service for determining the scope of target elements visible in a specific cross-reference context.\n */\nexport interface ScopeProvider {\n\n    /**\n     * Return a scope describing what elements are visible for the given AST node and cross-reference\n     * identifier.\n     *\n     * @param context Information about the reference for which a scope is requested.\n     */\n    getScope(context: ReferenceInfo): Scope;\n\n}\n\nexport class DefaultScopeProvider implements ScopeProvider {\n\n    protected readonly reflection: AstReflection;\n    protected readonly nameProvider: NameProvider;\n    protected readonly descriptions: AstNodeDescriptionProvider;\n    protected readonly indexManager: IndexManager;\n\n    protected readonly globalScopeCache: WorkspaceCache<string, Scope>;\n\n    constructor(services: LangiumCoreServices) {\n        this.reflection = services.shared.AstReflection;\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.globalScopeCache = new WorkspaceCache<string, Scope>(services.shared);\n    }\n\n    getScope(context: ReferenceInfo): Scope {\n        const scopes: Array<Stream<AstNodeDescription>> = [];\n        const referenceType = this.reflection.getReferenceType(context);\n\n        const precomputed = getDocument(context.container).precomputedScopes;\n        if (precomputed) {\n            let currentNode: AstNode | undefined = context.container;\n            do {\n                const allDescriptions = precomputed.get(currentNode);\n                if (allDescriptions.length > 0) {\n                    scopes.push(stream(allDescriptions).filter(\n                        desc => this.reflection.isSubtype(desc.type, referenceType)));\n                }\n                currentNode = currentNode.$container;\n            } while (currentNode);\n        }\n\n        let result: Scope = this.getGlobalScope(referenceType, context);\n        for (let i = scopes.length - 1; i >= 0; i--) {\n            result = this.createScope(scopes[i], result);\n        }\n        return result;\n    }\n\n    /**\n     * Create a scope for the given collection of AST node descriptions.\n     */\n    protected createScope(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions): Scope {\n        return new StreamScope(stream(elements), outerScope, options);\n    }\n\n    /**\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\n     */\n    protected createScopeForNodes(elements: Iterable<AstNode>, outerScope?: Scope, options?: ScopeOptions): Scope {\n        const s = stream(elements).map(e => {\n            const name = this.nameProvider.getName(e);\n            if (name) {\n                return this.descriptions.createDescription(e, name);\n            }\n            return undefined;\n        }).nonNullable();\n        return new StreamScope(s, outerScope, options);\n    }\n\n    /**\n     * Create a global scope filtered for the given reference type.\n     */\n    protected getGlobalScope(referenceType: string, _context: ReferenceInfo): Scope {\n        return this.globalScopeCache.get(referenceType, () => new MapScope(this.indexManager.allElements(referenceType)));\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { URI } from 'vscode-uri';\nimport type { CommentProvider } from '../documentation/comment-provider.js';\nimport type { NameProvider } from '../references/name-provider.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, CstNode, GenericAstNode, Mutable, Reference } from '../syntax-tree.js';\nimport { isAstNode, isReference } from '../syntax-tree.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { findNodesForProperty } from '../utils/grammar-utils.js';\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\nimport type { DocumentSegment, LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\n\nexport interface JsonSerializeOptions {\n    /** The space parameter for `JSON.stringify`, controlling whether and how to pretty-print the output. */\n    space?: string | number;\n    /** Whether to include the `$refText` property for references (the name used to identify the target node). */\n    refText?: boolean;\n    /** Whether to include the `$sourceText` property, which holds the full source text from which an AST node was parsed. */\n    sourceText?: boolean;\n    /** Whether to include the `$textRegion` property, which holds information to trace AST node properties to their respective source text regions. */\n    textRegions?: boolean;\n    /** Whether to include the `$comment` property, which holds comments according to the CommentProvider service. */\n    comments?: boolean;\n    /** The replacer parameter for `JSON.stringify`; the default replacer given as parameter should be used to apply basic replacements. */\n    replacer?: (key: string, value: unknown, defaultReplacer: (key: string, value: unknown) => unknown) => unknown\n    /** Used to convert and serialize URIs when the target of a cross-reference is in a different document. */\n    uriConverter?: (uri: URI, reference: Reference) => string\n}\n\nexport interface JsonDeserializeOptions {\n    /** Used to parse and convert URIs when the target of a cross-reference is in a different document. */\n    uriConverter?: (uri: string) => URI\n}\n\n/**\n * {@link AstNode}s that may carry information on their definition area within the DSL text.\n */\nexport interface AstNodeWithTextRegion extends AstNode {\n    $sourceText?: string;\n    $textRegion?: AstNodeRegionWithAssignments;\n}\n\n/**\n * {@link AstNode}s that may carry a semantically relevant comment.\n */\nexport interface AstNodeWithComment extends AstNode {\n    $comment?: string;\n}\n\nexport function isAstNodeWithComment(node: AstNode): node is AstNodeWithComment {\n    return typeof (node as AstNodeWithComment).$comment === 'string';\n}\n\n/**\n * A {@DocumentSegment} representing the definition area of an AstNode within the DSL text.\n * Usually contains text region information on all assigned property values of the AstNode,\n * and may contain the defining file's URI as string.\n */\nexport interface AstNodeRegionWithAssignments extends DocumentSegment {\n    /**\n     * A record containing an entry for each assigned property of the AstNode.\n     * The key is equal to the property name and the value is an array of the property values'\n     * text regions, regardless of whether the property is a single value or list property.\n     */\n    assignments?: Record<string, DocumentSegment[]>;\n    /**\n     * The AstNode defining file's URI as string\n     */\n    documentURI?: string;\n}\n\n/**\n * Utility service for transforming an `AstNode` into a JSON string and vice versa.\n */\nexport interface JsonSerializer {\n    /**\n     * Serialize an `AstNode` into a JSON `string`.\n     * @param node The `AstNode` to be serialized.\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    serialize(node: AstNode, options?: JsonSerializeOptions): string;\n    /**\n     * Deserialize (parse) a JSON `string` into an `AstNode`.\n     */\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T;\n}\n\n/**\n * A cross-reference in the serialized JSON representation of an AstNode.\n */\ninterface IntermediateReference {\n    /** URI pointing to the target element. This is either `#${path}` if the target is in the same document, or `${documentURI}#${path}` otherwise. */\n    $ref?: string\n    /** The actual text used to look up the reference target in the surrounding scope. */\n    $refText?: string\n    /** If any problem occurred while resolving the reference, it is described by this property. */\n    $error?: string\n}\n\nfunction isIntermediateReference(obj: unknown): obj is IntermediateReference {\n    return typeof obj === 'object' && !!obj && ('$ref' in obj || '$error' in obj);\n}\n\nexport class DefaultJsonSerializer implements JsonSerializer {\n\n    /** The set of AstNode properties to be ignored by the serializer. */\n    ignoreProperties = new Set(['$container', '$containerProperty', '$containerIndex', '$document', '$cstNode']);\n\n    /** The document that is currently processed by the serializer; this is used by the replacer function.  */\n    protected currentDocument: LangiumDocument | undefined;\n\n    protected readonly langiumDocuments: LangiumDocuments;\n    protected readonly astNodeLocator: AstNodeLocator;\n    protected readonly nameProvider: NameProvider;\n    protected readonly commentProvider: CommentProvider;\n\n    constructor(services: LangiumCoreServices) {\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n\n    serialize(node: AstNode, options: JsonSerializeOptions = {}): string {\n        const specificReplacer = options?.replacer;\n        const defaultReplacer = (key: string, value: unknown) => this.replacer(key, value, options);\n        const replacer = specificReplacer ? (key: string, value: unknown) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;\n\n        try {\n            this.currentDocument = getDocument(node);\n            return JSON.stringify(node, replacer, options?.space);\n        } finally {\n            this.currentDocument = undefined;\n        }\n    }\n\n    deserialize<T extends AstNode = AstNode>(content: string, options: JsonDeserializeOptions = {}): T {\n        const root = JSON.parse(content);\n        this.linkNode(root, root, options);\n        return root;\n    }\n\n    protected replacer(key: string, value: unknown, { refText, sourceText, textRegions, comments, uriConverter }: JsonSerializeOptions): unknown {\n        if (this.ignoreProperties.has(key)) {\n            return undefined;\n        } else if (isReference(value)) {\n            const refValue = value.ref;\n            const $refText = refText ? value.$refText : undefined;\n            if (refValue) {\n                const targetDocument = getDocument(refValue);\n                let targetUri = '';\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\n                    if (uriConverter) {\n                        targetUri = uriConverter(targetDocument.uri, value);\n                    } else {\n                        targetUri = targetDocument.uri.toString();\n                    }\n                }\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\n                return {\n                    $ref: `${targetUri}#${targetPath}`,\n                    $refText\n                } satisfies IntermediateReference;\n            } else {\n                return {\n                    $error: value.error?.message ?? 'Could not resolve reference',\n                    $refText\n                } satisfies IntermediateReference;\n            }\n        } else if (isAstNode(value)) {\n            let astNode: AstNodeWithTextRegion | undefined = undefined;\n            if (textRegions) {\n                astNode = this.addAstNodeRegionWithAssignmentsTo({ ...value });\n                if ((!key || value.$document) && astNode?.$textRegion) {\n                    // The document URI is added to the root node of the resulting JSON tree\n                    astNode.$textRegion.documentURI = this.currentDocument?.uri.toString();\n                }\n            }\n            if (sourceText && !key) {\n                astNode ??= { ...value };\n                astNode.$sourceText = value.$cstNode?.text;\n            }\n            if (comments) {\n                astNode ??= { ...value };\n                const comment = this.commentProvider.getComment(value);\n                if (comment) {\n                    (astNode as AstNodeWithComment).$comment = comment.replace(/\\r/g, '');\n                }\n            }\n            return astNode ?? value;\n        } else {\n            return value;\n        }\n    }\n\n    protected addAstNodeRegionWithAssignmentsTo(node: AstNodeWithTextRegion) {\n        const createDocumentSegment: (cstNode: CstNode) => AstNodeRegionWithAssignments = cstNode => <DocumentSegment>{\n            offset: cstNode.offset,\n            end: cstNode.end,\n            length: cstNode.length,\n            range: cstNode.range,\n        };\n\n        if (node.$cstNode) {\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\n            const assignments: Record<string, DocumentSegment[]> = textRegion.assignments = {};\n\n            Object.keys(node).filter(key => !key.startsWith('$')).forEach(key => {\n                const propertyAssignments = findNodesForProperty(node.$cstNode, key).map(createDocumentSegment);\n                if (propertyAssignments.length !== 0) {\n                    assignments[key] = propertyAssignments;\n                }\n            });\n\n            return node;\n        }\n        return undefined;\n    }\n\n    protected linkNode(node: GenericAstNode, root: AstNode, options: JsonDeserializeOptions, container?: AstNode, containerProperty?: string, containerIndex?: number) {\n        for (const [propertyName, item] of Object.entries(node)) {\n            if (Array.isArray(item)) {\n                for (let index = 0; index < item.length; index++) {\n                    const element = item[index];\n                    if (isIntermediateReference(element)) {\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\n                    } else if (isAstNode(element)) {\n                        this.linkNode(element as GenericAstNode, root, options, node, propertyName, index);\n                    }\n                }\n            } else if (isIntermediateReference(item)) {\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\n            } else if (isAstNode(item)) {\n                this.linkNode(item as GenericAstNode, root, options, node, propertyName);\n            }\n        }\n        const mutable = node as Mutable<AstNode>;\n        mutable.$container = container;\n        mutable.$containerProperty = containerProperty;\n        mutable.$containerIndex = containerIndex;\n    }\n\n    protected reviveReference(container: AstNode, property: string, root: AstNode, reference: IntermediateReference, options: JsonDeserializeOptions): Reference | undefined {\n        let refText = reference.$refText;\n        let error = reference.$error;\n        if (reference.$ref) {\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\n            if (isAstNode(ref)) {\n                if (!refText) {\n                    refText = this.nameProvider.getName(ref);\n                }\n                return {\n                    $refText: refText ?? '',\n                    ref\n                };\n            } else {\n                error = ref;\n            }\n        }\n        if (error) {\n            const ref: Mutable<Reference> = {\n                $refText: refText ?? ''\n            };\n            ref.error = {\n                container,\n                property,\n                message: error,\n                reference: ref\n            };\n            return ref;\n        } else {\n            return undefined;\n        }\n    }\n\n    protected getRefNode(root: AstNode, uri: string, uriConverter?: (uri: string) => URI): AstNode | string {\n        try {\n            const fragmentIndex = uri.indexOf('#');\n            if (fragmentIndex === 0) {\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\n                if (!node) {\n                    return 'Could not resolve path: ' + uri;\n                }\n                return node;\n            }\n            if (fragmentIndex < 0) {\n                const documentUri = uriConverter ? uriConverter(uri) : URI.parse(uri);\n                const document = this.langiumDocuments.getDocument(documentUri);\n                if (!document) {\n                    return 'Could not find document for URI: ' + uri;\n                }\n                return document.parseResult.value;\n            }\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : URI.parse(uri.substring(0, fragmentIndex));\n            const document = this.langiumDocuments.getDocument(documentUri);\n            if (!document) {\n                return 'Could not find document for URI: ' + uri;\n            }\n            if (fragmentIndex === uri.length - 1) {\n                return document.parseResult.value;\n            }\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\n            if (!node) {\n                return 'Could not resolve URI: ' + uri;\n            }\n            return node;\n        } catch (err) {\n            return String(err);\n        }\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from './services.js';\nimport { UriUtils, type URI } from './utils/uri-utils.js';\n\n/**\n * The service registry provides access to the language-specific {@link LangiumCoreServices} optionally including LSP-related services.\n * These are resolved via the URI of a text document.\n */\nexport interface ServiceRegistry {\n\n    /**\n     * Register a language via its injected services.\n     */\n    register(language: LangiumCoreServices): void;\n\n    /**\n     * Retrieve the language-specific services for the given URI. In case only one language is\n     * registered, it may be used regardless of the URI format.\n     */\n    getServices(uri: URI): LangiumCoreServices;\n\n    /**\n     * The full set of registered language services.\n     */\n    readonly all: readonly LangiumCoreServices[];\n}\n\n/**\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\n */\nexport class DefaultServiceRegistry implements ServiceRegistry {\n\n    protected singleton?: LangiumCoreServices;\n    protected map?: Record<string, LangiumCoreServices>;\n\n    register(language: LangiumCoreServices): void {\n        if (!this.singleton && !this.map) {\n            // This is the first language to be registered; store it as singleton.\n            this.singleton = language;\n            return;\n        }\n        if (!this.map) {\n            this.map = {};\n            if (this.singleton) {\n                // Move the previous singleton instance to the new map.\n                for (const ext of this.singleton.LanguageMetaData.fileExtensions) {\n                    this.map[ext] = this.singleton;\n                }\n                this.singleton = undefined;\n            }\n        }\n        // Store the language services in the map.\n        for (const ext of language.LanguageMetaData.fileExtensions) {\n            if (this.map[ext] !== undefined && this.map[ext] !== language) {\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${language.LanguageMetaData.languageId}'.`);\n            }\n            this.map[ext] = language;\n        }\n    }\n\n    getServices(uri: URI): LangiumCoreServices {\n        if (this.singleton !== undefined) {\n            return this.singleton;\n        }\n        if (this.map === undefined) {\n            throw new Error('The service registry is empty. Use `register` to register the services of a language.');\n        }\n        const ext = UriUtils.extname(uri);\n        const services = this.map[ext];\n        if (!services) {\n            throw new Error(`The service registry contains no services for the extension '${ext}'.`);\n        }\n        return services;\n    }\n\n    get all(): readonly LangiumCoreServices[] {\n        if (this.singleton !== undefined) {\n            return [this.singleton];\n        }\n        if (this.map !== undefined) {\n            return Object.values(this.map);\n        }\n        return [];\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { CodeDescription, DiagnosticRelatedInformation, DiagnosticTag, integer, Range } from 'vscode-languageserver-types';\nimport type { CancellationToken } from '../utils/cancellation.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstReflection, Properties } from '../syntax-tree.js';\nimport type { MaybePromise } from '../utils/promise-utils.js';\nimport type { Stream } from '../utils/stream.js';\nimport type { DocumentSegment } from '../workspace/documents.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { isOperationCancelled } from '../utils/promise-utils.js';\nimport { stream } from '../utils/stream.js';\n\nexport type DiagnosticInfo<N extends AstNode, P extends string = Properties<N>> = {\n    /** The AST node to which the diagnostic is attached. */\n    node: N;\n    /** If a property name is given, the diagnostic is restricted to the corresponding text region. */\n    property?: P;\n    /** If the value of a keyword is given, the diagnostic will appear at its corresponding text region */\n    keyword?: string;\n    /** In case of a multi-value property (array), an index can be given to select a specific element. */\n    index?: number;\n    /** If you want to create a diagnostic independent to any property, use the range property. */\n    range?: Range;\n    /** The diagnostic's code, which usually appear in the user interface. */\n    code?: integer | string;\n    /** An optional property to describe the error code. */\n    codeDescription?: CodeDescription;\n    /** Additional metadata about the diagnostic. */\n    tags?: DiagnosticTag[];\n    /** An array of related diagnostic information, e.g. when symbol-names within a scope collide all definitions can be marked via this property. */\n    relatedInformation?: DiagnosticRelatedInformation[];\n    /** A data entry field that is preserved between a `textDocument/publishDiagnostics` notification and `textDocument/codeAction` request. */\n    data?: unknown;\n}\n\n/**\n * Shape of information commonly used in the `data` field of diagnostics.\n */\nexport interface DiagnosticData {\n    /** Diagnostic code for identifying which code action to apply. This code is _not_ shown in the user interface. */\n    code: string\n    /** Specifies where to apply the code action in the form of a `DocumentSegment`. */\n    actionSegment?: DocumentSegment\n    /** Specifies where to apply the code action in the form of a `Range`. */\n    actionRange?: Range\n}\n\n/**\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\n */\nexport function diagnosticData(code: string): DiagnosticData {\n    return { code };\n}\n\nexport type ValidationAcceptor = <N extends AstNode>(severity: 'error' | 'warning' | 'info' | 'hint', message: string, info: DiagnosticInfo<N>) => void\n\nexport type ValidationCheck<T extends AstNode = AstNode> = (node: T, accept: ValidationAcceptor, cancelToken: CancellationToken) => MaybePromise<void>;\n\n/**\n * A utility type for associating non-primitive AST types to corresponding validation checks. For example:\n *\n * ```ts\n *   const checks: ValidationChecks<StatemachineAstType> = {\n *       State: validator.checkStateNameStartsWithCapital\n *    };\n * ```\n *\n * If an AST type does not extend AstNode, e.g. if it describes a union of string literals, that type's name must not occur as a key in objects of type `ValidationCheck<...>`.\n *\n * @param T a type definition mapping language specific type names (keys) to the corresponding types (values)\n */\nexport type ValidationChecks<T> = {\n    [K in keyof T]?: T[K] extends AstNode ? ValidationCheck<T[K]> | Array<ValidationCheck<T[K]>> : never\n} & {\n    AstNode?: ValidationCheck<AstNode> | Array<ValidationCheck<AstNode>>;\n}\n\n/**\n * `fast` checks can be executed after every document change (i.e. as the user is typing). If a check\n * is too slow it can delay the response to document changes, yielding bad user experience. By marking\n * it as `slow`, it will be skipped for normal as-you-type validation. Then it's up to you when to\n * schedule these long-running checks: after the fast checks are done, or after saving a document,\n * or with an explicit command, etc.\n *\n * `built-in` checks are errors produced by the lexer, the parser, or the linker. They cannot be used\n * for custom validation checks.\n */\nexport type ValidationCategory = 'fast' | 'slow' | 'built-in'\n\nexport namespace ValidationCategory {\n    export const all: readonly ValidationCategory[] = ['fast', 'slow', 'built-in'];\n}\n\ntype ValidationCheckEntry = {\n    check: ValidationCheck\n    category: ValidationCategory\n}\n\n/**\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\n */\nexport class ValidationRegistry {\n    private readonly entries = new MultiMap<string, ValidationCheckEntry>();\n    private readonly reflection: AstReflection;\n\n    constructor(services: LangiumCoreServices) {\n        this.reflection = services.shared.AstReflection;\n    }\n\n    /**\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\n     * or an array of validation checks.\n     *\n     * @param checksRecord Set of validation checks to register.\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */\n    register<T>(checksRecord: ValidationChecks<T>, thisObj: ThisParameterType<unknown> = this, category: ValidationCategory = 'fast'): void {\n        if (category === 'built-in') {\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\n        }\n        for (const [type, ch] of Object.entries(checksRecord)) {\n            const callbacks = ch as ValidationCheck | ValidationCheck[];\n            if (Array.isArray(callbacks)) {\n                for (const check of callbacks) {\n                    const entry: ValidationCheckEntry = {\n                        check: this.wrapValidationException(check, thisObj),\n                        category\n                    };\n                    this.addEntry(type, entry);\n                }\n            } else if (typeof callbacks === 'function') {\n                const entry: ValidationCheckEntry = {\n                    check: this.wrapValidationException(callbacks, thisObj),\n                    category\n                };\n                this.addEntry(type, entry);\n            }\n        }\n    }\n\n    protected wrapValidationException(check: ValidationCheck, thisObj: unknown): ValidationCheck {\n        return async (node, accept, cancelToken) => {\n            try {\n                await check.call(thisObj, node, accept, cancelToken);\n            } catch (err) {\n                if (isOperationCancelled(err)) {\n                    throw err;\n                }\n                console.error('An error occurred during validation:', err);\n                const message = err instanceof Error ? err.message : String(err);\n                if (err instanceof Error && err.stack) {\n                    console.error(err.stack);\n                }\n                accept('error', 'An error occurred during validation: ' + message, { node });\n            }\n        };\n    }\n\n    protected addEntry(type: string, entry: ValidationCheckEntry): void {\n        if (type === 'AstNode') {\n            this.entries.add('AstNode', entry);\n            return;\n        }\n        for (const subtype of this.reflection.getAllSubTypes(type)) {\n            this.entries.add(subtype, entry);\n        }\n    }\n\n    getChecks(type: string, categories?: ValidationCategory[]): Stream<ValidationCheck> {\n        let checks = stream(this.entries.get(type))\n            .concat(this.entries.get('AstNode'));\n        if (categories) {\n            checks = checks.filter(entry => categories.includes(entry.category));\n        }\n        return checks.map(entry => entry.check);\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { MismatchedTokenException } from 'chevrotain';\nimport type { DiagnosticSeverity, Position, Range, Diagnostic } from 'vscode-languageserver-types';\nimport type { LanguageMetaData } from '../languages/language-meta-data.js';\nimport type { ParseResult } from '../parser/langium-parser.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, CstNode } from '../syntax-tree.js';\nimport type { LangiumDocument } from '../workspace/documents.js';\nimport type { DiagnosticData, DiagnosticInfo, ValidationAcceptor, ValidationCategory, ValidationRegistry } from './validation-registry.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { findNodeForKeyword, findNodeForProperty } from '../utils/grammar-utils.js';\nimport { streamAst } from '../utils/ast-utils.js';\nimport { tokenToRange } from '../utils/cst-utils.js';\nimport { interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\nimport { diagnosticData } from './validation-registry.js';\n\nexport interface ValidationOptions {\n    /**\n     * If this is set, only the checks associated with these categories are executed; otherwise\n     * all checks are executed. The default category if not specified to the registry is `'fast'`.\n     */\n    categories?: ValidationCategory[];\n    /** If true, no further diagnostics are reported if there are lexing errors. */\n    stopAfterLexingErrors?: boolean\n    /** If true, no further diagnostics are reported if there are parsing errors. */\n    stopAfterParsingErrors?: boolean\n    /** If true, no further diagnostics are reported if there are linking errors. */\n    stopAfterLinkingErrors?: boolean\n}\n\n/**\n * Language-specific service for validating `LangiumDocument`s.\n */\nexport interface DocumentValidator {\n    /**\n     * Validates the whole specified document.\n     *\n     * @param document specified document to validate\n     * @param options options to control the validation process\n     * @param cancelToken allows to cancel the current operation\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    validateDocument(document: LangiumDocument, options?: ValidationOptions, cancelToken?: CancellationToken): Promise<Diagnostic[]>;\n}\n\nexport class DefaultDocumentValidator implements DocumentValidator {\n\n    protected readonly validationRegistry: ValidationRegistry;\n    protected readonly metadata: LanguageMetaData;\n\n    constructor(services: LangiumCoreServices) {\n        this.validationRegistry = services.validation.ValidationRegistry;\n        this.metadata = services.LanguageMetaData;\n    }\n\n    async validateDocument(document: LangiumDocument, options: ValidationOptions = {}, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\n        const parseResult = document.parseResult;\n        const diagnostics: Diagnostic[] = [];\n\n        await interruptAndCheck(cancelToken);\n\n        if (!options.categories || options.categories.includes('built-in')) {\n            this.processLexingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterLexingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LexingError)) {\n                return diagnostics;\n            }\n\n            this.processParsingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterParsingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.ParsingError)) {\n                return diagnostics;\n            }\n\n            this.processLinkingErrors(document, diagnostics, options);\n            if (options.stopAfterLinkingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LinkingError)) {\n                return diagnostics;\n            }\n        }\n\n        // Process custom validations\n        try {\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\n        } catch (err) {\n            if (isOperationCancelled(err)) {\n                throw err;\n            }\n            console.error('An error occurred during validation:', err);\n        }\n\n        await interruptAndCheck(cancelToken);\n\n        return diagnostics;\n    }\n\n    protected processLexingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\n        for (const lexerError of parseResult.lexerErrors) {\n            const diagnostic: Diagnostic = {\n                severity: toDiagnosticSeverity('error'),\n                range: {\n                    start: {\n                        line: lexerError.line! - 1,\n                        character: lexerError.column! - 1\n                    },\n                    end: {\n                        line: lexerError.line! - 1,\n                        character: lexerError.column! + lexerError.length - 1\n                    }\n                },\n                message: lexerError.message,\n                data: diagnosticData(DocumentValidator.LexingError),\n                source: this.getSource()\n            };\n            diagnostics.push(diagnostic);\n        }\n    }\n\n    protected processParsingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\n        for (const parserError of parseResult.parserErrors) {\n            let range: Range | undefined = undefined;\n            // We can run into the chevrotain error recovery here\n            // The token contained in the parser error might be automatically inserted\n            // In this case every position value will be `NaN`\n            if (isNaN(parserError.token.startOffset)) {\n                // Some special parser error types contain a `previousToken`\n                // We can simply append our diagnostic to that token\n                if ('previousToken' in parserError) {\n                    const token = (parserError as MismatchedTokenException).previousToken;\n                    if (!isNaN(token.startOffset)) {\n                        const position: Position = { line: token.endLine! - 1, character: token.endColumn! };\n                        range = { start: position, end: position};\n                    } else {\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\n                        // Point to document start\n                        const position: Position = { line: 0, character: 0 };\n                        range = { start: position, end: position};\n                    }\n                }\n            } else {\n                range = tokenToRange(parserError.token);\n            }\n            if (range) {\n                const diagnostic: Diagnostic = {\n                    severity: toDiagnosticSeverity('error'),\n                    range,\n                    message: parserError.message,\n                    data: diagnosticData(DocumentValidator.ParsingError),\n                    source: this.getSource()\n                };\n                diagnostics.push(diagnostic);\n            }\n        }\n    }\n\n    protected processLinkingErrors(document: LangiumDocument, diagnostics: Diagnostic[], _options: ValidationOptions): void {\n        for (const reference of document.references) {\n            const linkingError = reference.error;\n            if (linkingError) {\n                const info: DiagnosticInfo<AstNode, string> = {\n                    node: linkingError.container,\n                    property: linkingError.property,\n                    index: linkingError.index,\n                    data: {\n                        code: DocumentValidator.LinkingError,\n                        containerType: linkingError.container.$type,\n                        property: linkingError.property,\n                        refText: linkingError.reference.$refText\n                    } satisfies LinkingErrorData\n                };\n                diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\n            }\n        }\n    }\n\n    protected async validateAst(rootNode: AstNode, options: ValidationOptions, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\n        const validationItems: Diagnostic[] = [];\n        const acceptor: ValidationAcceptor = <N extends AstNode>(severity: 'error' | 'warning' | 'info' | 'hint', message: string, info: DiagnosticInfo<N>) => {\n            validationItems.push(this.toDiagnostic(severity, message, info));\n        };\n\n        await Promise.all(streamAst(rootNode).map(async node => {\n            await interruptAndCheck(cancelToken);\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\n            for (const check of checks) {\n                await check(node, acceptor, cancelToken);\n            }\n        }));\n        return validationItems;\n    }\n\n    protected toDiagnostic<N extends AstNode>(severity: 'error' | 'warning' | 'info' | 'hint', message: string, info: DiagnosticInfo<N, string>): Diagnostic {\n        return {\n            message,\n            range: getDiagnosticRange(info),\n            severity: toDiagnosticSeverity(severity),\n            code: info.code,\n            codeDescription: info.codeDescription,\n            tags: info.tags,\n            relatedInformation: info.relatedInformation,\n            data: info.data,\n            source: this.getSource()\n        };\n    }\n\n    protected getSource(): string | undefined {\n        return this.metadata.languageId;\n    }\n}\n\nexport function getDiagnosticRange<N extends AstNode>(info: DiagnosticInfo<N, string>): Range {\n    if (info.range) {\n        return info.range;\n    }\n    let cstNode: CstNode | undefined;\n    if (typeof info.property === 'string') {\n        cstNode = findNodeForProperty(info.node.$cstNode, info.property, info.index);\n    } else if (typeof info.keyword === 'string') {\n        cstNode = findNodeForKeyword(info.node.$cstNode, info.keyword, info.index);\n    }\n    cstNode ??= info.node.$cstNode;\n    if (!cstNode) {\n        return {\n            start: { line: 0, character: 0 },\n            end: { line: 0, character: 0 }\n        };\n    }\n    return cstNode.range;\n}\n\nexport function toDiagnosticSeverity(severity: 'error' | 'warning' | 'info' | 'hint'): DiagnosticSeverity {\n    switch (severity) {\n        case 'error':\n            return 1; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Error\n        case 'warning':\n            return 2; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Warning\n        case 'info':\n            return 3; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Information\n        case 'hint':\n            return 4; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Hint\n        default:\n            throw new Error('Invalid diagnostic severity: ' + severity);\n    }\n}\n\nexport namespace DocumentValidator {\n    export const LexingError = 'lexing-error';\n    export const ParsingError = 'parsing-error';\n    export const LinkingError = 'linking-error';\n}\n\nexport interface LinkingErrorData extends DiagnosticData {\n    containerType: string\n    property: string\n    refText: string\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nexport interface Disposable {\n    /**\n     * Dispose this object.\n     */\n    dispose(): void;\n}\n\nexport interface AsyncDisposable {\n    /**\n     * Dispose this object.\n     */\n    dispose(): Promise<void>;\n}\n\nexport namespace Disposable {\n    export function create(callback: () => Promise<void>): AsyncDisposable;\n    export function create(callback: () => void): Disposable;\n    export function create(callback: () => void | Promise<void>): Disposable | AsyncDisposable {\n        return {\n            dispose: async () => await callback()\n        };\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { URI } from '../utils/uri-utils.js';\nimport type { NameProvider } from '../references/name-provider.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, ReferenceInfo } from '../syntax-tree.js';\nimport type { AstNodeLocator } from './ast-node-locator.js';\nimport type { DocumentSegment, LangiumDocument } from './documents.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { isLinkingError } from '../syntax-tree.js';\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\nimport { toDocumentSegment } from '../utils/cst-utils.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\nimport { UriUtils } from '../utils/uri-utils.js';\n\n/**\n * Language-specific service for creating descriptions of AST nodes to be used for cross-reference resolutions.\n */\nexport interface AstNodeDescriptionProvider {\n\n    /**\n     * Create a description for the given AST node. This service method is typically used while indexing\n     * the contents of a document and during scope computation.\n     *\n     * @param node An AST node.\n     * @param name The name to be used to refer to the AST node. By default, this is determined by the\n     *     `NameProvider` service, but alternative names may be provided according to the semantics\n     *     of your language.\n     * @param document The document containing the AST node. If omitted, it is taken from the root AST node.\n     */\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription;\n\n}\n\nexport class DefaultAstNodeDescriptionProvider implements AstNodeDescriptionProvider {\n\n    protected readonly astNodeLocator: AstNodeLocator;\n    protected readonly nameProvider: NameProvider;\n\n    constructor(services: LangiumCoreServices) {\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n    }\n\n    createDescription(node: AstNode, name: string | undefined, document: LangiumDocument = getDocument(node)): AstNodeDescription {\n        name ??= this.nameProvider.getName(node);\n        const path = this.astNodeLocator.getAstNodePath(node);\n        if (!name) {\n            throw new Error(`Node at path ${path} has no name.`);\n        }\n        let nameNodeSegment: DocumentSegment | undefined;\n        const nameSegmentGetter = () => nameNodeSegment ??= toDocumentSegment(this.nameProvider.getNameNode(node) ?? node.$cstNode);\n        return {\n            node,\n            name,\n            get nameSegment() {\n                return nameSegmentGetter();\n            },\n            selectionSegment: toDocumentSegment(node.$cstNode),\n            type: node.$type,\n            documentUri: document.uri,\n            path\n        };\n    }\n\n}\n\n/**\n * Describes a cross-reference within a document or between two documents.\n */\nexport interface ReferenceDescription {\n    /** URI of the document that holds a reference */\n    sourceUri: URI\n    /** Path to AstNode that holds a reference */\n    sourcePath: string\n    /** Target document uri */\n    targetUri: URI\n    /** Path to the target AstNode inside the document */\n    targetPath: string\n    /** Segment of the reference text. */\n    segment: DocumentSegment\n    /** Marks a local reference i.e. a cross reference inside a document.   */\n    local?: boolean\n}\n\n/**\n * Language-specific service to create descriptions of all cross-references in a document. These are used by the `IndexManager`\n * to determine which documents are affected and should be rebuilt when a document is changed.\n */\nexport interface ReferenceDescriptionProvider {\n    /**\n     * Create descriptions of all cross-references found in the given document. These descriptions are\n     * gathered by the `IndexManager` and stored in the global index so they can be considered when\n     * a document change is reported by the client.\n     *\n     * @param document The document in which to gather cross-references.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    createDescriptions(document: LangiumDocument, cancelToken?: CancellationToken): Promise<ReferenceDescription[]>;\n}\n\nexport class DefaultReferenceDescriptionProvider implements ReferenceDescriptionProvider {\n\n    protected readonly nodeLocator: AstNodeLocator;\n\n    constructor(services: LangiumCoreServices) {\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n\n    async createDescriptions(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<ReferenceDescription[]> {\n        const descr: ReferenceDescription[] = [];\n        const rootNode = document.parseResult.value;\n        for (const astNode of streamAst(rootNode)) {\n            await interruptAndCheck(cancelToken);\n            streamReferences(astNode).filter(refInfo => !isLinkingError(refInfo)).forEach(refInfo => {\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\n                const description = this.createDescription(refInfo);\n                if (description) {\n                    descr.push(description);\n                }\n            });\n        }\n        return descr;\n    }\n\n    protected createDescription(refInfo: ReferenceInfo): ReferenceDescription | undefined {\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\n        const refCstNode = refInfo.reference.$refNode;\n        if (!targetNodeDescr || !refCstNode) {\n            return undefined;\n        }\n        const docUri = getDocument(refInfo.container).uri;\n        return {\n            sourceUri: docUri,\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\n            targetUri: targetNodeDescr.documentUri,\n            targetPath: targetNodeDescr.path,\n            segment: toDocumentSegment(refCstNode),\n            local: UriUtils.equals(targetNodeDescr.documentUri, docUri)\n        };\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { AstNode } from '../syntax-tree.js';\n\n/**\n * Language-specific service for locating an `AstNode` in a document.\n */\nexport interface AstNodeLocator {\n\n    /**\n     * Creates a path represented by a `string` that identifies an `AstNode` inside its document.\n     * It must be possible to retrieve exactly the same `AstNode` from the document using this path.\n     *\n     * @param node The `AstNode` for which to create the path.\n     * @returns a path represented by a `string` that identifies `node` inside its document.\n     * @see AstNodeLocator.getAstNode\n     */\n    getAstNodePath(node: AstNode): string;\n\n    /**\n     * Locates an `AstNode` inside another node by following the given path.\n     *\n     * @param node Parent element.\n     * @param path Describes how to locate the `AstNode` inside the given `node`.\n     * @returns The `AstNode` located under the given path, or `undefined` if the path cannot be resolved.\n     * @see AstNodeLocator.getAstNodePath\n     */\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined;\n\n}\n\nexport class DefaultAstNodeLocator implements AstNodeLocator {\n    protected segmentSeparator = '/';\n    protected indexSeparator = '@';\n\n    getAstNodePath(node: AstNode): string {\n        if (node.$container) {\n            const containerPath = this.getAstNodePath(node.$container);\n            const newSegment = this.getPathSegment(node);\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\n            return nodePath;\n        }\n        return '';\n    }\n\n    protected getPathSegment({ $containerProperty, $containerIndex }: AstNode): string {\n        if (!$containerProperty) {\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\n        }\n        if ($containerIndex !== undefined) {\n            return $containerProperty + this.indexSeparator + $containerIndex;\n        }\n        return $containerProperty;\n    }\n\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined {\n        const segments = path.split(this.segmentSeparator);\n        return segments.reduce((previousValue, currentValue) => {\n            if (!previousValue || currentValue.length === 0) {\n                return previousValue;\n            }\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\n            if (propertyIndex > 0) {\n                const property = currentValue.substring(0, propertyIndex);\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\n                const array = (previousValue as unknown as Record<string, AstNode[]>)[property];\n                return array?.[arrayIndex];\n            }\n            return (previousValue as unknown as Record<string, AstNode>)[currentValue];\n        }, node) as T;\n    }\n\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { ConfigurationItem, DidChangeConfigurationParams, DidChangeConfigurationRegistrationOptions, InitializeParams, InitializedParams } from 'vscode-languageserver-protocol';\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport { Deferred } from '../utils/promise-utils.js';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport interface ConfigurationProvider {\n\n    /**\n     * A promise that resolves when the configuration provider is ready to be used.\n     */\n    readonly ready: Promise<void>;\n\n    /**\n     * When used in a language server context, this method is called when the server receives\n     * the `initialize` request.\n     */\n    initialize(params: InitializeParams): void;\n\n    /**\n     * When used in a language server context, this method is called when the server receives\n     * the `initialized` notification.\n     */\n    initialized(params: ConfigurationInitializedParams): Promise<void>;\n\n    /**\n     * Returns a configuration value stored for the given language.\n     *\n     * @param language The language id\n     * @param configuration Configuration name\n     */\n    getConfiguration(language: string, configuration: string): Promise<any>;\n\n    /**\n     *  Updates the cached configurations using the `change` notification parameters.\n     *\n     * @param change The parameters of a change configuration notification.\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\n     */\n    updateConfiguration(change: DidChangeConfigurationParams): void;\n}\n\nexport interface ConfigurationInitializedParams extends InitializedParams {\n    register?: (params: DidChangeConfigurationRegistrationOptions) => void,\n    fetchConfiguration?: (configuration: ConfigurationItem[]) => Promise<any>\n}\n\n/**\n * Base configuration provider for building up other configuration providers\n */\nexport class DefaultConfigurationProvider implements ConfigurationProvider {\n\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly _ready = new Deferred<void>();\n    protected settings: Record<string, Record<string, any>> = {};\n    protected workspaceConfig = false;\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n\n    get ready(): Promise<void> {\n        return this._ready.promise;\n    }\n\n    initialize(params: InitializeParams): void {\n        this.workspaceConfig = params.capabilities.workspace?.configuration ?? false;\n    }\n\n    async initialized(params: ConfigurationInitializedParams): Promise<void> {\n        if (this.workspaceConfig) {\n            if (params.register) {\n                // params.register(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n\n                const languages = this.serviceRegistry.all;\n                params.register({\n                    // Listen to configuration changes for all languages\n                    section: languages.map(lang => this.toSectionName(lang.LanguageMetaData.languageId))\n                });\n            }\n\n            if (params.fetchConfiguration) {\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n                const configToUpdate = this.serviceRegistry.all.map(lang => <ConfigurationItem>{\n                    // Fetch the configuration changes for all languages\n                    section: this.toSectionName(lang.LanguageMetaData.languageId)\n                });\n\n                // get workspace configurations (default scope URI)\n                const configs = await params.fetchConfiguration(configToUpdate);\n                configToUpdate.forEach((conf, idx) => {\n                    this.updateSectionConfiguration(conf.section!, configs[idx]);\n                });\n            }\n        }\n        this._ready.resolve();\n    }\n\n    /**\n     *  Updates the cached configurations using the `change` notification parameters.\n     *\n     * @param change The parameters of a change configuration notification.\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\n     */\n    updateConfiguration(change: DidChangeConfigurationParams): void {\n        if (!change.settings) {\n            return;\n        }\n        Object.keys(change.settings).forEach(section => {\n            this.updateSectionConfiguration(section, change.settings[section]);\n        });\n    }\n\n    protected updateSectionConfiguration(section: string, configuration: any): void {\n        this.settings[section] = configuration;\n    }\n\n    /**\n    * Returns a configuration value stored for the given language.\n    *\n    * @param language The language id\n    * @param configuration Configuration name\n    */\n    async getConfiguration(language: string, configuration: string): Promise<any> {\n        await this.ready;\n\n        const sectionName = this.toSectionName(language);\n        if (this.settings[sectionName]) {\n            return this.settings[sectionName][configuration];\n        }\n    }\n\n    protected toSectionName(languageId: string): string {\n        return `${languageId}`;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { Disposable } from '../utils/disposable.js';\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport type { AstNode } from '../syntax-tree.js';\nimport type { MaybePromise } from '../utils/promise-utils.js';\nimport type { Deferred } from '../utils/promise-utils.js';\nimport type { ValidationOptions } from '../validation/document-validator.js';\nimport type { IndexManager } from '../workspace/index-manager.js';\nimport type { LangiumDocument, LangiumDocuments, LangiumDocumentFactory } from './documents.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { OperationCancelled, interruptAndCheck } from '../utils/promise-utils.js';\nimport { stream } from '../utils/stream.js';\nimport type { URI } from '../utils/uri-utils.js';\nimport { ValidationCategory } from '../validation/validation-registry.js';\nimport { DocumentState } from './documents.js';\n\nexport interface BuildOptions {\n    /**\n     * Control the validation phase with this option:\n     *  - `true` enables all validation checks and forces revalidating the documents\n     *  - `false` or `undefined` disables all validation checks\n     *  - An object runs only the necessary validation checks; the `categories` property restricts this to a specific subset\n     */\n    validation?: boolean | ValidationOptions\n}\n\nexport interface DocumentBuildState {\n    /** Whether a document has completed its last build process. */\n    completed: boolean\n    /** The options used for the last build process. */\n    options: BuildOptions\n    /** Additional information about the last build result. */\n    result?: {\n        validationChecks?: ValidationCategory[]\n    }\n}\n\n/**\n * Shared-service for building and updating `LangiumDocument`s.\n */\nexport interface DocumentBuilder {\n\n    /** The options used for rebuilding documents after an update. */\n    updateBuildOptions: BuildOptions;\n\n    /**\n     * Execute all necessary build steps for the given documents.\n     *\n     * @param documents Set of documents to be built.\n     * @param options Options for the document builder.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options?: BuildOptions, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * This method is called when a document change is detected. It updates the state of all\n     * affected documents, including those with references to the changed ones, so they are rebuilt.\n     *\n     * @param changed URIs of changed or created documents\n     * @param deleted URIs of deleted documents\n     * @param cancelToken allows to cancel the current operation\n     * @throws `OperationCancelled` if cancellation is detected during execution\n     */\n    update(changed: URI[], deleted: URI[], cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Notify the given callback when a document update was triggered, but before any document\n     * is rebuilt. Listeners to this event should not perform any long-running task.\n     */\n    onUpdate(callback: DocumentUpdateListener): Disposable;\n\n    /**\n     * Notify the given callback when a set of documents has been built reaching a desired target state.\n     */\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable;\n\n    /**\n     * Wait until the workspace has reached the specified state for all documents.\n     *\n     * @param state The desired state. The promise won't resolve until all documents have reached this state\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\n     */\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Wait until the document specified by the {@link uri} has reached the specified state.\n     *\n     * @param state The desired state. The promise won't resolve until the document has reached this state.\n     * @param uri The specified URI that points to the document. If the URI does not exist, the promise will resolve once the workspace has reached the specified state.\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process.\n     * @return The URI of the document that has reached the desired state, or `undefined` if the document does not exist.\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\n     */\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\n}\n\nexport type DocumentUpdateListener = (changed: URI[], deleted: URI[]) => void | Promise<void>\nexport type DocumentBuildListener = (built: LangiumDocument[], cancelToken: CancellationToken) => void | Promise<void>\nexport class DefaultDocumentBuilder implements DocumentBuilder {\n\n    updateBuildOptions: BuildOptions = {\n        // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\n        validation: {\n            categories: ['built-in', 'fast']\n        }\n    };\n\n    protected readonly langiumDocuments: LangiumDocuments;\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\n    protected readonly indexManager: IndexManager;\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly updateListeners: DocumentUpdateListener[] = [];\n    protected readonly buildPhaseListeners = new MultiMap<DocumentState, DocumentBuildListener>();\n    protected readonly buildState = new Map<string, DocumentBuildState>();\n    protected readonly documentBuildWaiters = new Map<string, Deferred<void>>();\n    protected currentState = DocumentState.Changed;\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n        this.indexManager = services.workspace.IndexManager;\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n\n    async build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options: BuildOptions = {}, cancelToken = CancellationToken.None): Promise<void> {\n        for (const document of documents) {\n            const key = document.uri.toString();\n            if (document.state === DocumentState.Validated) {\n                if (typeof options.validation === 'boolean' && options.validation) {\n                    // Force re-running all validation checks\n                    document.state = DocumentState.IndexedReferences;\n                    document.diagnostics = undefined;\n                    this.buildState.delete(key);\n                } else if (typeof options.validation === 'object') {\n                    const buildState = this.buildState.get(key);\n                    const previousCategories = buildState?.result?.validationChecks;\n                    if (previousCategories) {\n                        // Validation with explicit options was requested for a document that has already been partly validated.\n                        // In this case, we need to merge the previous validation categories with the new ones.\n                        const newCategories = options.validation.categories ?? ValidationCategory.all as ValidationCategory[];\n                        const categories = newCategories.filter(c => !previousCategories.includes(c));\n                        if (categories.length > 0) {\n                            this.buildState.set(key, {\n                                completed: false,\n                                options: {\n                                    validation: {\n                                        ...options.validation,\n                                        categories\n                                    }\n                                },\n                                result: buildState.result\n                            });\n                            document.state = DocumentState.IndexedReferences;\n                        }\n                    }\n                }\n            } else {\n                // Default: forget any previous build options\n                this.buildState.delete(key);\n            }\n        }\n        this.currentState = DocumentState.Changed;\n        await this.emitUpdate(documents.map(e => e.uri), []);\n        await this.buildDocuments(documents, options, cancelToken);\n    }\n\n    async update(changed: URI[], deleted: URI[], cancelToken = CancellationToken.None): Promise<void> {\n        this.currentState = DocumentState.Changed;\n        // Remove all metadata of documents that are reported as deleted\n        for (const deletedUri of deleted) {\n            this.langiumDocuments.deleteDocument(deletedUri);\n            this.buildState.delete(deletedUri.toString());\n            this.indexManager.remove(deletedUri);\n        }\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\n        for (const changedUri of changed) {\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\n            if (!invalidated) {\n                // We create an unparsed, invalid document.\n                // This will be parsed as soon as we reach the first document builder phase.\n                // This allows to cancel the parsing process later in case we need it.\n                const newDocument = this.langiumDocumentFactory.fromModel({ $type: 'INVALID' }, changedUri);\n                newDocument.state = DocumentState.Changed;\n                this.langiumDocuments.addDocument(newDocument);\n            }\n            this.buildState.delete(changedUri.toString());\n        }\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\n        const allChangedUris = stream(changed).concat(deleted).map(uri => uri.toString()).toSet();\n        this.langiumDocuments.all\n            .filter(doc => !allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris))\n            .forEach(doc => {\n                const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n                linker.unlink(doc);\n                doc.state = Math.min(doc.state, DocumentState.ComputedScopes);\n                doc.diagnostics = undefined;\n            });\n        // Notify listeners of the update\n        await this.emitUpdate(changed, deleted);\n        // Only allow interrupting the execution after all state changes are done\n        await interruptAndCheck(cancelToken);\n\n        // Collect all documents that we should rebuild\n        const rebuildDocuments = this.langiumDocuments.all\n            .filter(doc =>\n                // This includes those that were reported as changed and those that we selected for relinking\n                doc.state < DocumentState.Linked\n                // This includes those for which a previous build has been cancelled\n                || !this.buildState.get(doc.uri.toString())?.completed\n            )\n            .toArray();\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\n    }\n\n    protected async emitUpdate(changed: URI[], deleted: URI[]): Promise<void> {\n        await Promise.all(this.updateListeners.map(listener => listener(changed, deleted)));\n    }\n\n    /**\n     * Check whether the given document should be relinked after changes were found in the given URIs.\n     */\n    protected shouldRelink(document: LangiumDocument, changedUris: Set<string>): boolean {\n        // Relink documents with linking errors -- maybe those references can be resolved now\n        if (document.references.some(ref => ref.error !== undefined)) {\n            return true;\n        }\n        // Check whether the document is affected by any of the changed URIs\n        return this.indexManager.isAffected(document, changedUris);\n    }\n\n    onUpdate(callback: DocumentUpdateListener): Disposable {\n        this.updateListeners.push(callback);\n        return Disposable.create(() => {\n            const index = this.updateListeners.indexOf(callback);\n            if (index >= 0) {\n                this.updateListeners.splice(index, 1);\n            }\n        });\n    }\n\n    /**\n     * Build the given documents by stepping through all build phases. If a document's state indicates\n     * that a certain build phase is already done, the phase is skipped for that document.\n     */\n    protected async buildDocuments(documents: LangiumDocument[], options: BuildOptions, cancelToken: CancellationToken): Promise<void> {\n        this.prepareBuild(documents, options);\n        // 0. Parse content\n        await this.runCancelable(documents, DocumentState.Parsed, cancelToken, doc =>\n            this.langiumDocumentFactory.update(doc, cancelToken)\n        );\n        // 1. Index content\n        await this.runCancelable(documents, DocumentState.IndexedContent, cancelToken, doc =>\n            this.indexManager.updateContent(doc, cancelToken)\n        );\n        // 2. Compute scopes\n        await this.runCancelable(documents, DocumentState.ComputedScopes, cancelToken, async doc => {\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\n        });\n        // 3. Linking\n        await this.runCancelable(documents, DocumentState.Linked, cancelToken, doc => {\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n            return linker.link(doc, cancelToken);\n        });\n        // 4. Index references\n        await this.runCancelable(documents, DocumentState.IndexedReferences, cancelToken, doc =>\n            this.indexManager.updateReferences(doc, cancelToken)\n        );\n        // 5. Validation\n        const toBeValidated = documents.filter(doc => this.shouldValidate(doc));\n        await this.runCancelable(toBeValidated, DocumentState.Validated, cancelToken, doc =>\n            this.validate(doc, cancelToken)\n        );\n\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\n        for (const doc of documents) {\n            const state = this.buildState.get(doc.uri.toString());\n            if (state) {\n                state.completed = true;\n            }\n        }\n    }\n\n    protected prepareBuild(documents: LangiumDocument[], options: BuildOptions): void {\n        for (const doc of documents) {\n            const key = doc.uri.toString();\n            const state = this.buildState.get(key);\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\n            // and continue where it was cancelled.\n            if (!state || state.completed) {\n                this.buildState.set(key, {\n                    completed: false,\n                    options,\n                    result: state?.result\n                });\n            }\n        }\n    }\n\n    protected async runCancelable(documents: LangiumDocument[], targetState: DocumentState, cancelToken: CancellationToken,\n        callback: (document: LangiumDocument) => MaybePromise<unknown>): Promise<void> {\n        const filtered = documents.filter(e => e.state < targetState);\n        for (const document of filtered) {\n            await interruptAndCheck(cancelToken);\n            await callback(document);\n            document.state = targetState;\n        }\n        await this.notifyBuildPhase(filtered, targetState, cancelToken);\n        this.currentState = targetState;\n    }\n\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable {\n        this.buildPhaseListeners.add(targetState, callback);\n        return Disposable.create(() => {\n            this.buildPhaseListeners.delete(targetState, callback);\n        });\n    }\n\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\n    waitUntil(state: DocumentState, uriOrToken?: URI | CancellationToken, cancelToken?: CancellationToken): Promise<URI | undefined | void> {\n        let uri: URI | undefined = undefined;\n        if (uriOrToken && 'path' in uriOrToken) {\n            uri = uriOrToken;\n        } else {\n            cancelToken = uriOrToken;\n        }\n        cancelToken ??= CancellationToken.None;\n        if (uri) {\n            const document = this.langiumDocuments.getDocument(uri);\n            if (document && document.state > state) {\n                return Promise.resolve(uri);\n            }\n        }\n        if (this.currentState >= state) {\n            return Promise.resolve(undefined);\n        } else if (cancelToken.isCancellationRequested) {\n            return Promise.reject(OperationCancelled);\n        }\n        return new Promise((resolve, reject) => {\n            const buildDisposable = this.onBuildPhase(state, () => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                if (uri) {\n                    const document = this.langiumDocuments.getDocument(uri);\n                    resolve(document?.uri);\n                } else {\n                    resolve(undefined);\n                }\n            });\n            const cancelDisposable = cancelToken!.onCancellationRequested(() => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                reject(OperationCancelled);\n            });\n        });\n    }\n\n    protected async notifyBuildPhase(documents: LangiumDocument[], state: DocumentState, cancelToken: CancellationToken): Promise<void> {\n        if (documents.length === 0) {\n            // Don't notify when no document has been processed\n            return;\n        }\n        const listeners = this.buildPhaseListeners.get(state);\n        for (const listener of listeners) {\n            await interruptAndCheck(cancelToken);\n            await listener(documents, cancelToken);\n        }\n    }\n\n    /**\n     * Determine whether the given document should be validated during a build. The default\n     * implementation checks the `validation` property of the build options. If it's set to `true`\n     * or a `ValidationOptions` object, the document is included in the validation phase.\n     */\n    protected shouldValidate(document: LangiumDocument): boolean {\n        return Boolean(this.getBuildOptions(document).validation);\n    }\n\n    /**\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\n     * If the document already contains diagnostics, the new ones are added to the list.\n     */\n    protected async validate(document: LangiumDocument, cancelToken: CancellationToken): Promise<void> {\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\n        const validationSetting = this.getBuildOptions(document).validation;\n        const options = typeof validationSetting === 'object' ? validationSetting : undefined;\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\n        if (document.diagnostics) {\n            document.diagnostics.push(...diagnostics);\n        } else {\n            document.diagnostics = diagnostics;\n        }\n\n        // Store information about the executed validation in the build state\n        const state = this.buildState.get(document.uri.toString());\n        if (state) {\n            state.result ??= {};\n            const newCategories = options?.categories ?? ValidationCategory.all;\n            if (state.result.validationChecks) {\n                state.result.validationChecks.push(...newCategories);\n            } else {\n                state.result.validationChecks = [...newCategories];\n            }\n        }\n    }\n\n    protected getBuildOptions(document: LangiumDocument): BuildOptions {\n        return this.buildState.get(document.uri.toString())?.options ?? {};\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, AstReflection } from '../syntax-tree.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { ContextCache } from '../utils/caching.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport type { Stream } from '../utils/stream.js';\nimport { stream } from '../utils/stream.js';\nimport type { URI } from '../utils/uri-utils.js';\nimport { UriUtils } from '../utils/uri-utils.js';\nimport type { ReferenceDescription } from './ast-descriptions.js';\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\n\n/**\n * The index manager is responsible for keeping metadata about symbols and cross-references\n * in the workspace. It is used to look up symbols in the global scope, mostly during linking\n * and completion. This service is shared between all languages of a language server.\n */\nexport interface IndexManager {\n\n    /**\n     * Removes the specified document URI from the index.\n     * Necessary when documents are deleted and not referenceable anymore.\n     *\n     * @param uri The URI of the document for which index data shall be removed\n     */\n    remove(uri: URI): void;\n\n    /**\n     * Updates the information about the exportable content of a document inside the index.\n     *\n     * @param document Document to be updated\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    updateContent(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Updates the information about the cross-references of a document inside the index.\n     *\n     * @param document Document to be updated\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    updateReferences(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Determine whether the given document could be affected by changes of the documents\n     * identified by the given URIs (second parameter). The document is typically regarded as\n     * affected if it contains a reference to any of the changed files.\n     *\n     * @param document Document to check whether it's affected\n     * @param changedUris URIs of the changed documents\n     */\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean;\n\n    /**\n     * Compute a list of all exported elements, optionally filtered using a type identifier and document URIs.\n     *\n     * @param nodeType The type to filter with, or `undefined` to return descriptions of all types.\n     * @param uris If specified, only returns elements from the given URIs.\n     * @returns a `Stream` containing all globally visible nodes (of a given type).\n     */\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription>;\n\n    /**\n     * Returns all known references that are pointing to the given `targetNode`.\n     *\n     * @param targetNode the `AstNode` to look up references for\n     * @param astNodePath the path that points to the `targetNode` inside the document. See also `AstNodeLocator`\n     *\n     * @returns a `Stream` of references that are targeting the `targetNode`\n     */\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription>;\n\n}\n\nexport class DefaultIndexManager implements IndexManager {\n\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly documents: LangiumDocuments;\n    protected readonly astReflection: AstReflection;\n\n    /**\n     * The symbol index stores all `AstNodeDescription` items exported by a document.\n     * The key used in this map is the string representation of the specific document URI.\n     */\n    protected readonly symbolIndex = new Map<string, AstNodeDescription[]>();\n    /**\n     * This is a cache for the `allElements()` method.\n     * It caches the descriptions from `symbolIndex` grouped by types.\n     */\n    protected readonly symbolByTypeIndex = new ContextCache<string, string, AstNodeDescription[]>();\n    /**\n     * This index keeps track of all `ReferenceDescription` items exported by a document.\n     * This is used to compute which elements are affected by a document change\n     * and for finding references to an AST node.\n     */\n    protected readonly referenceIndex = new Map<string, ReferenceDescription[]>();\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.documents = services.workspace.LangiumDocuments;\n        this.serviceRegistry = services.ServiceRegistry;\n        this.astReflection = services.AstReflection;\n    }\n\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription> {\n        const targetDocUri = getDocument(targetNode).uri;\n        const result: ReferenceDescription[] = [];\n        this.referenceIndex.forEach(docRefs => {\n            docRefs.forEach(refDescr => {\n                if (UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\n                    result.push(refDescr);\n                }\n            });\n        });\n        return stream(result);\n    }\n\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription> {\n        let documentUris = stream(this.symbolIndex.keys());\n        if (uris) {\n            documentUris = documentUris.filter(uri => !uris || uris.has(uri));\n        }\n        return documentUris\n            .map(uri => this.getFileDescriptions(uri, nodeType))\n            .flat();\n    }\n\n    protected getFileDescriptions(uri: string, nodeType?: string): AstNodeDescription[] {\n        if (!nodeType) {\n            return this.symbolIndex.get(uri) ?? [];\n        }\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, () => {\n            const allFileDescriptions = this.symbolIndex.get(uri) ?? [];\n            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));\n        });\n        return descriptions;\n    }\n\n    remove(uri: URI): void {\n        const uriString = uri.toString();\n        this.symbolIndex.delete(uriString);\n        this.symbolByTypeIndex.clear(uriString);\n        this.referenceIndex.delete(uriString);\n    }\n\n    async updateContent(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\n        const uri = document.uri.toString();\n        this.symbolIndex.set(uri, exports);\n        this.symbolByTypeIndex.clear(uri);\n    }\n\n    async updateReferences(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\n        this.referenceIndex.set(document.uri.toString(), indexData);\n    }\n\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean {\n        const references = this.referenceIndex.get(document.uri.toString());\n        if (!references) {\n            return false;\n        }\n        return references.some(ref => !ref.local && changedUris.has(ref.targetUri.toString()));\n    }\n\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { InitializeParams, InitializedParams } from 'vscode-languageserver-protocol';\nimport type { WorkspaceFolder } from 'vscode-languageserver-types';\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { Deferred, interruptAndCheck } from '../utils/promise-utils.js';\nimport { URI, UriUtils } from '../utils/uri-utils.js';\nimport type { BuildOptions, DocumentBuilder } from './document-builder.js';\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\nimport type { FileSystemNode, FileSystemProvider } from './file-system-provider.js';\nimport type { WorkspaceLock } from './workspace-lock.js';\n\n// export type WorkspaceFolder from 'vscode-languageserver-types' for convenience,\n//  is supposed to avoid confusion as 'WorkspaceFolder' might accidentally be imported via 'vscode-languageclient'\nexport type { WorkspaceFolder };\n\n/**\n * The workspace manager is responsible for finding source files in the workspace.\n * This service is shared between all languages of a language server.\n */\nexport interface WorkspaceManager {\n\n    /** The options used for the initial workspace build. */\n    initialBuildOptions: BuildOptions | undefined;\n\n    /**\n     * A promise that resolves when the workspace manager is ready to be used.\n     * Use this to ensure that the workspace manager has finished its initialization.\n     */\n    readonly ready: Promise<void>;\n\n    /**\n     * When used in a language server context, this method is called when the server receives\n     * the `initialize` request.\n     */\n    initialize(params: InitializeParams): void;\n\n    /**\n     * When used in a language server context, this method is called when the server receives\n     * the `initialized` notification.\n     */\n    initialized(params: InitializedParams): Promise<void>;\n\n    /**\n     * Does the initial indexing of workspace folders.\n     * Collects information about exported and referenced AstNodes in\n     * each language file and stores it locally.\n     *\n     * @param folders The set of workspace folders to be indexed.\n     */\n    initializeWorkspace(folders: WorkspaceFolder[], cancelToken?: CancellationToken): Promise<void>;\n\n}\n\nexport class DefaultWorkspaceManager implements WorkspaceManager {\n\n    initialBuildOptions: BuildOptions = {};\n\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly langiumDocuments: LangiumDocuments;\n    protected readonly documentBuilder: DocumentBuilder;\n    protected readonly fileSystemProvider: FileSystemProvider;\n    protected readonly mutex: WorkspaceLock;\n    protected readonly _ready = new Deferred<void>();\n    protected folders?: WorkspaceFolder[];\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.serviceRegistry = services.ServiceRegistry;\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.documentBuilder = services.workspace.DocumentBuilder;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n        this.mutex = services.workspace.WorkspaceLock;\n    }\n\n    get ready(): Promise<void> {\n        return this._ready.promise;\n    }\n\n    initialize(params: InitializeParams): void {\n        this.folders = params.workspaceFolders ?? undefined;\n    }\n\n    initialized(_params: InitializedParams): Promise<void> {\n        // Initialize the workspace even if there are no workspace folders\n        // We still want to load additional documents (language library or similar) during initialization\n        return this.mutex.write(token => this.initializeWorkspace(this.folders ?? [], token));\n    }\n\n    async initializeWorkspace(folders: WorkspaceFolder[], cancelToken = CancellationToken.None): Promise<void> {\n        const documents = await this.performStartup(folders);\n        // Only after creating all documents do we check whether we need to cancel the initialization\n        // The document builder will later pick up on all unprocessed documents\n        await interruptAndCheck(cancelToken);\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\n    }\n\n    /**\n     * Performs the uninterruptable startup sequence of the workspace manager.\n     * This methods loads all documents in the workspace and other documents and returns them.\n     */\n    protected async performStartup(folders: WorkspaceFolder[]): Promise<LangiumDocument[]> {\n        const fileExtensions = this.serviceRegistry.all.flatMap(e => e.LanguageMetaData.fileExtensions);\n        const documents: LangiumDocument[] = [];\n        const collector = (document: LangiumDocument) => {\n            documents.push(document);\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\n                this.langiumDocuments.addDocument(document);\n            }\n        };\n        // Even though we don't await the initialization of the workspace manager,\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\n        await this.loadAdditionalDocuments(folders, collector);\n        await Promise.all(\n            folders.map(wf => [wf, this.getRootFolder(wf)] as [WorkspaceFolder, URI])\n                .map(async entry => this.traverseFolder(...entry, fileExtensions, collector))\n        );\n        this._ready.resolve();\n        return documents;\n    }\n\n    /**\n     * Load all additional documents that shall be visible in the context of the given workspace\n     * folders and add them to the collector. This can be used to include built-in libraries of\n     * your language, which can be either loaded from provided files or constructed in memory.\n     */\n    protected loadAdditionalDocuments(_folders: WorkspaceFolder[], _collector: (document: LangiumDocument) => void): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Determine the root folder of the source documents in the given workspace folder.\n     * The default implementation returns the URI of the workspace folder, but you can override\n     * this to return a subfolder like `src` instead.\n     */\n    protected getRootFolder(workspaceFolder: WorkspaceFolder): URI {\n        return URI.parse(workspaceFolder.uri);\n    }\n\n    /**\n     * Traverse the file system folder identified by the given URI and its subfolders. All\n     * contained files that match the file extensions are added to the collector.\n     */\n    protected async traverseFolder(workspaceFolder: WorkspaceFolder, folderPath: URI, fileExtensions: string[], collector: (document: LangiumDocument) => void): Promise<void> {\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\n        await Promise.all(content.map(async entry => {\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\n                if (entry.isDirectory) {\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\n                } else if (entry.isFile) {\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\n                    collector(document);\n                }\n            }\n        }));\n    }\n\n    /**\n     * Determine whether the given folder entry shall be included while indexing the workspace.\n     */\n    protected includeEntry(_workspaceFolder: WorkspaceFolder, entry: FileSystemNode, fileExtensions: string[]): boolean {\n        const name = UriUtils.basename(entry.uri);\n        if (name.startsWith('.')) {\n            return false;\n        }\n        if (entry.isDirectory) {\n            return name !== 'node_modules' && name !== 'out';\n        } else if (entry.isFile) {\n            const extname = UriUtils.extname(entry.uri);\n            return fileExtensions.includes(extname);\n        }\n        return false;\n    }\n\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { ILexingError, IMultiModeLexerDefinition, IToken, TokenType, TokenTypeDictionary, TokenVocabulary } from 'chevrotain';\nimport type { LangiumCoreServices } from '../services.js';\nimport { Lexer as ChevrotainLexer } from 'chevrotain';\n\nexport interface LexerResult {\n    /**\n     * A list of all tokens that were lexed from the input.\n     *\n     * Note that Langium requires the optional properties\n     * `startLine`, `startColumn`, `endOffset`, `endLine` and `endColumn` to be set on each token.\n     */\n    tokens: IToken[];\n    /**\n     * Contains hidden tokens, usually comments.\n     */\n    hidden: IToken[];\n    errors: ILexingError[];\n}\n\nexport interface Lexer {\n    readonly definition: TokenTypeDictionary;\n    tokenize(text: string): LexerResult;\n}\n\nexport class DefaultLexer implements Lexer {\n\n    protected chevrotainLexer: ChevrotainLexer;\n    protected tokenTypes: TokenTypeDictionary;\n\n    constructor(services: LangiumCoreServices) {\n        const tokens = services.parser.TokenBuilder.buildTokens(services.Grammar, {\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\n        });\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\n        this.chevrotainLexer = new ChevrotainLexer(lexerTokens, {\n            positionTracking: 'full'\n        });\n    }\n\n    get definition(): TokenTypeDictionary {\n        return this.tokenTypes;\n    }\n\n    tokenize(text: string): LexerResult {\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\n        return {\n            tokens: chevrotainResult.tokens,\n            errors: chevrotainResult.errors,\n            hidden: chevrotainResult.groups.hidden ?? []\n        };\n    }\n\n    protected toTokenTypeDictionary(buildTokens: TokenVocabulary): TokenTypeDictionary {\n        if (isTokenTypeDictionary(buildTokens)) return buildTokens;\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\n        const res: TokenTypeDictionary = {};\n        tokens.forEach(token => res[token.name] = token);\n        return res;\n    }\n}\n\n/**\n * Returns a check whether the given TokenVocabulary is TokenType array\n */\nexport function isTokenTypeArray(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenType[] {\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || 'name' in tokenVocabulary[0]);\n}\n\n/**\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\n */\nexport function isIMultiModeLexerDefinition(tokenVocabulary: TokenVocabulary): tokenVocabulary is IMultiModeLexerDefinition {\n    return tokenVocabulary && 'modes' in tokenVocabulary && 'defaultMode' in tokenVocabulary;\n}\n\n/**\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\n */\nexport function isTokenTypeDictionary(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenTypeDictionary {\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { Position, Range } from 'vscode-languageserver-types';\nimport type { CstNode } from '../syntax-tree.js';\nimport { NEWLINE_REGEXP, escapeRegExp } from '../utils/regexp-utils.js';\nimport { URI } from '../utils/uri-utils.js';\n\nexport interface JSDocComment extends JSDocValue {\n    readonly elements: JSDocElement[]\n    getTag(name: string): JSDocTag | undefined\n    getTags(name: string): JSDocTag[]\n}\n\nexport type JSDocElement = JSDocParagraph | JSDocTag;\n\nexport type JSDocInline = JSDocTag | JSDocLine;\n\nexport interface JSDocValue {\n    /**\n     * Represents the range that this JSDoc element occupies.\n     * If the JSDoc was parsed from a `CstNode`, the range will represent the location in the source document.\n     */\n    readonly range: Range\n    /**\n     * Renders this JSDoc element to a plain text representation.\n     */\n    toString(): string\n    /**\n     * Renders this JSDoc element to a markdown representation.\n     *\n     * @param options Rendering options to customize the markdown result.\n     */\n    toMarkdown(options?: JSDocRenderOptions): string\n}\n\nexport interface JSDocParagraph extends JSDocValue {\n    readonly inlines: JSDocInline[]\n}\n\nexport interface JSDocLine extends JSDocValue {\n    readonly text: string\n}\n\nexport interface JSDocTag extends JSDocValue {\n    readonly name: string\n    readonly content: JSDocParagraph\n    readonly inline: boolean\n}\n\nexport interface JSDocParseOptions {\n    /**\n     * The start symbol of your comment format. Defaults to `/**`.\n     */\n    readonly start?: RegExp | string\n    /**\n     * The symbol that start a line of your comment format. Defaults to `*`.\n     */\n    readonly line?: RegExp | string\n    /**\n     * The end symbol of your comment format. Defaults to `*\\/`.\n     */\n    readonly end?: RegExp | string\n}\n\nexport interface JSDocRenderOptions {\n    /**\n     * Determines the style for rendering tags. Defaults to `italic`.\n     */\n    tag?: 'plain' | 'italic' | 'bold' | 'bold-italic'\n    /**\n     * Determines the default for rendering `@link` tags. Defaults to `plain`.\n     */\n    link?: 'code' | 'plain'\n    /**\n     * Custom tag rendering function.\n     * Return a markdown formatted tag or `undefined` to fall back to the default rendering.\n     */\n    renderTag?(tag: JSDocTag): string | undefined\n    /**\n     * Custom link rendering function. Accepts a link target and a display value for the link.\n     * Return a markdown formatted link with the format `[$display]($link)` or `undefined` if the link is not a valid target.\n     */\n    renderLink?(link: string, display: string): string | undefined\n}\n\n/**\n * Parses a JSDoc from a `CstNode` containing a comment.\n *\n * @param node A `CstNode` from a parsed Langium document.\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\n */\nexport function parseJSDoc(node: CstNode, options?: JSDocParseOptions): JSDocComment;\n/**\n * Parses a JSDoc from a string comment.\n *\n * @param content A string containing the source of the JSDoc comment.\n * @param start The start position the comment occupies in the source document.\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\n */\nexport function parseJSDoc(content: string, start?: Position, options?: JSDocParseOptions): JSDocComment;\nexport function parseJSDoc(node: CstNode | string, start?: Position | JSDocParseOptions, options?: JSDocParseOptions): JSDocComment {\n    let opts: JSDocParseOptions | undefined;\n    let position: Position | undefined;\n    if (typeof node === 'string') {\n        position = start as Position | undefined;\n        opts = options as JSDocParseOptions | undefined;\n    } else {\n        position = node.range.start;\n        opts = start as JSDocParseOptions | undefined;\n    }\n    if (!position) {\n        position = Position.create(0, 0);\n    }\n\n    const lines = getLines(node);\n    const normalizedOptions = normalizeOptions(opts);\n\n    const tokens = tokenize({\n        lines,\n        position,\n        options: normalizedOptions\n    });\n\n    return parseJSDocComment({\n        index: 0,\n        tokens,\n        position\n    });\n}\n\nexport function isJSDoc(node: CstNode | string, options?: JSDocParseOptions): boolean {\n    const normalizedOptions = normalizeOptions(options);\n    const lines = getLines(node);\n    if (lines.length === 0) {\n        return false;\n    }\n\n    const first = lines[0];\n    const last = lines[lines.length - 1];\n    const firstRegex = normalizedOptions.start;\n    const lastRegex = normalizedOptions.end;\n\n    return Boolean(firstRegex?.exec(first)) && Boolean(lastRegex?.exec(last));\n}\n\nfunction getLines(node: CstNode | string): string[] {\n    let content = '';\n    if (typeof node === 'string') {\n        content = node;\n    } else {\n        content = node.text;\n    }\n    const lines = content.split(NEWLINE_REGEXP);\n    return lines;\n}\n\n// Tokenization\n\ninterface JSDocToken {\n    type: 'text' | 'tag' | 'inline-tag' | 'break'\n    content: string\n    range: Range\n}\n\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\n\nfunction tokenize(context: TokenizationContext): JSDocToken[] {\n    const tokens: JSDocToken[] = [];\n    let currentLine = context.position.line;\n    let currentCharacter = context.position.character;\n    for (let i = 0; i < context.lines.length; i++) {\n        const first = i === 0;\n        const last = i === context.lines.length - 1;\n        let line = context.lines[i];\n        let index = 0;\n\n        if (first && context.options.start) {\n            const match = context.options.start?.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        } else {\n            const match = context.options.line?.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        }\n        if (last) {\n            const match = context.options.end?.exec(line);\n            if (match) {\n                line = line.substring(0, match.index);\n            }\n        }\n\n        line = line.substring(0, lastCharacter(line));\n        const whitespaceEnd = skipWhitespace(line, index);\n\n        if (whitespaceEnd >= line.length) {\n            // Only create a break token when we already have previous tokens\n            if (tokens.length > 0) {\n                const position = Position.create(currentLine, currentCharacter);\n                tokens.push({\n                    type: 'break',\n                    content: '',\n                    range: Range.create(position, position)\n                });\n            }\n        } else {\n            tagRegex.lastIndex = index;\n            const tagMatch = tagRegex.exec(line);\n            if (tagMatch) {\n                const fullMatch = tagMatch[0];\n                const value = tagMatch[1];\n                const start = Position.create(currentLine, currentCharacter + index);\n                const end = Position.create(currentLine, currentCharacter + index + fullMatch.length);\n                tokens.push({\n                    type: 'tag',\n                    content: value,\n                    range: Range.create(start, end)\n                });\n                index += fullMatch.length;\n                index = skipWhitespace(line, index);\n            }\n\n            if (index < line.length) {\n                const rest = line.substring(index);\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\n            }\n        }\n\n        currentLine++;\n        currentCharacter = 0;\n    }\n\n    // Remove last break token if there is one\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === 'break') {\n        return tokens.slice(0, -1);\n    }\n\n    return tokens;\n}\n\nfunction buildInlineTokens(tags: RegExpMatchArray[], line: string, lineIndex: number, characterIndex: number): JSDocToken[] {\n    const tokens: JSDocToken[] = [];\n\n    if (tags.length === 0) {\n        const start = Position.create(lineIndex, characterIndex);\n        const end = Position.create(lineIndex, characterIndex + line.length);\n        tokens.push({\n            type: 'text',\n            content: line,\n            range: Range.create(start, end)\n        });\n    } else {\n        let lastIndex = 0;\n        for (const match of tags) {\n            const matchIndex = match.index!;\n            const startContent = line.substring(lastIndex, matchIndex);\n            if (startContent.length > 0) {\n                tokens.push({\n                    type: 'text',\n                    content: line.substring(lastIndex, matchIndex),\n                    range: Range.create(\n                        Position.create(lineIndex, lastIndex + characterIndex),\n                        Position.create(lineIndex, matchIndex + characterIndex)\n                    )\n                });\n            }\n            let offset = startContent.length + 1;\n            const tagName = match[1];\n            tokens.push({\n                type: 'inline-tag',\n                content: tagName,\n                range: Range.create(\n                    Position.create(lineIndex, lastIndex + offset + characterIndex),\n                    Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex)\n                )\n            });\n            offset += tagName.length;\n            if (match.length === 4) {\n                offset += match[2].length;\n                const value = match[3];\n                tokens.push({\n                    type: 'text',\n                    content: value,\n                    range: Range.create(\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\n                        Position.create(lineIndex, lastIndex + offset + value.length + characterIndex)\n                    )\n                });\n            } else {\n                tokens.push({\n                    type: 'text',\n                    content: '',\n                    range: Range.create(\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\n                        Position.create(lineIndex, lastIndex + offset + characterIndex)\n                    )\n                });\n            }\n            lastIndex = matchIndex + match[0].length;\n        }\n        const endContent = line.substring(lastIndex);\n        if (endContent.length > 0) {\n            tokens.push({\n                type: 'text',\n                content: endContent,\n                range: Range.create(\n                    Position.create(lineIndex, lastIndex + characterIndex),\n                    Position.create(lineIndex, lastIndex + characterIndex + endContent.length)\n                )\n            });\n        }\n    }\n\n    return tokens;\n}\n\nconst nonWhitespaceRegex = /\\S/;\nconst whitespaceEndRegex = /\\s*$/;\n\nfunction skipWhitespace(line: string, index: number): number {\n    const match = line.substring(index).match(nonWhitespaceRegex);\n    if (match) {\n        return index + match.index!;\n    } else {\n        return line.length;\n    }\n}\n\nfunction lastCharacter(line: string): number | undefined {\n    const match = line.match(whitespaceEndRegex);\n    if (match && typeof match.index === 'number') {\n        return match.index;\n    }\n    return undefined;\n}\n\n// Parsing\n\nfunction parseJSDocComment(context: ParseContext): JSDocComment {\n    const startPosition: Position = Position.create(context.position.line, context.position.character);\n    if (context.tokens.length === 0) {\n        return new JSDocCommentImpl([], Range.create(startPosition, startPosition));\n    }\n    const elements: JSDocElement[] = [];\n    while (context.index < context.tokens.length) {\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\n        if (element) {\n            elements.push(element);\n        }\n    }\n    const start = elements[0]?.range.start ?? startPosition;\n    const end = elements[elements.length - 1]?.range.end ?? startPosition;\n    return new JSDocCommentImpl(elements, Range.create(start, end));\n}\n\nfunction parseJSDocElement(context: ParseContext, last?: JSDocElement): JSDocElement | undefined {\n    const next = context.tokens[context.index];\n    if (next.type === 'tag') {\n        return parseJSDocTag(context, false);\n    } else if (next.type === 'text' || next.type === 'inline-tag') {\n        return parseJSDocText(context);\n    } else {\n        appendEmptyLine(next, last);\n        context.index++;\n        return undefined;\n    }\n}\n\nfunction appendEmptyLine(token: JSDocToken, element?: JSDocElement): void {\n    if (element) {\n        const line = new JSDocLineImpl('', token.range);\n        if ('inlines' in element) {\n            element.inlines.push(line);\n        } else {\n            element.content.inlines.push(line);\n        }\n    }\n}\n\nfunction parseJSDocText(context: ParseContext): JSDocParagraph {\n    let token = context.tokens[context.index];\n    const firstToken = token;\n    let lastToken = token;\n    const lines: JSDocInline[] = [];\n    while (token && token.type !== 'break' && token.type !== 'tag') {\n        lines.push(parseJSDocInline(context));\n        lastToken = token;\n        token = context.tokens[context.index];\n    }\n    return new JSDocTextImpl(lines, Range.create(firstToken.range.start, lastToken.range.end));\n}\n\nfunction parseJSDocInline(context: ParseContext): JSDocInline {\n    const token = context.tokens[context.index];\n    if (token.type === 'inline-tag') {\n        return parseJSDocTag(context, true);\n    } else {\n        return parseJSDocLine(context);\n    }\n}\n\nfunction parseJSDocTag(context: ParseContext, inline: boolean): JSDocTag {\n    const tagToken = context.tokens[context.index++];\n    const name = tagToken.content.substring(1);\n    const nextToken = context.tokens[context.index];\n    if (nextToken?.type === 'text') {\n        if (inline) {\n            const docLine = parseJSDocLine(context);\n            return new JSDocTagImpl(\n                name,\n                new JSDocTextImpl([docLine], docLine.range),\n                inline,\n                Range.create(tagToken.range.start, docLine.range.end)\n            );\n        } else {\n            const textDoc = parseJSDocText(context);\n            return new JSDocTagImpl(\n                name,\n                textDoc,\n                inline,\n                Range.create(tagToken.range.start, textDoc.range.end)\n            );\n        }\n    } else {\n        const range = tagToken.range;\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\n    }\n}\n\nfunction parseJSDocLine(context: ParseContext): JSDocLine {\n    const token = context.tokens[context.index++];\n    return new JSDocLineImpl(token.content, token.range);\n}\n\ninterface NormalizedOptions {\n    start?: RegExp\n    end?: RegExp\n    line?: RegExp\n}\n\ninterface TokenizationContext {\n    position: Position\n    lines: string[]\n    options: NormalizedOptions\n}\n\ninterface ParseContext {\n    position: Position\n    tokens: JSDocToken[]\n    index: number\n}\n\nfunction normalizeOptions(options?: JSDocParseOptions): NormalizedOptions {\n    if (!options) {\n        return normalizeOptions({\n            start: '/**',\n            end: '*/',\n            line: '*'\n        });\n    }\n    const { start, end, line } = options;\n    return {\n        start: normalizeOption(start, true),\n        end: normalizeOption(end, false),\n        line: normalizeOption(line, true)\n    };\n}\n\nfunction normalizeOption(option: RegExp | string | undefined, start: boolean): RegExp | undefined {\n    if (typeof option === 'string' || typeof option === 'object') {\n        const escaped = typeof option === 'string' ? escapeRegExp(option) : option.source;\n        if (start) {\n            return new RegExp(`^\\\\s*${escaped}`);\n        } else {\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\n        }\n    } else {\n        return option;\n    }\n}\n\nclass JSDocCommentImpl implements JSDocComment {\n\n    readonly elements: JSDocElement[];\n    readonly range: Range;\n\n    constructor(elements: JSDocElement[], range: Range) {\n        this.elements = elements;\n        this.range = range;\n    }\n\n    getTag(name: string): JSDocTag | undefined {\n        return this.getAllTags().find(e => e.name === name);\n    }\n\n    getTags(name: string): JSDocTag[] {\n        return this.getAllTags().filter(e => e.name === name);\n    }\n\n    private getAllTags(): JSDocTag[] {\n        return this.elements.filter((e): e is JSDocTag => 'name' in e);\n    }\n\n    toString(): string {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toString();\n            } else {\n                const text = element.toString();\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n\n    toMarkdown(options?: JSDocRenderOptions): string {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toMarkdown(options);\n            } else {\n                const text = element.toMarkdown(options);\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n}\n\nclass JSDocTagImpl implements JSDocTag {\n    name: string;\n    content: JSDocParagraph;\n    range: Range;\n    inline: boolean;\n\n    constructor(name: string, content: JSDocParagraph, inline: boolean, range: Range) {\n        this.name = name;\n        this.content = content;\n        this.inline = inline;\n        this.range = range;\n    }\n\n    toString(): string {\n        let text = `@${this.name}`;\n        const content = this.content.toString();\n        if (this.content.inlines.length === 1) {\n            text = `${text} ${content}`;\n        } else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        } else {\n            return text;\n        }\n    }\n\n    toMarkdown(options?: JSDocRenderOptions): string {\n        return options?.renderTag?.(this) ?? this.toMarkdownDefault(options);\n    }\n\n    private toMarkdownDefault(options?: JSDocRenderOptions): string {\n        const content = this.content.toMarkdown(options);\n        if (this.inline) {\n            const rendered = renderInlineTag(this.name, content, options ?? {});\n            if (typeof rendered === 'string') {\n                return rendered;\n            }\n        }\n        let marker = '';\n        if (options?.tag === 'italic' || options?.tag === undefined) {\n            marker = '*';\n        } else if (options?.tag === 'bold') {\n            marker = '**';\n        } else if (options?.tag === 'bold-italic') {\n            marker = '***';\n        }\n        let text = `${marker}@${this.name}${marker}`;\n        if (this.content.inlines.length === 1) {\n            text = `${text} — ${content}`;\n        } else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        } else {\n            return text;\n        }\n    }\n}\n\nfunction renderInlineTag(tag: string, content: string, options: JSDocRenderOptions): string | undefined {\n    if (tag === 'linkplain' || tag === 'linkcode' || tag === 'link') {\n        const index = content.indexOf(' ');\n        let display = content;\n        if (index > 0) {\n            const displayStart = skipWhitespace(content, index);\n            display = content.substring(displayStart);\n            content = content.substring(0, index);\n        }\n        if (tag === 'linkcode' || (tag === 'link' && options.link === 'code')) {\n            // Surround the display value in a markdown inline code block\n            display = `\\`${display}\\``;\n        }\n        const renderedLink = options.renderLink?.(content, display) ?? renderLinkDefault(content, display);\n        return renderedLink;\n    }\n    return undefined;\n}\n\nfunction renderLinkDefault(content: string, display: string): string {\n    try {\n        URI.parse(content, true);\n        return `[${display}](${content})`;\n    } catch {\n        return content;\n    }\n}\n\nclass JSDocTextImpl implements JSDocParagraph {\n    inlines: JSDocInline[];\n    range: Range;\n\n    constructor(lines: JSDocInline[], range: Range) {\n        this.inlines = lines;\n        this.range = range;\n    }\n\n    toString(): string {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toString();\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n\n    toMarkdown(options?: JSDocRenderOptions): string {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toMarkdown(options);\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n}\n\nclass JSDocLineImpl implements JSDocLine {\n    text: string;\n    range: Range;\n\n    constructor(text: string, range: Range) {\n        this.text = text;\n        this.range = range;\n    }\n\n    toString(): string {\n        return this.text;\n    }\n    toMarkdown(): string {\n        return this.text;\n    }\n\n}\n\nfunction fillNewlines(text: string): string {\n    if (text.endsWith('\\n')) {\n        return '\\n';\n    } else {\n        return '\\n\\n';\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\nimport type { IndexManager } from '../workspace/index-manager.js';\nimport type { CommentProvider } from './comment-provider.js';\nimport type { JSDocTag } from './jsdoc.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { isJSDoc, parseJSDoc } from './jsdoc.js';\n\n/**\n * Provides documentation for AST nodes.\n */\nexport interface DocumentationProvider {\n    /**\n     * Returns a markdown documentation string for the specified AST node.\n     *\n     * The default implementation `JSDocDocumentationProvider` will inspect the comment associated with the specified node.\n     */\n    getDocumentation(node: AstNode): string | undefined;\n}\n\nexport class JSDocDocumentationProvider implements DocumentationProvider {\n\n    protected readonly indexManager: IndexManager;\n    protected readonly commentProvider: CommentProvider;\n\n    constructor(services: LangiumCoreServices) {\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n\n    getDocumentation(node: AstNode): string | undefined {\n        const comment = this.commentProvider.getComment(node);\n        if (comment && isJSDoc(comment)) {\n            const parsedJSDoc = parseJSDoc(comment);\n            return parsedJSDoc.toMarkdown({\n                renderLink: (link, display) => {\n                    return this.documentationLinkRenderer(node, link, display);\n                },\n                renderTag: (tag) => {\n                    return this.documentationTagRenderer(node, tag);\n                }\n            });\n        }\n        return undefined;\n    }\n\n    protected documentationLinkRenderer(node: AstNode, name: string, display: string): string | undefined {\n        const description = this.findNameInPrecomputedScopes(node, name) ?? this.findNameInGlobalScope(node, name);\n        if (description && description.nameSegment) {\n            const line = description.nameSegment.range.start.line + 1;\n            const character = description.nameSegment.range.start.character + 1;\n            const uri = description.documentUri.with({ fragment: `L${line},${character}` });\n            return `[${display}](${uri.toString()})`;\n        } else {\n            return undefined;\n        }\n    }\n\n    protected documentationTagRenderer(_node: AstNode, _tag: JSDocTag): string | undefined {\n        // Fall back to the default tag rendering\n        return undefined;\n    }\n\n    protected findNameInPrecomputedScopes(node: AstNode, name: string): AstNodeDescription | undefined {\n        const document = getDocument(node);\n        const precomputed = document.precomputedScopes;\n        if (!precomputed) {\n            return undefined;\n        }\n        let currentNode: AstNode | undefined = node;\n        do {\n            const allDescriptions = precomputed.get(currentNode);\n            const description = allDescriptions.find(e => e.name === name);\n            if (description) {\n                return description;\n            }\n            currentNode = currentNode.$container;\n        } while (currentNode);\n\n        return undefined;\n    }\n\n    protected findNameInGlobalScope(node: AstNode, name: string): AstNodeDescription | undefined {\n        const description = this.indexManager.allElements().find(e => e.name === name);\n        return description;\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { GrammarConfig } from '../languages/grammar-config.js';\nimport { isAstNodeWithComment } from '../serializer/json-serializer.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode } from '../syntax-tree.js';\nimport { findCommentNode } from '../utils/cst-utils.js';\n\n/**\n * Provides comments for AST nodes.\n */\nexport interface CommentProvider {\n    /**\n     * Returns the comment associated with the specified AST node.\n     * @param node The AST node to get the comment for.\n     * @returns The comment associated with the specified AST node or `undefined` if there is no comment.\n     */\n    getComment(node: AstNode): string | undefined;\n}\n\nexport class DefaultCommentProvider implements CommentProvider {\n    protected readonly grammarConfig: () => GrammarConfig;\n    constructor(services: LangiumCoreServices) {\n        this.grammarConfig = () => services.parser.GrammarConfig;\n    }\n    getComment(node: AstNode): string | undefined {\n        if(isAstNodeWithComment(node)) {\n            return node.$comment;\n        }\n        return findCommentNode(node.$cstNode, this.grammarConfig().multilineCommentRules)?.text;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * A `Module<I>` is a description of possibly grouped service factories.\n *\n * Given a type I = { group: { service: A } },\n * Module<I> := { group: { service: (injector: I) => A } }\n *\n * Making `I` available during the creation of `I` allows us to create cyclic\n * dependencies.\n */\nexport type Module<I, T = I> = {\n    [K in keyof T]: Module<I, T[K]> | ((injector: I) => T[K])\n}\n\nexport namespace Module {\n    export const merge = <M1, M2, R extends M1 & M2>(m1: Module<R, M1>, m2: Module<R, M2>) => (_merge(_merge({}, m1), m2) as Module<R, M1 & M2>);\n}\n\n/**\n * Given a set of modules, the inject function returns a lazily evaluated injector\n * that injects dependencies into the requested service when it is requested the\n * first time. Subsequent requests will return the same service.\n *\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\n * by injecting a provider `() => T` instead of a `T`.\n *\n * Please note that the arguments may be objects or arrays. However, the result will\n * be an object. Using it with for..of will have no effect.\n *\n * @param module1 first Module\n * @param module2 (optional) second Module\n * @param module3 (optional) third Module\n * @param module4 (optional) fourth Module\n * @param module5 (optional) fifth Module\n * @param module6 (optional) sixth Module\n * @param module7 (optional) seventh Module\n * @param module8 (optional) eighth Module\n * @param module9 (optional) ninth Module\n * @returns a new object of type I\n */\nexport function inject<I1, I2, I3, I4, I5, I6, I7, I8, I9, I extends I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9>(\n    module1: Module<I, I1>, module2?: Module<I, I2>, module3?: Module<I, I3>, module4?: Module<I, I4>, module5?: Module<I, I5>, module6?: Module<I, I6>, module7?: Module<I, I7>, module8?: Module<I, I8>, module9?: Module<I, I9>\n): I {\n    const module = [module1, module2, module3, module4, module5, module6, module7, module8, module9].reduce(_merge, {}) as Module<I>;\n    return _inject(module);\n}\n\nconst isProxy = Symbol('isProxy');\n\n/**\n * Eagerly load all services in the given dependency injection container. This is sometimes\n * necessary because services can register event listeners in their constructors.\n */\nexport function eagerLoad<T>(item: T): T {\n    if (item && (item as any)[isProxy]) {\n        for (const value of Object.values(item)) {\n            eagerLoad(value);\n        }\n    }\n    return item;\n}\n\n/**\n * Helper function that returns an injector by creating a proxy.\n * Invariant: injector is of type I. If injector is undefined, then T = I.\n */\nfunction _inject<I, T>(module: Module<I, T>, injector?: any): T {\n    const proxy: any = new Proxy({} as any, {\n        deleteProperty: () => false,\n        get: (obj, prop) => _resolve(obj, prop, module, injector || proxy),\n        getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)), // used by for..in\n        has: (_, prop) => prop in module, // used by ..in..\n        ownKeys: () => [...Reflect.ownKeys(module), isProxy] // used by for..in\n    });\n    proxy[isProxy] = true;\n    return proxy;\n}\n\n/**\n * Internally used to tag a requested dependency, directly before calling the factory.\n * This allows us to find cycles during instance creation.\n */\nconst __requested__ = Symbol();\n\n/**\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\n * the module description. The result of service factories is cached. Groups are\n * recursively proxied.\n *\n * @param obj an object holding all group proxies and services\n * @param prop the key of a value within obj\n * @param module an object containing groups and service factories\n * @param injector the first level proxy that provides access to all values\n * @returns the requested value `obj[prop]`\n * @throws Error if a dependency cycle is detected\n */\nfunction _resolve<I, T>(obj: any, prop: string | symbol | number, module: Module<I, T>, injector: I): T[keyof T] | undefined {\n    if (prop in obj) {\n        if (obj[prop] instanceof Error) {\n            throw new Error('Construction failure. Please make sure that your dependencies are constructable.', {cause: obj[prop]});\n        }\n        if (obj[prop] === __requested__) {\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. See https://langium.org/docs/configuration-services/#resolving-cyclic-dependencies');\n        }\n        return obj[prop];\n    } else if (prop in module) {\n        const value: Module<I, T[keyof T]> | ((injector: I) => T[keyof T]) = module[prop as keyof T];\n        obj[prop] = __requested__;\n        try {\n            obj[prop] = (typeof value === 'function') ? value(injector) : _inject(value, injector);\n        } catch (error) {\n            obj[prop] = error instanceof Error ? error : undefined;\n            throw error;\n        }\n        return obj[prop];\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Performs a deep-merge of two modules by writing source entries into the target module.\n *\n * @param target the module which is written\n * @param source the module which is read\n * @returns the target module\n */\nfunction _merge(target: Module<any>, source?: Module<any>): Module<unknown> {\n    if (source) {\n        for (const [key, value2] of Object.entries(source)) {\n            if (value2 !== undefined) {\n                const value1 = target[key];\n                if (value1 !== null && value2 !== null && typeof value1 === 'object' && typeof value2 === 'object') {\n                    target[key] = _merge(value1, value2);\n                } else {\n                    target[key] = value2;\n                }\n            }\n        }\n    }\n    return target;\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { CancellationToken } from '../utils/cancellation.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode } from '../syntax-tree.js';\nimport type { LangiumParser, ParseResult } from './langium-parser.js';\nimport type { Hydrator } from '../serializer/hydrator.js';\nimport type { Event } from '../utils/event.js';\nimport { Deferred, OperationCancelled } from '../utils/promise-utils.js';\nimport { Emitter } from '../utils/event.js';\n\n/**\n * Async parser that allows to cancel the current parsing process.\n * The sync parser implementation is blocking the event loop, which can become quite problematic for large files.\n *\n * Note that the default implementation is not actually async. It just wraps the sync parser in a promise.\n * A real implementation would create worker threads or web workers to offload the parsing work.\n */\nexport interface AsyncParser {\n    parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>>;\n}\n\n/**\n * Default implementation of the async parser. This implementation only wraps the sync parser in a promise.\n *\n * A real implementation would create worker threads or web workers to offload the parsing work.\n */\nexport class DefaultAsyncParser implements AsyncParser {\n\n    protected readonly syncParser: LangiumParser;\n\n    constructor(services: LangiumCoreServices) {\n        this.syncParser = services.parser.LangiumParser;\n    }\n\n    parse<T extends AstNode>(text: string): Promise<ParseResult<T>> {\n        return Promise.resolve(this.syncParser.parse<T>(text));\n    }\n}\n\nexport abstract class AbstractThreadedAsyncParser implements AsyncParser {\n\n    /**\n     * The thread count determines how many threads are used to parse files in parallel.\n     * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\n     */\n    protected threadCount = 8;\n    /**\n     * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\n     * The default value is 200(ms).\n     */\n    protected terminationDelay = 200;\n    protected workerPool: ParserWorker[] = [];\n    protected queue: Array<Deferred<ParserWorker>> = [];\n\n    protected readonly hydrator: Hydrator;\n\n    constructor(services: LangiumCoreServices) {\n        this.hydrator = services.serializer.Hydrator;\n    }\n\n    protected initializeWorkers(): void {\n        while (this.workerPool.length < this.threadCount) {\n            const worker = this.createWorker();\n            worker.onReady(() => {\n                if (this.queue.length > 0) {\n                    const deferred = this.queue.shift();\n                    if (deferred) {\n                        worker.lock();\n                        deferred.resolve(worker);\n                    }\n                }\n            });\n            this.workerPool.push(worker);\n        }\n    }\n\n    async parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>> {\n        const worker = await this.acquireParserWorker(cancelToken);\n        const deferred = new Deferred<ParseResult<T>>();\n        let timeout: NodeJS.Timeout | undefined;\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\n        const cancellation = cancelToken.onCancellationRequested(() => {\n            timeout = setTimeout(() => {\n                this.terminateWorker(worker);\n            }, this.terminationDelay);\n        });\n        worker.parse(text).then(result => {\n            const hydrated = this.hydrator.hydrate<T>(result);\n            deferred.resolve(hydrated);\n        }).catch(err => {\n            deferred.reject(err);\n        }).finally(() => {\n            cancellation.dispose();\n            clearTimeout(timeout);\n        });\n        return deferred.promise;\n    }\n\n    protected terminateWorker(worker: ParserWorker): void {\n        worker.terminate();\n        const index = this.workerPool.indexOf(worker);\n        if (index >= 0) {\n            this.workerPool.splice(index, 1);\n        }\n    }\n\n    protected async acquireParserWorker(cancelToken: CancellationToken): Promise<ParserWorker> {\n        this.initializeWorkers();\n        for (const worker of this.workerPool) {\n            if (worker.ready) {\n                worker.lock();\n                return worker;\n            }\n        }\n        const deferred = new Deferred<ParserWorker>();\n        cancelToken.onCancellationRequested(() => {\n            const index = this.queue.indexOf(deferred);\n            if (index >= 0) {\n                this.queue.splice(index, 1);\n            }\n            deferred.reject(OperationCancelled);\n        });\n        this.queue.push(deferred);\n        return deferred.promise;\n    }\n\n    protected abstract createWorker(): ParserWorker;\n}\n\nexport type WorkerMessagePost = (message: unknown) => void;\nexport type WorkerMessageCallback = (cb: (message: unknown) => void) => void;\n\nexport class ParserWorker {\n\n    protected readonly sendMessage: WorkerMessagePost;\n    protected readonly _terminate: () => void;\n    protected readonly onReadyEmitter = new Emitter<void>();\n\n    protected deferred = new Deferred<ParseResult>();\n    protected _ready = true;\n    protected _parsing = false;\n\n    get ready(): boolean {\n        return this._ready;\n    }\n\n    get onReady(): Event<void> {\n        return this.onReadyEmitter.event;\n    }\n\n    constructor(sendMessage: WorkerMessagePost, onMessage: WorkerMessageCallback, onError: WorkerMessageCallback, terminate: () => void) {\n        this.sendMessage = sendMessage;\n        this._terminate = terminate;\n        onMessage(result => {\n            const parseResult = result as ParseResult;\n            this.deferred.resolve(parseResult);\n            this.unlock();\n        });\n        onError(error => {\n            this.deferred.reject(error);\n            this.unlock();\n        });\n    }\n\n    terminate(): void {\n        this.deferred.reject(OperationCancelled);\n        this._terminate();\n    }\n\n    lock(): void {\n        this._ready = false;\n    }\n\n    unlock(): void {\n        this._parsing = false;\n        this._ready = true;\n        this.onReadyEmitter.fire();\n    }\n\n    parse(text: string): Promise<ParseResult> {\n        if (this._parsing) {\n            throw new Error('Parser worker is busy');\n        }\n        this._parsing = true;\n        this.deferred = new Deferred();\n        this.sendMessage(text);\n        return this.deferred.promise;\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { CancellationToken, CancellationTokenSource } from '../utils/cancellation.js';\nimport { Deferred, isOperationCancelled, type MaybePromise } from '../utils/promise-utils.js';\n\n/**\n * Utility service to execute mutually exclusive actions.\n */\nexport interface WorkspaceLock {\n    /**\n     * Performs a single async action, like initializing the workspace or processing document changes.\n     * Only one action will be executed at a time.\n     *\n     * When another action is queued up, the token provided for the action will be cancelled.\n     * Assuming the action makes use of this token, the next action only has to wait for the current action to finish cancellation.\n     */\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void>;\n\n    /**\n     * Performs a single action, like computing completion results or providing workspace symbols.\n     * Read actions will only be executed after all write actions have finished. They will be executed in parallel if possible.\n     *\n     * If a write action is currently running, the read action will be queued up and executed afterwards.\n     * If a new write action is queued up while a read action is waiting, the write action will receive priority and will be handled before the read action.\n     *\n     * Note that read actions are not allowed to modify anything in the workspace. Please use {@link write} instead.\n     */\n    read<T>(action: () => MaybePromise<T>): Promise<T>;\n\n    /**\n     * Cancels the last queued write action. All previous write actions already have been cancelled.\n     */\n    cancelWrite(): void;\n}\n\ntype LockAction<T = void> = (token: CancellationToken) => MaybePromise<T>;\n\ninterface LockEntry {\n    action: LockAction<unknown>;\n    deferred: Deferred<unknown>;\n    cancellationToken: CancellationToken;\n}\n\nexport class DefaultWorkspaceLock implements WorkspaceLock {\n\n    private previousTokenSource = new CancellationTokenSource();\n    private writeQueue: LockEntry[] = [];\n    private readQueue: LockEntry[] = [];\n    private done = true;\n\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void> {\n        this.cancelWrite();\n        const tokenSource = new CancellationTokenSource();\n        this.previousTokenSource = tokenSource;\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\n    }\n\n    read<T>(action: () => MaybePromise<T>): Promise<T> {\n        return this.enqueue(this.readQueue, action);\n    }\n\n    private enqueue<T = void>(queue: LockEntry[], action: LockAction<T>, cancellationToken?: CancellationToken): Promise<T> {\n        const deferred = new Deferred<unknown>();\n        const entry: LockEntry = {\n            action,\n            deferred,\n            cancellationToken: cancellationToken ?? CancellationToken.None\n        };\n        queue.push(entry);\n        this.performNextOperation();\n        return deferred.promise as Promise<T>;\n    }\n\n    private async performNextOperation(): Promise<void> {\n        if (!this.done) {\n            return;\n        }\n        const entries: LockEntry[] = [];\n        if (this.writeQueue.length > 0) {\n            // Just perform the next write action\n            entries.push(this.writeQueue.shift()!);\n        } else if (this.readQueue.length > 0) {\n            // Empty the read queue and perform all actions in parallel\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\n        } else {\n            return;\n        }\n        this.done = false;\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken }) => {\n            try {\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\n                const result = await Promise.resolve().then(() => action(cancellationToken));\n                deferred.resolve(result);\n            } catch (err) {\n                if (isOperationCancelled(err)) {\n                    // If the operation was cancelled, we don't want to reject the promise\n                    deferred.resolve(undefined);\n                } else {\n                    deferred.reject(err);\n                }\n            }\n        }));\n        this.done = true;\n        this.performNextOperation();\n    }\n\n    cancelWrite(): void {\n        this.previousTokenSource.cancel();\n    }\n}\n","/******************************************************************************\n * Copyright 2024 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { TokenType } from 'chevrotain';\nimport { CompositeCstNodeImpl, LeafCstNodeImpl, RootCstNodeImpl } from '../parser/cst-node-builder.js';\nimport { isAbstractElement, type AbstractElement, type Grammar } from '../languages/generated/ast.js';\nimport type { Linker } from '../references/linker.js';\nimport type { Lexer } from '../parser/lexer.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { ParseResult } from '../parser/langium-parser.js';\nimport type { Reference, AstNode, CstNode, LeafCstNode, GenericAstNode, Mutable, RootCstNode } from '../syntax-tree.js';\nimport { isRootCstNode, isCompositeCstNode, isLeafCstNode, isAstNode, isReference } from '../syntax-tree.js';\nimport { streamAst } from '../utils/ast-utils.js';\nimport { BiMap } from '../utils/collections.js';\nimport { streamCst } from '../utils/cst-utils.js';\n\n/**\n * The hydrator service is responsible for allowing AST parse results to be sent across worker threads.\n */\nexport interface Hydrator {\n    /**\n     * Converts a parse result to a plain object. The resulting object can be sent across worker threads.\n     */\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object>;\n    /**\n     * Converts a plain object to a parse result. The included AST node can then be used in the main thread.\n     * Calling this method on objects that have not been dehydrated first will result in undefined behavior.\n     */\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T>;\n}\n\nexport interface DehydrateContext {\n    astNodes: Map<AstNode, any>;\n    cstNodes: Map<CstNode, any>;\n}\n\nexport interface HydrateContext {\n    astNodes: Map<any, AstNode>;\n    cstNodes: Map<any, CstNode>;\n}\n\nexport class DefaultHydrator implements Hydrator {\n\n    protected readonly grammar: Grammar;\n    protected readonly lexer: Lexer;\n    protected readonly linker: Linker;\n\n    protected readonly grammarElementIdMap = new BiMap<AbstractElement, number>();\n    protected readonly tokenTypeIdMap = new BiMap<number, TokenType>();\n\n    constructor(services: LangiumCoreServices) {\n        this.grammar = services.Grammar;\n        this.lexer = services.parser.Lexer;\n        this.linker = services.references.Linker;\n    }\n\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object> {\n        return {\n            // We need to create shallow copies of the errors\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\n            lexerErrors: result.lexerErrors.map(e => ({ ...e })),\n            parserErrors: result.parserErrors.map(e => ({ ...e })),\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\n        };\n    }\n\n    protected createDehyrationContext(node: AstNode): DehydrateContext {\n        const astNodes = new Map<AstNode, any>();\n        const cstNodes = new Map<CstNode, any>();\n        for (const astNode of streamAst(node)) {\n            astNodes.set(astNode, {});\n        }\n        if (node.$cstNode) {\n            for (const cstNode of streamCst(node.$cstNode)) {\n                cstNodes.set(cstNode, {});\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n\n    protected dehydrateAstNode(node: AstNode, context: DehydrateContext): object {\n        const obj = context.astNodes.get(node) as Record<string, any>;\n        obj.$type = node.$type;\n        obj.$containerIndex = node.$containerIndex;\n        obj.$containerProperty = node.$containerProperty;\n        if (node.$cstNode !== undefined) {\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr: any[] = [];\n                obj[name] = arr;\n                for (const item of value) {\n                    if (isAstNode(item)) {\n                        arr.push(this.dehydrateAstNode(item, context));\n                    } else if (isReference(item)) {\n                        arr.push(this.dehydrateReference(item, context));\n                    } else {\n                        arr.push(item);\n                    }\n                }\n            } else if (isAstNode(value)) {\n                obj[name] = this.dehydrateAstNode(value, context);\n            } else if (isReference(value)) {\n                obj[name] = this.dehydrateReference(value, context);\n            } else if (value !== undefined) {\n                obj[name] = value;\n            }\n        }\n        return obj;\n    }\n\n    protected dehydrateReference(reference: Reference, context: DehydrateContext): any {\n        const obj: Record<string, unknown> = {};\n        obj.$refText = reference.$refText;\n        if (reference.$refNode) {\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\n        }\n        return obj;\n    }\n\n    protected dehydrateCstNode(node: CstNode, context: DehydrateContext): any {\n        const cstNode = context.cstNodes.get(node) as Record<string, any>;\n        if (isRootCstNode(node)) {\n            cstNode.fullText = node.fullText;\n        } else {\n            // Note: This returns undefined for hidden nodes (i.e. comments)\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\n        }\n        cstNode.hidden = node.hidden;\n        cstNode.astNode = context.astNodes.get(node.astNode);\n        if (isCompositeCstNode(node)) {\n            cstNode.content = node.content.map(child => this.dehydrateCstNode(child, context));\n        } else if (isLeafCstNode(node)) {\n            cstNode.tokenType = node.tokenType.name;\n            cstNode.offset = node.offset;\n            cstNode.length = node.length;\n            cstNode.startLine = node.range.start.line;\n            cstNode.startColumn = node.range.start.character;\n            cstNode.endLine = node.range.end.line;\n            cstNode.endColumn = node.range.end.character;\n        }\n        return cstNode;\n    }\n\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T> {\n        const node = result.value;\n        const context = this.createHydrationContext(node);\n        if ('$cstNode' in node) {\n            this.hydrateCstNode(node.$cstNode, context);\n        }\n        return {\n            lexerErrors: result.lexerErrors,\n            parserErrors: result.parserErrors,\n            value: this.hydrateAstNode(node, context) as T\n        };\n    }\n\n    protected createHydrationContext(node: any): HydrateContext {\n        const astNodes = new Map<any, AstNode>();\n        const cstNodes = new Map<any, CstNode>();\n        for (const astNode of streamAst(node)) {\n            astNodes.set(astNode, {} as AstNode);\n        }\n        let root: RootCstNode;\n        if (node.$cstNode) {\n            for (const cstNode of streamCst(node.$cstNode)) {\n                let cst: Mutable<CstNode> | undefined;\n                if ('fullText' in cstNode) {\n                    cst = new RootCstNodeImpl(cstNode.fullText as string);\n                    root = cst as RootCstNode;\n                } else if ('content' in cstNode) {\n                    cst = new CompositeCstNodeImpl();\n                } else if ('tokenType' in cstNode) {\n                    cst = this.hydrateCstLeafNode(cstNode);\n                }\n                if (cst) {\n                    cstNodes.set(cstNode, cst);\n                    cst.root = root!;\n                }\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n\n    protected hydrateAstNode(node: any, context: HydrateContext): AstNode {\n        const astNode = context.astNodes.get(node) as Mutable<GenericAstNode>;\n        astNode.$type = node.$type;\n        astNode.$containerIndex = node.$containerIndex;\n        astNode.$containerProperty = node.$containerProperty;\n        if (node.$cstNode) {\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr: unknown[] = [];\n                astNode[name] = arr;\n                for (const item of value) {\n                    if (isAstNode(item)) {\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\n                    } else if (isReference(item)) {\n                        arr.push(this.hydrateReference(item, astNode, name, context));\n                    } else {\n                        arr.push(item);\n                    }\n                }\n            } else if (isAstNode(value)) {\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\n            } else if (isReference(value)) {\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\n            } else if (value !== undefined) {\n                astNode[name] = value;\n            }\n        }\n        return astNode;\n    }\n\n    protected setParent(node: any, parent: any): any {\n        node.$container = parent as AstNode;\n        return node;\n    }\n\n    protected hydrateReference(reference: any, node: AstNode, name: string, context: HydrateContext): Reference {\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode)!, reference.$refText);\n    }\n\n    protected hydrateCstNode(cstNode: any, context: HydrateContext, num = 0): CstNode {\n        const cstNodeObj = context.cstNodes.get(cstNode) as Mutable<CstNode>;\n        if (typeof cstNode.grammarSource === 'number') {\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\n        }\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode)!;\n        if (isCompositeCstNode(cstNodeObj)) {\n            for (const child of cstNode.content) {\n                const hydrated = this.hydrateCstNode(child, context, num++);\n                cstNodeObj.content.push(hydrated);\n            }\n        }\n        return cstNodeObj;\n    }\n\n    protected hydrateCstLeafNode(cstNode: any): LeafCstNode {\n        const tokenType = this.getTokenType(cstNode.tokenType);\n        const offset = cstNode.offset;\n        const length = cstNode.length;\n        const startLine = cstNode.startLine;\n        const startColumn = cstNode.startColumn;\n        const endLine = cstNode.endLine;\n        const endColumn = cstNode.endColumn;\n        const hidden = cstNode.hidden;\n        const node = new LeafCstNodeImpl(\n            offset,\n            length,\n            {\n                start: {\n                    line: startLine,\n                    character: startColumn\n                },\n                end: {\n                    line: endLine,\n                    character: endColumn\n                }\n            },\n            tokenType,\n            hidden\n        );\n        return node;\n    }\n\n    protected getTokenType(name: string): TokenType {\n        return this.lexer.definition[name];\n    }\n\n    protected getGrammarElementId(node: AbstractElement): number | undefined {\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        return this.grammarElementIdMap.get(node);\n    }\n\n    protected getGrammarElement(id: number): AbstractElement {\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        const element = this.grammarElementIdMap.getKey(id);\n        if (element) {\n            return element;\n        } else {\n            throw new Error('Invalid grammar element id: ' + id);\n        }\n    }\n\n    protected createGrammarElementIdMap(): void {\n        let id = 0;\n        for (const element of streamAst(this.grammar)) {\n            if (isAbstractElement(element)) {\n                this.grammarElementIdMap.set(element, id++);\n            }\n        }\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n******************************************************************************/\n\nimport type { Module } from './dependency-injection.js';\nimport type { LangiumDefaultCoreServices, LangiumDefaultSharedCoreServices, LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\nimport type { FileSystemProvider } from './workspace/file-system-provider.js';\nimport { createGrammarConfig } from './languages/grammar-config.js';\nimport { createCompletionParser } from './parser/completion-parser-builder.js';\nimport { createLangiumParser } from './parser/langium-parser-builder.js';\nimport { DefaultTokenBuilder } from './parser/token-builder.js';\nimport { DefaultValueConverter } from './parser/value-converter.js';\nimport { DefaultLinker } from './references/linker.js';\nimport { DefaultNameProvider } from './references/name-provider.js';\nimport { DefaultReferences } from './references/references.js';\nimport { DefaultScopeComputation } from './references/scope-computation.js';\nimport { DefaultScopeProvider } from './references/scope-provider.js';\nimport { DefaultJsonSerializer } from './serializer/json-serializer.js';\nimport { DefaultServiceRegistry } from './service-registry.js';\nimport { DefaultDocumentValidator } from './validation/document-validator.js';\nimport { ValidationRegistry } from './validation/validation-registry.js';\nimport { DefaultAstNodeDescriptionProvider, DefaultReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\nimport { DefaultAstNodeLocator } from './workspace/ast-node-locator.js';\nimport { DefaultConfigurationProvider } from './workspace/configuration.js';\nimport { DefaultDocumentBuilder } from './workspace/document-builder.js';\nimport { DefaultLangiumDocumentFactory, DefaultLangiumDocuments } from './workspace/documents.js';\nimport { DefaultIndexManager } from './workspace/index-manager.js';\nimport { DefaultWorkspaceManager } from './workspace/workspace-manager.js';\nimport { DefaultLexer } from './parser/lexer.js';\nimport { JSDocDocumentationProvider } from './documentation/documentation-provider.js';\nimport { DefaultCommentProvider } from './documentation/comment-provider.js';\nimport { LangiumParserErrorMessageProvider } from './parser/langium-parser.js';\nimport { DefaultAsyncParser } from './parser/async-parser.js';\nimport { DefaultWorkspaceLock } from './workspace/workspace-lock.js';\nimport { DefaultHydrator } from './serializer/hydrator.js';\n\n/**\n * Context required for creating the default language-specific dependency injection module.\n */\nexport interface DefaultCoreModuleContext {\n    shared: LangiumSharedCoreServices;\n}\n\n/**\n * Creates a dependency injection module configuring the default core services.\n * This is a set of services that are dedicated to a specific language.\n */\nexport function createDefaultCoreModule(context: DefaultCoreModuleContext): Module<LangiumCoreServices, LangiumDefaultCoreServices> {\n    return {\n        documentation: {\n            CommentProvider: (services) => new DefaultCommentProvider(services),\n            DocumentationProvider: (services) => new JSDocDocumentationProvider(services)\n        },\n        parser: {\n            AsyncParser: (services) => new DefaultAsyncParser(services),\n            GrammarConfig: (services) => createGrammarConfig(services),\n            LangiumParser: (services) => createLangiumParser(services),\n            CompletionParser: (services) => createCompletionParser(services),\n            ValueConverter: () => new DefaultValueConverter(),\n            TokenBuilder: () => new DefaultTokenBuilder(),\n            Lexer: (services) => new DefaultLexer(services),\n            ParserErrorMessageProvider: () => new LangiumParserErrorMessageProvider()\n        },\n        workspace: {\n            AstNodeLocator: () => new DefaultAstNodeLocator(),\n            AstNodeDescriptionProvider: (services) => new DefaultAstNodeDescriptionProvider(services),\n            ReferenceDescriptionProvider: (services) => new DefaultReferenceDescriptionProvider(services)\n        },\n        references: {\n            Linker: (services) => new DefaultLinker(services),\n            NameProvider: () => new DefaultNameProvider(),\n            ScopeProvider: (services) => new DefaultScopeProvider(services),\n            ScopeComputation: (services) => new DefaultScopeComputation(services),\n            References: (services) => new DefaultReferences(services)\n        },\n        serializer: {\n            Hydrator: (services) => new DefaultHydrator(services),\n            JsonSerializer: (services) => new DefaultJsonSerializer(services)\n        },\n        validation: {\n            DocumentValidator: (services) => new DefaultDocumentValidator(services),\n            ValidationRegistry: (services) => new ValidationRegistry(services)\n        },\n        shared: () => context.shared\n    };\n}\n\n/**\n * Context required for creating the default shared dependency injection module.\n */\nexport interface DefaultSharedCoreModuleContext {\n    /**\n     * Factory function to create a {@link FileSystemProvider}.\n     *\n     * Langium exposes an `EmptyFileSystem` and `NodeFileSystem`, exported through `langium/node`.\n     * When running Langium as part of a vscode language server or a Node.js app, using the `NodeFileSystem` is recommended,\n     * the `EmptyFileSystem` in every other use case.\n     */\n    fileSystemProvider: (services: LangiumSharedCoreServices) => FileSystemProvider;\n}\n\n/**\n * Creates a dependency injection module configuring the default shared core services.\n * This is the set of services that are shared between multiple languages.\n */\nexport function createDefaultSharedCoreModule(context: DefaultSharedCoreModuleContext): Module<LangiumSharedCoreServices, LangiumDefaultSharedCoreServices> {\n    return {\n        ServiceRegistry: () => new DefaultServiceRegistry(),\n        workspace: {\n            LangiumDocuments: (services) => new DefaultLangiumDocuments(services),\n            LangiumDocumentFactory: (services) => new DefaultLangiumDocumentFactory(services),\n            DocumentBuilder: (services) => new DefaultDocumentBuilder(services),\n            IndexManager: (services) => new DefaultIndexManager(services),\n            WorkspaceManager: (services) => new DefaultWorkspaceManager(services),\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\n            WorkspaceLock: () => new DefaultWorkspaceLock(),\n            ConfigurationProvider: (services) => new DefaultConfigurationProvider(services)\n        }\n    };\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport { DefaultNameRegexp } from '../utils/cst-utils.js';\nimport { isCommentTerminal, terminalRegex } from '../utils/grammar-utils.js';\nimport { isMultilineComment } from '../utils/regexp-utils.js';\nimport { isTerminalRule } from './generated/ast.js';\n\nexport interface GrammarConfig {\n    /**\n     * Lists all rule names which are classified as multiline comment rules\n     */\n    multilineCommentRules: string[]\n    /**\n     * A regular expression which matches characters of names\n     */\n    nameRegexp: RegExp\n}\n\n/**\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\n * language-specific module.\n */\nexport function createGrammarConfig(services: LangiumCoreServices): GrammarConfig {\n    const rules: string[] = [];\n    const grammar = services.Grammar;\n    for (const rule of grammar.rules) {\n        if (isTerminalRule(rule) && isCommentTerminal(rule) && isMultilineComment(terminalRegex(rule))) {\n            rules.push(rule.name);\n        }\n    }\n    return {\n        multilineCommentRules: rules,\n        nameRegexp: DefaultNameRegexp\n    };\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport { LangiumCompletionParser } from './langium-parser.js';\nimport { createParser } from './parser-builder-base.js';\n\nexport function createCompletionParser(services: LangiumCoreServices): LangiumCompletionParser {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new LangiumCompletionParser(services);\n    createParser(grammar, parser, lexer.definition);\n    parser.finalize();\n    return parser;\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { URI } from '../utils/uri-utils.js';\n\nexport interface FileSystemNode {\n    readonly isFile: boolean;\n    readonly isDirectory: boolean;\n    readonly uri: URI;\n}\n\nexport type FileSystemFilter = (node: FileSystemNode) => boolean;\n\n/**\n * Provides methods to interact with an abstract file system. The default implementation is based on the node.js `fs` API.\n */\nexport interface FileSystemProvider {\n    /**\n     * Reads a document asynchronously from a given URI.\n     * @returns The string content of the file with the specified URI.\n     */\n    readFile(uri: URI): Promise<string>;\n    /**\n     * Reads the directory information for the given URI.\n     * @returns The list of file system entries that are contained within the specified directory.\n     */\n    readDirectory(uri: URI): Promise<FileSystemNode[]>;\n}\n\nexport class EmptyFileSystemProvider implements FileSystemProvider {\n\n    readFile(): Promise<string> {\n        throw new Error('No file system is available.');\n    }\n\n    async readDirectory(): Promise<FileSystemNode[]> {\n        return [];\n    }\n\n}\n\nexport const EmptyFileSystem = {\n    fileSystemProvider: () => new EmptyFileSystemProvider()\n};\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { createDefaultCoreModule, createDefaultSharedCoreModule } from '../default-module.js';\nimport type { Module } from '../dependency-injection.js';\nimport { inject } from '../dependency-injection.js';\nimport * as ast from '../languages/generated/ast.js';\nimport type { LangiumCoreServices, LangiumSharedCoreServices, PartialLangiumCoreServices, PartialLangiumSharedCoreServices } from '../services.js';\nimport type { Mutable } from '../syntax-tree.js';\nimport { EmptyFileSystem } from '../workspace/file-system-provider.js';\nimport { URI } from './uri-utils.js';\n\nconst minimalGrammarModule: Module<LangiumCoreServices, PartialLangiumCoreServices> = {\n    Grammar: () => undefined as unknown as ast.Grammar,\n    LanguageMetaData: () => ({\n        caseInsensitive: false,\n        fileExtensions: ['.langium'],\n        languageId: 'langium'\n    })\n};\n\nconst minimalSharedGrammarModule: Module<LangiumSharedCoreServices, PartialLangiumSharedCoreServices> = {\n    AstReflection: () => new ast.LangiumGrammarAstReflection()\n};\n\nfunction createMinimalGrammarServices(): LangiumCoreServices {\n    const shared = inject(\n        createDefaultSharedCoreModule(EmptyFileSystem),\n        minimalSharedGrammarModule\n    );\n    const grammar = inject(\n        createDefaultCoreModule({ shared }),\n        minimalGrammarModule\n    );\n    shared.ServiceRegistry.register(grammar);\n    return grammar;\n}\n\n/**\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\n * most notably the parser builder which interprets the grammar to create a parser.\n */\nexport function loadGrammarFromJson(json: string): ast.Grammar {\n    const services = createMinimalGrammarServices();\n    const astNode = services.serializer.JsonSerializer.deserialize(json) as Mutable<ast.Grammar>;\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, URI.parse(`memory://${astNode.name ?? 'grammar'}.langium`));\n    return astNode;\n}\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CancellationTokenSource = exports.CancellationToken = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst events_1 = require(\"./events\");\nvar CancellationToken;\n(function (CancellationToken) {\n    CancellationToken.None = Object.freeze({\n        isCancellationRequested: false,\n        onCancellationRequested: events_1.Event.None\n    });\n    CancellationToken.Cancelled = Object.freeze({\n        isCancellationRequested: true,\n        onCancellationRequested: events_1.Event.None\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate === CancellationToken.None\n            || candidate === CancellationToken.Cancelled\n            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));\n    }\n    CancellationToken.is = is;\n})(CancellationToken || (exports.CancellationToken = CancellationToken = {}));\nconst shortcutEvent = Object.freeze(function (callback, context) {\n    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);\n    return { dispose() { handle.dispose(); } };\n});\nclass MutableToken {\n    constructor() {\n        this._isCancelled = false;\n    }\n    cancel() {\n        if (!this._isCancelled) {\n            this._isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this.dispose();\n            }\n        }\n    }\n    get isCancellationRequested() {\n        return this._isCancelled;\n    }\n    get onCancellationRequested() {\n        if (this._isCancelled) {\n            return shortcutEvent;\n        }\n        if (!this._emitter) {\n            this._emitter = new events_1.Emitter();\n        }\n        return this._emitter.event;\n    }\n    dispose() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = undefined;\n        }\n    }\n}\nclass CancellationTokenSource {\n    get token() {\n        if (!this._token) {\n            // be lazy and create the token only when\n            // actually needed\n            this._token = new MutableToken();\n        }\n        return this._token;\n    }\n    cancel() {\n        if (!this._token) {\n            // save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token\n            this._token = CancellationToken.Cancelled;\n        }\n        else {\n            this._token.cancel();\n        }\n    }\n    dispose() {\n        if (!this._token) {\n            // ensure to initialize with an empty token if we had none\n            this._token = CancellationToken.None;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually dispose\n            this._token.dispose();\n        }\n    }\n}\nexports.CancellationTokenSource = CancellationTokenSource;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  InfoGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/info/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/info/tokenBuilder.ts\nvar InfoTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"InfoTokenBuilder\");\n  }\n  constructor() {\n    super([\"info\", \"showInfo\"]);\n  }\n};\n\n// src/language/info/module.ts\nvar InfoModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new InfoTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createInfoServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Info = inject(\n    createDefaultCoreModule({ shared }),\n    InfoGeneratedModule,\n    InfoModule\n  );\n  shared.ServiceRegistry.register(Info);\n  return { shared, Info };\n}\n__name(createInfoServices, \"createInfoServices\");\n\nexport {\n  InfoModule,\n  createInfoServices\n};\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  PacketGeneratedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/packet/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/packet/tokenBuilder.ts\nvar PacketTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PacketTokenBuilder\");\n  }\n  constructor() {\n    super([\"packet-beta\"]);\n  }\n};\n\n// src/language/packet/module.ts\nvar PacketModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PacketTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPacketServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Packet = inject(\n    createDefaultCoreModule({ shared }),\n    PacketGeneratedModule,\n    PacketModule\n  );\n  shared.ServiceRegistry.register(Packet);\n  return { shared, Packet };\n}\n__name(createPacketServices, \"createPacketServices\");\n\nexport {\n  PacketModule,\n  createPacketServices\n};\n","import {\n  GitGraphModule,\n  createGitGraphServices\n} from \"./chunks/mermaid-parser.core/chunk-NCMFTTUW.mjs\";\nimport {\n  InfoModule,\n  createInfoServices\n} from \"./chunks/mermaid-parser.core/chunk-4YFB5VUC.mjs\";\nimport {\n  PacketModule,\n  createPacketServices\n} from \"./chunks/mermaid-parser.core/chunk-EQFLFMNE.mjs\";\nimport {\n  PieModule,\n  createPieServices\n} from \"./chunks/mermaid-parser.core/chunk-BI6EQKOQ.mjs\";\nimport {\n  ArchitectureModule,\n  createArchitectureServices\n} from \"./chunks/mermaid-parser.core/chunk-FF7BQXOH.mjs\";\nimport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  Info,\n  InfoGeneratedModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  Pie,\n  PieGeneratedModule,\n  PieSection,\n  Statement,\n  __name,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isCommon,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection\n} from \"./chunks/mermaid-parser.core/chunk-Y27MQZ3U.mjs\";\n\n// src/parse.ts\nvar parsers = {};\nvar initializers = {\n  info: /* @__PURE__ */ __name(async () => {\n    const { createInfoServices: createInfoServices2 } = await import(\"./chunks/mermaid-parser.core/info-46DW6VJ7.mjs\");\n    const parser = createInfoServices2().Info.parser.LangiumParser;\n    parsers.info = parser;\n  }, \"info\"),\n  packet: /* @__PURE__ */ __name(async () => {\n    const { createPacketServices: createPacketServices2 } = await import(\"./chunks/mermaid-parser.core/packet-W2GHVCYJ.mjs\");\n    const parser = createPacketServices2().Packet.parser.LangiumParser;\n    parsers.packet = parser;\n  }, \"packet\"),\n  pie: /* @__PURE__ */ __name(async () => {\n    const { createPieServices: createPieServices2 } = await import(\"./chunks/mermaid-parser.core/pie-BEWT4RHE.mjs\");\n    const parser = createPieServices2().Pie.parser.LangiumParser;\n    parsers.pie = parser;\n  }, \"pie\"),\n  architecture: /* @__PURE__ */ __name(async () => {\n    const { createArchitectureServices: createArchitectureServices2 } = await import(\"./chunks/mermaid-parser.core/architecture-I3QFYML2.mjs\");\n    const parser = createArchitectureServices2().Architecture.parser.LangiumParser;\n    parsers.architecture = parser;\n  }, \"architecture\"),\n  gitGraph: /* @__PURE__ */ __name(async () => {\n    const { createGitGraphServices: createGitGraphServices2 } = await import(\"./chunks/mermaid-parser.core/gitGraph-YCYPL57B.mjs\");\n    const parser = createGitGraphServices2().GitGraph.parser.LangiumParser;\n    parsers.gitGraph = parser;\n  }, \"gitGraph\")\n};\nasync function parse(diagramType, text) {\n  const initializer = initializers[diagramType];\n  if (!initializer) {\n    throw new Error(`Unknown diagram type: ${diagramType}`);\n  }\n  if (!parsers[diagramType]) {\n    await initializer();\n  }\n  const parser = parsers[diagramType];\n  const result = parser.parse(text);\n  if (result.lexerErrors.length > 0 || result.parserErrors.length > 0) {\n    throw new MermaidParseError(result);\n  }\n  return result.value;\n}\n__name(parse, \"parse\");\nvar MermaidParseError = class extends Error {\n  constructor(result) {\n    const lexerErrors = result.lexerErrors.map((err) => err.message).join(\"\\n\");\n    const parserErrors = result.parserErrors.map((err) => err.message).join(\"\\n\");\n    super(`Parsing failed: ${lexerErrors} ${parserErrors}`);\n    this.result = result;\n  }\n  static {\n    __name(this, \"MermaidParseError\");\n  }\n};\nexport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  ArchitectureModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  GitGraphModule,\n  Info,\n  InfoGeneratedModule,\n  InfoModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  MermaidParseError,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  PacketModule,\n  Pie,\n  PieGeneratedModule,\n  PieModule,\n  PieSection,\n  Statement,\n  createArchitectureServices,\n  createGitGraphServices,\n  createInfoServices,\n  createPacketServices,\n  createPieServices,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isCommon,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  parse\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  PieGeneratedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/pie/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/pie/tokenBuilder.ts\nvar PieTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PieTokenBuilder\");\n  }\n  constructor() {\n    super([\"pie\", \"showData\"]);\n  }\n};\n\n// src/language/pie/valueConverter.ts\nvar PieValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"PieValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name !== \"PIE_SECTION_LABEL\") {\n      return void 0;\n    }\n    return input.replace(/\"/g, \"\").trim();\n  }\n};\n\n// src/language/pie/module.ts\nvar PieModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PieTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new PieValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPieServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Pie = inject(\n    createDefaultCoreModule({ shared }),\n    PieGeneratedModule,\n    PieModule\n  );\n  shared.ServiceRegistry.register(Pie);\n  return { shared, Pie };\n}\n__name(createPieServices, \"createPieServices\");\n\nexport {\n  PieModule,\n  createPieServices\n};\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/language/generated/ast.ts\nimport { AbstractAstReflection } from \"langium\";\nvar Statement = \"Statement\";\nvar Architecture = \"Architecture\";\nfunction isArchitecture(item) {\n  return reflection.isInstance(item, Architecture);\n}\n__name(isArchitecture, \"isArchitecture\");\nvar Branch = \"Branch\";\nfunction isBranch(item) {\n  return reflection.isInstance(item, Branch);\n}\n__name(isBranch, \"isBranch\");\nvar Checkout = \"Checkout\";\nvar CherryPicking = \"CherryPicking\";\nvar Commit = \"Commit\";\nfunction isCommit(item) {\n  return reflection.isInstance(item, Commit);\n}\n__name(isCommit, \"isCommit\");\nvar Common = \"Common\";\nfunction isCommon(item) {\n  return reflection.isInstance(item, Common);\n}\n__name(isCommon, \"isCommon\");\nvar GitGraph = \"GitGraph\";\nfunction isGitGraph(item) {\n  return reflection.isInstance(item, GitGraph);\n}\n__name(isGitGraph, \"isGitGraph\");\nvar Info = \"Info\";\nfunction isInfo(item) {\n  return reflection.isInstance(item, Info);\n}\n__name(isInfo, \"isInfo\");\nvar Merge = \"Merge\";\nfunction isMerge(item) {\n  return reflection.isInstance(item, Merge);\n}\n__name(isMerge, \"isMerge\");\nvar Packet = \"Packet\";\nfunction isPacket(item) {\n  return reflection.isInstance(item, Packet);\n}\n__name(isPacket, \"isPacket\");\nvar PacketBlock = \"PacketBlock\";\nfunction isPacketBlock(item) {\n  return reflection.isInstance(item, PacketBlock);\n}\n__name(isPacketBlock, \"isPacketBlock\");\nvar Pie = \"Pie\";\nfunction isPie(item) {\n  return reflection.isInstance(item, Pie);\n}\n__name(isPie, \"isPie\");\nvar PieSection = \"PieSection\";\nfunction isPieSection(item) {\n  return reflection.isInstance(item, PieSection);\n}\n__name(isPieSection, \"isPieSection\");\nvar Direction = \"Direction\";\nvar MermaidAstReflection = class extends AbstractAstReflection {\n  static {\n    __name(this, \"MermaidAstReflection\");\n  }\n  getAllTypes() {\n    return [\"Architecture\", \"Branch\", \"Checkout\", \"CherryPicking\", \"Commit\", \"Common\", \"Direction\", \"Edge\", \"GitGraph\", \"Group\", \"Info\", \"Junction\", \"Merge\", \"Packet\", \"PacketBlock\", \"Pie\", \"PieSection\", \"Service\", \"Statement\"];\n  }\n  computeIsSubtype(subtype, supertype) {\n    switch (subtype) {\n      case Branch:\n      case Checkout:\n      case CherryPicking:\n      case Commit:\n      case Merge: {\n        return this.isSubtype(Statement, supertype);\n      }\n      case Direction: {\n        return this.isSubtype(GitGraph, supertype);\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  getReferenceType(refInfo) {\n    const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n    switch (referenceId) {\n      default: {\n        throw new Error(`${referenceId} is not a valid reference id.`);\n      }\n    }\n  }\n  getTypeMetaData(type) {\n    switch (type) {\n      case \"Architecture\": {\n        return {\n          name: \"Architecture\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"edges\", defaultValue: [] },\n            { name: \"groups\", defaultValue: [] },\n            { name: \"junctions\", defaultValue: [] },\n            { name: \"services\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Branch\": {\n        return {\n          name: \"Branch\",\n          properties: [\n            { name: \"name\" },\n            { name: \"order\" }\n          ]\n        };\n      }\n      case \"Checkout\": {\n        return {\n          name: \"Checkout\",\n          properties: [\n            { name: \"branch\" }\n          ]\n        };\n      }\n      case \"CherryPicking\": {\n        return {\n          name: \"CherryPicking\",\n          properties: [\n            { name: \"id\" },\n            { name: \"parent\" },\n            { name: \"tags\", defaultValue: [] }\n          ]\n        };\n      }\n      case \"Commit\": {\n        return {\n          name: \"Commit\",\n          properties: [\n            { name: \"id\" },\n            { name: \"message\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case \"Common\": {\n        return {\n          name: \"Common\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Edge\": {\n        return {\n          name: \"Edge\",\n          properties: [\n            { name: \"lhsDir\" },\n            { name: \"lhsGroup\", defaultValue: false },\n            { name: \"lhsId\" },\n            { name: \"lhsInto\", defaultValue: false },\n            { name: \"rhsDir\" },\n            { name: \"rhsGroup\", defaultValue: false },\n            { name: \"rhsId\" },\n            { name: \"rhsInto\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"GitGraph\": {\n        return {\n          name: \"GitGraph\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Group\": {\n        return {\n          name: \"Group\",\n          properties: [\n            { name: \"icon\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Info\": {\n        return {\n          name: \"Info\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Junction\": {\n        return {\n          name: \"Junction\",\n          properties: [\n            { name: \"id\" },\n            { name: \"in\" }\n          ]\n        };\n      }\n      case \"Merge\": {\n        return {\n          name: \"Merge\",\n          properties: [\n            { name: \"branch\" },\n            { name: \"id\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case \"Packet\": {\n        return {\n          name: \"Packet\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"blocks\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"PacketBlock\": {\n        return {\n          name: \"PacketBlock\",\n          properties: [\n            { name: \"end\" },\n            { name: \"label\" },\n            { name: \"start\" }\n          ]\n        };\n      }\n      case \"Pie\": {\n        return {\n          name: \"Pie\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"sections\", defaultValue: [] },\n            { name: \"showData\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"PieSection\": {\n        return {\n          name: \"PieSection\",\n          properties: [\n            { name: \"label\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case \"Service\": {\n        return {\n          name: \"Service\",\n          properties: [\n            { name: \"icon\" },\n            { name: \"iconText\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Direction\": {\n        return {\n          name: \"Direction\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"dir\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      default: {\n        return {\n          name: type,\n          properties: []\n        };\n      }\n    }\n  }\n};\nvar reflection = new MermaidAstReflection();\n\n// src/language/generated/grammar.ts\nimport { loadGrammarFromJson } from \"langium\";\nvar loadedInfoGrammar;\nvar InfoGrammar = /* @__PURE__ */ __name(() => loadedInfoGrammar ?? (loadedInfoGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Info\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Info\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"info\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"showInfo\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"InfoGrammar\");\nvar loadedPacketGrammar;\nvar PacketGrammar = /* @__PURE__ */ __name(() => loadedPacketGrammar ?? (loadedPacketGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Packet\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Packet\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"packet-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"+\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PacketBlock\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"start\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"end\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}`)), \"PacketGrammar\");\nvar loadedPieGrammar;\nvar PieGrammar = /* @__PURE__ */ __name(() => loadedPieGrammar ?? (loadedPieGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Pie\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Pie\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"pie\"},{\"$type\":\"Assignment\",\"feature\":\"showData\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showData\"},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"+\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PieSection\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"PIE_SECTION_LABEL\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]+\\\\\"/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"PIE_SECTION_VALUE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/(0|[1-9][0-9]*)(\\\\\\\\.[0-9]+)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"PieGrammar\");\nvar loadedArchitectureGrammar;\nvar ArchitectureGrammar = /* @__PURE__ */ __name(() => loadedArchitectureGrammar ?? (loadedArchitectureGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Architecture\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Architecture\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"architecture-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"*\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"fragment\":true,\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"groups\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"services\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"junctions\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"edges\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"LeftPort\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"lhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"RightPort\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"rhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Arrow\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"lhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"--\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"-\"}]}]},{\"$type\":\"Assignment\",\"feature\":\"rhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Group\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"group\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Service\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"service\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"iconText\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Junction\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"junction\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Edge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"lhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"lhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"rhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"rhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_DIRECTION\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"L\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"R\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"T\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"B\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ID\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]+/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TEXT_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\(\\\\\"[^\\\\\"]+\\\\\"\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\([\\\\\\\\w-:]+\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\[[\\\\\\\\w ]+\\\\\\\\]/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_GROUP\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\{group\\\\\\\\}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_INTO\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/<|>/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"ArchitectureGrammar\");\nvar loadedGitGraphGrammar;\nvar GitGraphGrammar = /* @__PURE__ */ __name(() => loadedGitGraphGrammar ?? (loadedGitGraphGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"GitGraph\",\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"ParserRule\",\"name\":\"GitGraph\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Keyword\",\"value\":\":\"}]},{\"$type\":\"Keyword\",\"value\":\"gitGraph:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@0\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"statements\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Direction\",\"definition\":{\"$type\":\"Assignment\",\"feature\":\"dir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"LR\"},{\"$type\":\"Keyword\",\"value\":\"TB\"},{\"$type\":\"Keyword\",\"value\":\"BT\"}]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Commit\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"commit\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"msg:\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"message\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Branch\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"branch\"},{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"order:\"},{\"$type\":\"Assignment\",\"feature\":\"order\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Merge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"merge\"},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Checkout\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"checkout\"},{\"$type\":\"Keyword\",\"value\":\"switch\"}]},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"CherryPicking\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"cherry-pick\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"parent:\"},{\"$type\":\"Assignment\",\"feature\":\"parent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+(?=\\\\\\\\s)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\w([-\\\\\\\\./\\\\\\\\w]*[-\\\\\\\\w])?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"imports\":[],\"types\":[],\"usedGrammars\":[]}`)), \"GitGraphGrammar\");\n\n// src/language/generated/module.ts\nvar InfoLanguageMetaData = {\n  languageId: \"info\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar PacketLanguageMetaData = {\n  languageId: \"packet\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar PieLanguageMetaData = {\n  languageId: \"pie\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar ArchitectureLanguageMetaData = {\n  languageId: \"architecture\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar GitGraphLanguageMetaData = {\n  languageId: \"gitGraph\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar MermaidGeneratedSharedModule = {\n  AstReflection: /* @__PURE__ */ __name(() => new MermaidAstReflection(), \"AstReflection\")\n};\nvar InfoGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => InfoGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => InfoLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PacketGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PacketGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PacketLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PieGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PieGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PieLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar ArchitectureGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => ArchitectureGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => ArchitectureLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar GitGraphGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => GitGraphGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => GitGraphLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\n\n// src/language/common/valueConverter.ts\nimport { DefaultValueConverter } from \"langium\";\n\n// src/language/common/matcher.ts\nvar accessibilityDescrRegex = /accDescr(?:[\\t ]*:([^\\n\\r]*)|\\s*{([^}]*)})/;\nvar accessibilityTitleRegex = /accTitle[\\t ]*:([^\\n\\r]*)/;\nvar titleRegex = /title([\\t ][^\\n\\r]*|)/;\n\n// src/language/common/valueConverter.ts\nvar rulesRegexes = {\n  ACC_DESCR: accessibilityDescrRegex,\n  ACC_TITLE: accessibilityTitleRegex,\n  TITLE: titleRegex\n};\nvar AbstractMermaidValueConverter = class extends DefaultValueConverter {\n  static {\n    __name(this, \"AbstractMermaidValueConverter\");\n  }\n  runConverter(rule, input, cstNode) {\n    let value = this.runCommonConverter(rule, input, cstNode);\n    if (value === void 0) {\n      value = this.runCustomConverter(rule, input, cstNode);\n    }\n    if (value === void 0) {\n      return super.runConverter(rule, input, cstNode);\n    }\n    return value;\n  }\n  runCommonConverter(rule, input, _cstNode) {\n    const regex = rulesRegexes[rule.name];\n    if (regex === void 0) {\n      return void 0;\n    }\n    const match = regex.exec(input);\n    if (match === null) {\n      return void 0;\n    }\n    if (match[1] !== void 0) {\n      return match[1].trim().replace(/[\\t ]{2,}/gm, \" \");\n    }\n    if (match[2] !== void 0) {\n      return match[2].replace(/^\\s*/gm, \"\").replace(/\\s+$/gm, \"\").replace(/[\\t ]{2,}/gm, \" \").replace(/[\\n\\r]{2,}/gm, \"\\n\");\n    }\n    return void 0;\n  }\n};\nvar CommonValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"CommonValueConverter\");\n  }\n  runCustomConverter(_rule, _input, _cstNode) {\n    return void 0;\n  }\n};\n\n// src/language/common/tokenBuilder.ts\nimport { DefaultTokenBuilder } from \"langium\";\nvar AbstractMermaidTokenBuilder = class extends DefaultTokenBuilder {\n  static {\n    __name(this, \"AbstractMermaidTokenBuilder\");\n  }\n  constructor(keywords) {\n    super();\n    this.keywords = new Set(keywords);\n  }\n  buildKeywordTokens(rules, terminalTokens, options) {\n    const tokenTypes = super.buildKeywordTokens(rules, terminalTokens, options);\n    tokenTypes.forEach((tokenType) => {\n      if (this.keywords.has(tokenType.name) && tokenType.PATTERN !== void 0) {\n        tokenType.PATTERN = new RegExp(tokenType.PATTERN.toString() + \"(?:(?=%%)|(?!\\\\S))\");\n      }\n    });\n    return tokenTypes;\n  }\n};\nvar CommonTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"CommonTokenBuilder\");\n  }\n};\n\nexport {\n  __name,\n  Statement,\n  Architecture,\n  isArchitecture,\n  Branch,\n  isBranch,\n  Commit,\n  isCommit,\n  isCommon,\n  GitGraph,\n  isGitGraph,\n  Info,\n  isInfo,\n  Merge,\n  isMerge,\n  Packet,\n  isPacket,\n  PacketBlock,\n  isPacketBlock,\n  Pie,\n  isPie,\n  PieSection,\n  isPieSection,\n  MermaidGeneratedSharedModule,\n  InfoGeneratedModule,\n  PacketGeneratedModule,\n  PieGeneratedModule,\n  ArchitectureGeneratedModule,\n  GitGraphGeneratedModule,\n  AbstractMermaidValueConverter,\n  CommonValueConverter,\n  AbstractMermaidTokenBuilder,\n  CommonTokenBuilder\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  ArchitectureGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/architecture/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/architecture/tokenBuilder.ts\nvar ArchitectureTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"ArchitectureTokenBuilder\");\n  }\n  constructor() {\n    super([\"architecture\"]);\n  }\n};\n\n// src/language/architecture/valueConverter.ts\nvar ArchitectureValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"ArchitectureValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"ARCH_ICON\") {\n      return input.replace(/[()]/g, \"\").trim();\n    } else if (rule.name === \"ARCH_TEXT_ICON\") {\n      return input.replace(/[\"()]/g, \"\");\n    } else if (rule.name === \"ARCH_TITLE\") {\n      return input.replace(/[[\\]]/g, \"\").trim();\n    }\n    return void 0;\n  }\n};\n\n// src/language/architecture/module.ts\nvar ArchitectureModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new ArchitectureTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new ArchitectureValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createArchitectureServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Architecture = inject(\n    createDefaultCoreModule({ shared }),\n    ArchitectureGeneratedModule,\n    ArchitectureModule\n  );\n  shared.ServiceRegistry.register(Architecture);\n  return { shared, Architecture };\n}\n__name(createArchitectureServices, \"createArchitectureServices\");\n\nexport {\n  ArchitectureModule,\n  createArchitectureServices\n};\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = exports.Event = void 0;\nconst ral_1 = require(\"./ral\");\nvar Event;\n(function (Event) {\n    const _disposable = { dispose() { } };\n    Event.None = function () { return _disposable; };\n})(Event || (exports.Event = Event = {}));\nclass CallbackList {\n    add(callback, context = null, bucket) {\n        if (!this._callbacks) {\n            this._callbacks = [];\n            this._contexts = [];\n        }\n        this._callbacks.push(callback);\n        this._contexts.push(context);\n        if (Array.isArray(bucket)) {\n            bucket.push({ dispose: () => this.remove(callback, context) });\n        }\n    }\n    remove(callback, context = null) {\n        if (!this._callbacks) {\n            return;\n        }\n        let foundCallbackWithDifferentContext = false;\n        for (let i = 0, len = this._callbacks.length; i < len; i++) {\n            if (this._callbacks[i] === callback) {\n                if (this._contexts[i] === context) {\n                    // callback & context match => remove it\n                    this._callbacks.splice(i, 1);\n                    this._contexts.splice(i, 1);\n                    return;\n                }\n                else {\n                    foundCallbackWithDifferentContext = true;\n                }\n            }\n        }\n        if (foundCallbackWithDifferentContext) {\n            throw new Error('When adding a listener with a context, you should remove it with the same context');\n        }\n    }\n    invoke(...args) {\n        if (!this._callbacks) {\n            return [];\n        }\n        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\n        for (let i = 0, len = callbacks.length; i < len; i++) {\n            try {\n                ret.push(callbacks[i].apply(contexts[i], args));\n            }\n            catch (e) {\n                // eslint-disable-next-line no-console\n                (0, ral_1.default)().console.error(e);\n            }\n        }\n        return ret;\n    }\n    isEmpty() {\n        return !this._callbacks || this._callbacks.length === 0;\n    }\n    dispose() {\n        this._callbacks = undefined;\n        this._contexts = undefined;\n    }\n}\nclass Emitter {\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (listener, thisArgs, disposables) => {\n                if (!this._callbacks) {\n                    this._callbacks = new CallbackList();\n                }\n                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\n                    this._options.onFirstListenerAdd(this);\n                }\n                this._callbacks.add(listener, thisArgs);\n                const result = {\n                    dispose: () => {\n                        if (!this._callbacks) {\n                            // disposable is disposed after emitter is disposed.\n                            return;\n                        }\n                        this._callbacks.remove(listener, thisArgs);\n                        result.dispose = Emitter._noop;\n                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\n                            this._options.onLastListenerRemove(this);\n                        }\n                    }\n                };\n                if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        if (this._callbacks) {\n            this._callbacks.invoke.call(this._callbacks, event);\n        }\n    }\n    dispose() {\n        if (this._callbacks) {\n            this._callbacks.dispose();\n            this._callbacks = undefined;\n        }\n    }\n}\nexports.Emitter = Emitter;\nEmitter._noop = function () { };\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;\nfunction boolean(value) {\n    return value === true || value === false;\n}\nexports.boolean = boolean;\nfunction string(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexports.string = string;\nfunction number(value) {\n    return typeof value === 'number' || value instanceof Number;\n}\nexports.number = number;\nfunction error(value) {\n    return value instanceof Error;\n}\nexports.error = error;\nfunction func(value) {\n    return typeof value === 'function';\n}\nexports.func = func;\nfunction array(value) {\n    return Array.isArray(value);\n}\nexports.array = array;\nfunction stringArray(value) {\n    return array(value) && value.every(elem => string(elem));\n}\nexports.stringArray = stringArray;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  GitGraphGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/gitGraph/module.ts\nimport {\n  inject,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  EmptyFileSystem\n} from \"langium\";\n\n// src/language/gitGraph/tokenBuilder.ts\nvar GitGraphTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"GitGraphTokenBuilder\");\n  }\n  constructor() {\n    super([\"gitGraph\"]);\n  }\n};\n\n// src/language/gitGraph/module.ts\nvar GitGraphModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new GitGraphTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createGitGraphServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const GitGraph = inject(\n    createDefaultCoreModule({ shared }),\n    GitGraphGeneratedModule,\n    GitGraphModule\n  );\n  shared.ServiceRegistry.register(GitGraph);\n  return { shared, GitGraph };\n}\n__name(createGitGraphServices, \"createGitGraphServices\");\n\nexport {\n  GitGraphModule,\n  createGitGraphServices\n};\n"],"names":["hasOwnProperty","Object","prototype","object","key","call","path","hasPath","baseHas","findIndexFunc","collection","predicate","fromIndex","iterable","isArrayLike","iteratee","baseIteratee","keys","index","undefined","nativeMax","Math","max","createFind","array","length","toInteger","baseFindIndex","value","customizer","isObject","castPath","lastIndex","nested","toKey","newValue","objValue","isIndex","assignValue","paths","result","baseGet","baseSet","_ral","RAL","Error","defineProperty","exports","install","ral","isAstNode","obj","$type","isReference","$refText","isLinkingError","container","reference","message","AbstractAstReflection","constructor","subtypes","allSubtypes","isInstance","node","type","this","isSubtype","subtype","supertype","existing","computeIsSubtype","getAllSubTypes","allTypes","getAllTypes","types","possibleSubType","push","isCompositeCstNode","Array","isArray","content","isLeafCstNode","tokenType","isRootCstNode","fullText","StreamImpl","startFn","nextFn","iterator","state","next","Symbol","isEmpty","Boolean","done","count","toArray","toSet","Set","toMap","keyFn","valueFn","entryStream","map","element","Map","toString","join","concat","other","first","firstDone","DONE_RESULT","separator","arguments","addSeparator","indexOf","searchElement","every","some","forEach","callbackfn","filter","nonNullable","e","reduce","initialValue","previousValue","reduceRight","recursiveReduce","find","findIndex","includes","flatMap","mapped","isIterable","flat","depth","stream","head","tail","skipCount","i","limit","maxSize","size","distinct","by","set","has","add","exclude","otherKeySet","item","ownKey","EMPTY_STREAM","freeze","_len","collections","_key","collIndex","arrIndex","TreeStreamImpl","root","children","options","super","iterators","includeRoot","pruned","pop","prune","Reduction","RangeComparison","streamCst","tokenToRange","token","start","character","startColumn","line","startLine","end","endColumn","endLine","toDocumentSegment","offset","range","inRange","to","comparison","Before","After","startInside","endInside","Inside","OverlapBack","OverlapFront","compareRange","sum","a","b","product","min","DefaultNameRegexp","findCommentNode","cstNode","commentNames","previous","hidden","parent","getPreviousNode","isCommentNode","child","name","ErrorWithLocation","assertUnreachable","_","AbstractRule","AbstractType","Condition","TypeDefinition","ValueLiteral","AbstractElement","ArrayLiteral","ArrayType","BooleanLiteral","Conjunction","Disjunction","Grammar","InferredType","isInferredType","reflection","Interface","isInterface","Negation","NumberLiteral","Parameter","ParameterReference","ParserRule","isParserRule","ReferenceType","ReturnType","SimpleType","StringLiteral","TerminalRule","isTerminalRule","Type","isType","UnionType","Action","isAction","Alternatives","isAlternatives","Assignment","isAssignment","CharacterRange","CrossReference","isCrossReference","EndOfFile","Group","isGroup","Keyword","isKeyword","NegatedToken","RegexToken","RuleCall","isRuleCall","TerminalAlternatives","TerminalGroup","TerminalRuleCall","isTerminalRuleCall","UnorderedGroup","isUnorderedGroup","UntilToken","Wildcard","LangiumGrammarAstReflection","getReferenceType","refInfo","referenceId","property","getTypeMetaData","properties","defaultValue","linkContentToContainer","entries","startsWith","$container","$containerProperty","$containerIndex","getContainerOfType","typePredicate","getDocument","rootNode","findRootNode","$document","streamContents","keyIndex","arrayIndex","isAstNodeInRange","streamAllContents","streamAst","astNode","nodeRange","_a","$cstNode","streamReferences","copyDefaultValue","propertyType","cc","char","charCodeAt","insertToSet","subItem","addFlag","flagObj","flagKey","ASSERT_EXISTS","ASSERT_NEVER_REACH_HERE","isCharacter","digitsCharCodes","wordCharCodes","whitespaceCodes","hexDigitPattern","decimalPattern","decimalPatternNoZero","RegExpParser","idx","input","groupIdx","saveState","restoreState","newState","pattern","consumeChar","disjunction","flags","loc","begin","global","ignoreCase","multiLine","unicode","sticky","isRegExpFlag","popChar","substring","alts","alternative","peekChar","terms","isTerm","term","isAssertion","assertion","atom","quantifier","isBacktracking","atLeast","atMost","Infinity","integerIncludingZero","isDigit","greedy","dotAll","atomEscape","characterClass","group","isPatternCharacter","patternCharacter","isQuantifier","complement","decimalEscapeAtom","characterClassEscape","controlEscapeAtom","controlLetterEscapeAtom","nulCharacterAtom","hexEscapeSequenceAtom","regExpUnicodeEscapeSequenceAtom","identityEscapeAtom","positiveInteger","escapeCode","letter","test","toUpperCase","parseHexDigits","classPatternCharacterAtom","isClassAtom","from","classAtom","isRangeDash","classEscape","capturing","groupAst","number","parseInt","nextChar","howMuch","isAtom","prevState","howMany","hexString","hexChar","BaseRegExpVisitor","visitChildren","visit","subChild","visitPattern","visitFlags","visitDisjunction","visitAlternative","visitStartAnchor","visitEndAnchor","visitWordBoundary","visitNonWordBoundary","visitLookahead","visitNegativeLookahead","visitCharacter","visitSet","visitGroup","visitGroupBackReference","visitQuantifier","NEWLINE_REGEXP","regexpParser","visitor","isStarting","endRegexpStack","multiline","endRegex","reset","regex","startRegexp","String","fromCharCode","escapedChar","escapeRegExp","RegExp","match","isMultilineComment","regexp","isWhitespace","replace","partialMatches","partial","re","source","process","tmp","appendRaw","nbChars","substr","appendOptional","exec","partialRegExp","getAllReachableRules","grammar","allTerminals","ruleNames","entryRule","rules","ast","entry","getEntryRule","topMostRules","getHiddenRules","rule","ruleDfs","visitedSet","refRule","ref","findNodeForProperty","nodes","findNodesForPropertyInternal","nodeFeature","grammarSource","feature","findNodesForKeywordInternal","keyword","treeIterator","keywordNodes","childNode","findNameAssignment","startNode","findNameAssignmentInternal","cache","go","refType","childAssignment","get","toLowerCase","typeRef","isDataTypeRule","isDataTypeRuleInternal","visited","definition","getExplicitRuleType","inferredType","dataType","returnType","getTypeName","actionType","action","getActionType","terminalRegex","terminalRule","s","u","abstractElementToRegex","flagText","_ref","_ref2","WILDCARD","withCardinality","alternatives","elements","cardinality","lookahead","right","keywordToRegex","left","wrap","characterRangeToRegex","negate","terminal","negateTokenToRegex","until","lastSlash","lastIndexOf","regexFlags","toFastProperties","toBecomeFast","FakeConstructor","fakeInstance","fakeAccess","bar","n","guard","baseSlice","createAssigner","isPrototype","copyObject","props","arrayMap","getAllKeysIn","prop","basePickBy","isObjectLike","baseGetTag","nodeIsRegExp","nodeUtil","isRegExp","baseUnary","baseIsRegExp","tokenLabel","tokType","isString","LABEL","AbstractProduction","_definition","accept","prod","NonTerminal","assign","pickBy","v","referencedRule","Rule","orgText","Alternative","ignoreAmbiguities","Option","RepetitionMandatory","RepetitionMandatoryWithSeparator","Repetition","RepetitionWithSeparator","Alternation","hasPredicates","Terminal","serializeProduction","convertDefinition","serializedNonTerminal","nonTerminalName","label","terminalType","serializedTerminal","terminalLabel","PATTERN","GAstVisitor","nodeAny","visitNonTerminal","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","baseEach","func","arraySome","baseSome","isIterateeCall","values","baseIndexOf","arrayEvery","baseEvery","isOptionalProd","alreadyVisited","subProd","getProductionDslName","RestWalker","walk","prevRest","currRest","drop","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","refProd","flatProd","fullOrRest","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","alt","prodWrapper","repSepProd","baseUniq","isSequenceProd","firstSet","seq","currSubProd","nextSubProdIdx","hasInnerProdsRemaining","isLastInnerProdOptional","uniq","firstForSequence","isBranchingProd","allAlternativesFirsts","innerProd","flatten","firstForBranching","IN","ResyncFollowsWalker","topProd","follows","startWalking","followName","inner","occurenceInParent","fullRest","t_in_topProd_follows","TypeError","args","apply","arrayFilter","baseFilter","comparator","arrayIncludes","isCommon","valuesLength","arrayIncludesWith","cacheHas","SetCache","outer","computed","valuesIndex","baseRest","isArrayLikeObject","baseDifference","baseFlatten","resIndex","PRINT_ERROR","msg","console","error","PRINT_WARNING","warn","regExpAstCache","regExpParser","getRegExpAst","regExp","regExpStr","regExpAst","complementErrorMessage","failedOptimizationPrefixMsg","getOptimizedStartCodesIndices","ensureOptimizations","firstCharOptimizedIndices","msgSuffix","addOptimizedIdxToResult","code","rangeCode","minOptimizationVal","minUnOptVal","maxUnOptVal","minOptIdx","charCodeToOptimizedIndex","maxOptIdx","currOptIdx","isOptionalQuantifier","isWholeOptional","optimizedCharIdx","upperChar","lowerChar","handleIgnoreCase","findCode","setNode","targetCharCodes","codeOrRange","targetCode","CharCodeFinder","found","canMatchCharCode","charCodes","charCodeFinder","DEFAULT_MODE","MODES","SUPPORT_STICKY","analyzeTokenTypes","tokenTypes","tracer","defaults","useSticky","debug","safeMode","positionTracking","lineTerminatorCharacters","onlyRelevantTypes","charCodeToOptimizedIdxMap","initCharCodeToOptimizedIndexMap","reject","currType","Lexer","NA","allTransformedPatterns","patternIdxToType","patternIdxToGroup","patternIdxToLongerAltIdxArr","patternIdxToPushMode","patternIdxToPopMode","patternIdxToCanLineTerminator","patternIdxToIsCustom","patternIdxToShort","emptyGroups","patternIdxToConfig","hasCustom","currPattern","regExpSource","addStickyFlag","addStartOfInput","isFunction","escapedRegExpString","wrappedRegExp","tokenTypeIdx","clazz","groupName","GROUP","SKIPPED","isUndefined","longerAltType","LONGER_ALT","PUSH_MODE","lineTerminatorCharCodes","getCharCodes","LINE_BREAKS","checkLineBreaksIssues","isCustomPattern","isShortPattern","acc","x","longerAlt","canLineTerminator","isCustom","short","canBeOptimized","charCodeToPatternIdxToConfig","currTokType","optimizedIdx","addToMapOfArrays","START_CHARS_HINT","lastOptimizedIdx","charOrInt","currOptimizedIdx","optimizedCodes","validatePatterns","validModesNames","errors","missingResult","tokenTypesWithMissingPattern","LexerDefinitionErrorType","MISSING_PATTERN","valid","difference","findMissingPatterns","invalidResult","tokenTypesWithInvalidPattern","INVALID_PATTERN","findInvalidPatterns","validTokenTypes","withRegExpPatterns","EndAnchorFinder","invalidRegex","regexpAst","endAnchorVisitor","end_of_input","EOI_ANCHOR_FOUND","findEndOfInputAnchor","StartAnchorFinder","startAnchorVisitor","start_of_input","SOI_ANCHOR_FOUND","findStartOfInputAnchor","invalidFlags","UNSUPPORTED_FLAGS_FOUND","findUnsupportedFlags","identicalPatterns","outerType","innerType","compact","duplicatePatterns","currIdenticalSet","setOfIdentical","tokenTypeNames","DUPLICATE_PATTERNS_FOUND","findDuplicatePatterns","matchesEmptyString","EMPTY_MATCH_PATTERN","findEmptyMatchRegExps","validateRegExpPattern","invalidTypes","INVALID_GROUP_TYPE_FOUND","findInvalidGroupType","validModes","invalidModes","PUSH_MODE_DOES_NOT_EXIST","findModesThatDoNotExist","canBeTested","str","metaChars","noMetaChar","testIdx","regExpArray","testTokenType","UNREACHABLE_PATTERN","findUnreachablePatterns","performWarningRuntimeChecks","lexerDefinition","trackLines","warnings","hasAnyLineBreak","allTokenTypes","modes","concreteTokenTypes","terminatorCharCodes","currIssue","details","issue","IDENTIFY_TERMINATOR","errMsg","CUSTOM_LINE_BREAK","buildLineBreakIssueMessage","warningDescriptor","NO_LINE_BREAKS_FLAGS","LineTerminatorOptimizedTester","text","len","c","charsOrCodes","numOrString","charCode","timer","Date","getTime","val","time","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","isParent","categoryMatchesMap","tokenStructuredMatcherNoCategories","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypesAndParents","clone","categories","searching","CATEGORIES","newCategories","expandCategories","hasShortKeyProperty","hasCategoriesProperty","categoryMatches","hasExtendingTokensTypesMapProperty","assignTokenDefaultProps","singleAssignCategoriesToksMap","assignCategoriesMapProp","assignCategoriesTokensProp","nextNode","pathNode","nextCategory","newPath","isTokenType","defaultLexerErrorProvider","buildUnableToPopLexerModeMessage","image","buildUnexpectedCharactersMessage","startOffset","column","charAt","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","lineTerminatorsPattern","errorMessageProvider","traceInitPerf","skipValidations","recoveryEnabled","config","lexerDefinitionErrors","lexerDefinitionWarning","trackStartLines","trackEndLines","canModeBeOptimized","TRACE_INIT","phaseDesc","phaseImpl","traceInitIndent","indent","traceInitMaxIdent","log","traceMethod","traceInitVal","actualDefinition","hasOnlySingleMode","defaultMode","MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE","MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY","MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST","currModeValue","currModeName","currIdx","LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED","currLongerAlt","MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE","performRuntimeChecks","allModeNames","currModDef","currModName","currAnalyzeResult","allErrMessagesString","chopInput","identity","matchWithTest","updateLastIndex","noop","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","tokenize","initialMode","tokenizeInternal","j","k","matchAltImage","matchedImage","payload","altPayload","imageLength","newToken","errLength","orgLength","matchedTokensIndex","guessedNumberOfTokens","floor","matchedTokens","groups","clonedResult","groupKeys","currKey","currGroupValue","cloneEmptyGroups","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","possiblePatterns","pop_mode","popToken","newMode","last","modeCanBeOptimized","push_mode","currConfig","nextCharCode","chosenPatternIdxToConfig","chosenPatternsLength","singleCharCode","longerAltLength","longerAltConfig","longerAltPattern","foundTerminator","lastLTEndOffset","numOfLTsInMatch","errorStartOffset","errorLine","errorColumn","foundResyncPoint","tokens","pushMode","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","oldColumn","endOffset","tokenVector","tokenToAdd","hasTokenLabel","PARENT","POP_MODE","createToken","createTokenInternal","EOF","tokenMatcher","defaultParserErrorProvider","buildMismatchTokenMessage","expected","actual","ruleName","buildNotAllInputParsedMessage","firstRedundant","buildNoViableAltMessage","_ref3","expectedPathsPerAlt","customUserDescription","errPrefix","errSuffix","allLookAheadPaths","currAltPaths","nextValidTokenSequences","currPath","currTokenType","itemMsg","buildEarlyExitMessage","_ref4","expectedIterationPaths","defaultGrammarResolverErrorProvider","buildRuleNotFoundError","topLevelRule","undefinedRule","defaultGrammarValidatorErrorProvider","buildDuplicateFoundError","duplicateProds","topLevelName","duplicateProd","dslName","extraArgument","buildNamespaceConflictError","buildAlternationPrefixAmbiguityError","pathMsg","prefixPath","currTok","occurrence","alternation","ambiguityIndices","buildAlternationAmbiguityError","currtok","currMessage","buildEmptyRepetitionError","repetition","buildTokenNameError","buildEmptyAlternationError","emptyChoiceIdx","buildTooManyAlternativesError","buildLeftRecursionError","leftRecursionPath","currRule","buildInvalidRuleNameError","buildDuplicateRuleNameError","grammarName","GastRefResolverVisitor","nameToTopRule","errMsgProvider","resolveRefs","currTopLevel","ParserDefinitionErrorType","UNRESOLVED_SUBRULE_REF","unresolvedRefName","setter","accumulator","initializer","arrayAggregator","baseAggregator","createAggregator","baseAssignValue","AbstractNextPossibleTokensWalker","possibleTokTypes","nextProductionName","nextProductionOccurrence","isAtEndOfPath","ruleStack","reverse","occurrenceStack","updateExpectedNext","NextAfterTokenWalker","nextTerminalName","nextTerminalOccurrence","lastTok","lastTokOccurrence","restProd","AbstractNextTerminalAfterProductionWalker","topRule","isEndOfRule","NextTerminalAfterManyWalker","firstAfterMany","_first","NextTerminalAfterManySepWalker","firstAfterManySep","NextTerminalAfterAtLeastOneWalker","firstAfterAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","getAlternativesForProd","newDef","currAlt","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currRuleStack","currOccurrenceStack","nextPath","dropRight","nextIdx","nextTokenType","nextTokenOccurrence","newRuleStack","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack","PROD_TYPE","getProdType","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","getLookaheadPaths","prodType","maxLookahead","getLookaheadPathsForOr","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","dynamicTokensEnabled","numOfAlts","areAllOneTokenLookahead","orAlts","predicates","GATE","t","currNumOfPaths","currPredicate","currPathLength","nextToken","LA","singleTokenAlts","choiceToAlt","currExtendingType","buildSingleAlternativeLookaheadFunction","numOfPaths","singleTokensTypes","expectedTokenUniqueKey","RestDefinitionFinderWalker","targetOccurrence","targetProdType","restDef","checkIsTarget","expectedProdType","InsideDefinitionFinderVisitor","targetRef","expectedProdName","initializeArrayOfArrays","pathToHashKeys","longerKeys","currShorterKey","categoriesKeySuffix","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","lookAheadSequenceFromAlternatives","altsDefs","partialAlts","finalResult","altsHashes","dict","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","prefixKeys","currAltResult","containsPath","newPartialPathsAndSuffixes","ruleGrammar","insideDefVisitor","insideDef","afterDef","AlternativeGAST","searchPath","compareOtherPath","otherPath","searchTok","otherTok","areTokenCategoriesNotUsed","lookAheadPaths","singleAltPaths","singlePath","validateGrammar","topLevels","duplicateErrors","collectorVisitor","OccurrenceValidationCollector","allRuleProductions","allProductions","productionGroups","groupBy","identifyProductionForDuplicates","duplicates","currGroup","currDuplicates","firstProd","defError","DUPLICATE_PRODUCTIONS","param","getExtraProductionArgument","parameter","validateDuplicateProductions","termsNamespaceConflictErrors","tokenNames","currToken","currRuleName","CONFLICT_TOKENS_RULES_NAMESPACE","checkTerminalAndNoneTerminalsNameSpace","tooManyAltsErrors","curRule","orCollector","OrCollector","ors","alternations","currOr","TOO_MANY_ALTS","validateTooManyAlts","duplicateRulesError","allRules","className","occurrences","DUPLICATE_RULE_NAME","validateRuleDoesNotAlreadyExist","subrule","option","manySep","atLeastOne","atLeastOneSep","many","or","validateNoLeftRecursion","nextNonTerminals","getFirstNoneTerminal","LEFT_RECURSION","validNextSteps","errorsFromNextSteps","currRefRule","currSubDef","isFirstOptional","hasMore","rest","validateAmbiguousAlternationAlternatives","globalMaxLookahead","currOccurrence","actualMaxLookahead","altsAmbiguityErrors","foundAmbiguousPaths","identicalAmbiguities","altsCurrPathAppearsIn","currOtherAlt","currOtherAltIdx","currErrors","currAmbDescriptor","ambgIndices","AMBIGUOUS_ALTS","checkAlternativesAmbiguities","altsPrefixAmbiguityErrors","pathsAndIndices","currPathsAndIdx","currPathAndIdx","targetIdx","targetPath","prefixAmbiguitiesPathsAndIndices","searchPathAndIdx","prefix","otherTokType","currAmbPathAndIdx","AMBIGUOUS_PREFIX_ALTS","checkPrefixAlternativesAmbiguities","RepetitionCollector","resolveGrammar","actualOptions","topRulesTable","refResolver","orgResolveGrammar","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","isRecognitionException","RecognitionException","resyncedTokens","setPrototypeOf","captureStackTrace","MismatchedTokenException","previousToken","NoViableAltException","NotAllInputParsedException","EarlyExitException","EOF_FOLLOW_KEY","IN_RULE_RECOVERY_EXCEPTION","InRuleRecoveryException","attemptInRepetitionRecovery","prodFunc","lookaheadFunc","dslMethodIdx","prodOccurrence","nextToksWalker","notStuck","getKeyForAutomaticLookahead","firstAfterRepInfo","firstAfterRepMap","getCurrRuleFullName","getGAstProductions","expectTokAfterLastMatch","nextTokIdx","RULE_STACK","shouldInRepetitionRecoveryBeTried","tryInRepetitionRecovery","AT_LEAST_ONE_IDX","MANY_SEP_IDX","AT_LEAST_ONE_SEP_IDX","ruleIdx","LLkLookaheadStrategy","DEFAULT_PARSER_CONFIG","validate","leftRecursionErrors","emptyAltErrors","validateEmptyOrAlternatives","ambiguousAltsErrors","emptyRepetitionErrors","validateSomeNonEmptyLookaheadPath","currTopRule","exceptLast","currAlternative","possibleFirstInAlt","NONE_LAST_EMPTY_ALT","validateEmptyOrAlternative","topLevelRules","currProd","pathsInsideProduction","NO_NON_EMPTY_LOOKAHEAD","buildLookaheadForAlternation","laFuncBuilder","buildLookaheadFuncForOr","buildLookaheadForOptional","lookaheadBuilder","buildLookaheadFuncForOptionalProd","dslMethods","repetitionWithSeparator","repetitionMandatory","repetitionMandatoryWithSeparator","setNodeLocationOnlyOffset","currNodeLocation","newLocationInfo","isNaN","setNodeLocationFull","defineNameProp","nameValue","enumerable","configurable","writable","defaultVisit","ctx","childrenNames","childrenNamesLength","currChildArray","currChildArrayLength","currChild","createBaseSemanticVisitorConstructor","derivedConstructor","semanticProto","validateVisitor","semanticDefinitionErrors","visitorInstance","missingErrors","missingRuleNames","CstVisitorDefinitionError","MISSING_METHOD","methodName","validateMissingCstMethods","errorMessages","currDefError","_RULE_NAMES","RECORDING_NULL_OBJECT","description","HANDLE_SEPARATOR","MAX_METHOD_IDX","pow","RFT","RECORDING_PHASE_TOKEN","RECORDING_PHASE_CSTNODE","recordProd","prodConstructor","mainProdArg","handleSep","assertMethodIdxIsValid","prevProd","peek","recordingProdStack","grammarAction","DEF","newProd","SEP","MAX_LOOKAHEAD","recordOrProd","hasOptions","newOrProd","IGNORE_AMBIGUITIES","currAltFlat","ALT","getIdxSuffix","KNOWN_RECORDER_ERROR","END_OF_FILE","NaN","outputCst","nodeLocationTracking","DEFAULT_RULE_CONFIG","recoveryValueFunc","resyncEnabled","derivedCtor","baseCtors","EMPTY_ALT","Parser","performSelfAnalysis","parserInstance","defErrorsMsgs","selfAnalysisDone","enableRecording","definedRulesNames","originalGrammarAction","recordedRuleGast","topLevelRuleRecord","gastProductionsCache","disableRecording","resolverErrors","definitionErrors","validationErrors","tokensMap","orgValidateGrammar","lookaheadValidationErrors","lookaheadValidationErrorMessages","lookaheadStrategy","errorMessage","CUSTOM_LOOKAHEAD_VALIDATION","validateLookahead","allFollows","topProductions","reSyncFollows","currRefsFollow","computeAllProdsFollows","resyncFollows","_b","initialize","preComputeLookaheadFunctions","DEFER_DEFINITION_ERRORS_HANDLING","tokenVocabulary","that","initErrorHandler","initLexerAdapter","initLooksAhead","initRecognizerEngine","initRecoverable","initTreeBuilder","initContentAssist","initGastRecorder","initPerformanceTracer","getTokenToInsert","tokToInsert","isInsertedInRecovery","canTokenTypeBeInsertedInRecovery","canTokenTypeBeDeletedInRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","passedResyncPoint","nextTokenWithoutResync","generateErrorMessage","SAVE_ERROR","SKIP_TOKEN","addToResyncTokens","importLexerState","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","getNextPossibleTokenTypes","tryInRuleRecovery","canRecoverWithSingleTokenInsertion","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","expectedToken","mismatchedTok","possibleFollowsTokType","isInCurrentRuleReSyncSet","followKey","getCurrFollowKey","currentRuleReSyncSet","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","foundMatch","resyncTokType","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","buildFullFollowKeyStack","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","followStack","resyncTokens","reSyncTo","getHumanReadableRuleStack","currShortName","lookAheadFuncsCache","collectMethods","prodIdx","laFunc","fullRuleNameToShort","setLaFuncCache","computeLookaheadFunc","prodKey","prodMaxLookahead","dslMethodName","getLaFuncFromCache","CST_STACK","setNodeLocationFromToken","setNodeLocationFromNode","cstPostRule","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","location","fullRuleName","create","ruleCstNode","prevToken","consumedToken","rootCst","tokenTypeName","ruleCstResult","preCstNode","ruleResult","addNoneTerminalToCst","getBaseCstVisitorConstructor","baseCstVisitorConstructor","newBaseCstVisitorConstructor","getBaseCstVisitorConstructorWithDefaults","baseCstVisitorWithDefaultsConstructor","newConstructor","baseConstructor","withDefaultsProto","createBaseVisitorConstructorWithDefaults","tokVector","tokVectorLength","newInput","soughtIdx","resetLexerState","moveToTerminatedState","getLexerPosition","shortRuleNameToFull","ruleShortNameIdx","subruleIdx","isBackTrackingStack","uniqueTokens","noTokenCategoriesUsed","tokenConstructor","defineRule","impl","shortName","BITS_FOR_METHOD_TYPE","invokeRuleWithTry","ruleInvocationStateUpdate","cst","invokeRuleCatch","ruleFinallyStateUpdate","_len2","_key2","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","recogError","partialCstResult","recoveredNode","optionInternal","actionORMethodDef","optionInternalLogic","orgLookaheadFunction","atLeastOneInternal","laKey","atLeastOneInternalLogic","raiseEarlyExitException","ERR_MSG","doSingleRepetition","atLeastOneSepFirstInternal","atLeastOneSepFirstInternalLogic","separatorLookAheadFunc","CONSUME","repetitionSepSecondInternal","manyInternal","manyInternalLogic","lookaheadFunction","manySepFirstInternal","manySepFirstInternalLogic","nextTerminalAfterWalker","beforeIteration","orInternal","altsOrOpts","altIdxToTake","raiseNoAltException","isAtEndOfInput","firstRedundantTok","subruleInternal","ruleToCall","ARGS","subruleInternalError","consumeInternal","consumeInternalError","eFromConsumption","consumeInternalRecovery","eFromInRuleRecovery","saveRecogState","savedErrors","savedRuleStack","lexerState","reloadRecogState","fullName","ACTION","consume","CONSUME1","CONSUME2","CONSUME3","CONSUME4","CONSUME5","CONSUME6","CONSUME7","CONSUME8","CONSUME9","SUBRULE","SUBRULE1","SUBRULE2","SUBRULE3","SUBRULE4","SUBRULE5","SUBRULE6","SUBRULE7","SUBRULE8","SUBRULE9","OPTION1","OPTION2","OPTION3","OPTION4","OPTION5","OPTION6","OPTION7","OPTION8","OPTION9","OR","OR1","OR2","OR3","OR4","OR5","OR6","OR7","OR8","OR9","MANY","MANY1","MANY2","MANY3","MANY4","MANY5","MANY6","MANY7","MANY8","MANY9","MANY_SEP","MANY_SEP1","MANY_SEP2","MANY_SEP3","MANY_SEP4","MANY_SEP5","MANY_SEP6","MANY_SEP7","MANY_SEP8","MANY_SEP9","AT_LEAST_ONE","AT_LEAST_ONE1","AT_LEAST_ONE2","AT_LEAST_ONE3","AT_LEAST_ONE4","AT_LEAST_ONE5","AT_LEAST_ONE6","AT_LEAST_ONE7","AT_LEAST_ONE8","AT_LEAST_ONE9","AT_LEAST_ONE_SEP","AT_LEAST_ONE_SEP1","AT_LEAST_ONE_SEP2","AT_LEAST_ONE_SEP3","AT_LEAST_ONE_SEP4","AT_LEAST_ONE_SEP5","AT_LEAST_ONE_SEP6","AT_LEAST_ONE_SEP7","AT_LEAST_ONE_SEP8","AT_LEAST_ONE_SEP9","RULE","implementation","ruleImplementation","OVERRIDE_RULE","ruleErrors","INVALID_RULE_OVERRIDE","validateRuleIsOverridden","BACKTRACK","orgState","getSerializedGastProductions","topRules","_errors","context","ruleOccurrenceStack","newErrors","userDefinedErrMsg","insideProdPaths","actualTokens","errMsgTypes","lookAheadPathsPerAlternative","computeContentAssist","startRuleName","precedingInput","startRuleGast","topRuleName","topProduction","RECORDING_PHASE","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION_RECORD","BACKTRACK_RECORD","LA_RECORD","newTopLevelRule","originalError","mutabilityError","JSON","stringify","newNoneTerminal","userTraceInitPerf","traceIsNumber","baseCtor","baseProto","getOwnPropertyNames","propName","basePropDescriptor","getOwnPropertyDescriptor","EmbeddedActionsParser","configClone","buildATNKey","AbstractTransition","target","isEpsilon","AtomTransition","EpsilonTransition","RuleTransition","ruleStart","followState","createATN","atn","decisionMap","decisionStates","ruleToStartState","ruleToStopState","states","ruleLength","stop","createRuleStartAndStopATNStates","ruleBlock","block","buildRuleHandle","production","tokenRef","currentRule","nonTerminal","addTransition","ruleRef","defineDecisionState","handle","makeAlts","optional","epsilon","starState","star","sep","repetitionSep","plusState","plus","repetitionMandatorySep","handles","altsLength","transition","transitions","isRuleTransition","ruleTransition","removeState","makeBlock","blkStart","blkEnd","loop","loopback","loopEnd","decision","epsilonOnlyTransitions","nextTokenWithinRule","stateNumber","splice","DFA_ERROR","ATNConfigSet","configs","finalize","getATNConfigKey","stack","createDFACache","startState","predicateSet","atnStartState","PredicateSet","is","EMPTY_PREDICATES","LLStarLookaheadStrategy","logging","dfas","decisionLength","decisionToDFA","initATNSimulator","decisionIndex","isLL1Sequence","prediction","gate","adaptivePredict","g","sequences","allowEmpty","fullSet","altSet","indices","dfaCaches","dfa","addDFAState","newDFAState","computeStartState","performLookahead","s0","previousD","d","edges","computeLookaheadTarget","buildAdaptivePredictError","isAcceptState","reach","intermediate","skippedStopStates","transitionLength","getReachableTarget","closure","hasConfigInRuleStopState","computeReachSet","addDFAEdge","predictedAlt","getUniqueAlt","uniqueAlt","allConfigsInRuleStopStates","altSets","configToAlts","getConflictingAltSets","hasConflictingAltSet","hasStateAssociatedWithOneAlt","hasConflictTerminatingPrediction","reportLookaheadAmbiguity","atnState","buildAmbiguityError","current","nextTransitions","actualToken","possibleTokenTypes","uniqBy","tokenPath","mapKey","numberOfTransitions","p","atnStack","getEpsilonTarget","DocumentUri","URI","integer","uinteger","Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","DiagnosticTag","CodeDescription","Diagnostic","Command","TextEdit","ChangeAnnotation","ChangeAnnotationIdentifier","AnnotatedTextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","TextDocumentIdentifier","VersionedTextDocumentIdentifier","OptionalVersionedTextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItemKind","InsertTextFormat","CompletionItemTag","InsertReplaceEdit","InsertTextMode","CompletionItemLabelDetails","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolTag","SymbolInformation","WorkspaceSymbol","DocumentSymbol","CodeActionKind","CodeActionTriggerKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentLink","SelectionRange","SemanticTokenTypes","SemanticTokenModifiers","SemanticTokens","InlineValueText","InlineValueVariableLookup","InlineValueEvaluatableExpression","InlineValueContext","InlayHintKind","InlayHintLabelPart","InlayHint","StringValue","InlineCompletionItem","InlineCompletionList","InlineCompletionTriggerKind","SelectedCompletionInfo","InlineCompletionContext","WorkspaceFolder","MIN_VALUE","MAX_VALUE","Number","candidate","Is","objectLiteral","one","two","three","four","uri","string","targetUri","targetRange","targetSelectionRange","originSelectionRange","red","green","blue","alpha","numberRange","color","textEdit","additionalTextEdits","typedArray","Comment","Imports","Region","startCharacter","endCharacter","kind","collapsedText","defined","Warning","Information","Hint","Unnecessary","Deprecated","href","severity","relatedInformation","codeDescription","title","command","newText","insert","position","del","needsConfirmation","boolean","annotation","annotationId","textDocument","edits","overwrite","ignoreIfExists","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","change","version","languageId","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Module","Property","Unit","Value","Enum","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","asIs","adjustIndentation","detail","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","parameters","Read","Write","Namespace","Package","Key","Null","containerName","selectionRange","deprecated","tags","Empty","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","SourceFixAll","Invoked","Automatic","diagnostics","only","triggerKind","kindOrCommandOrEdit","checkKind","edit","isPreferred","data","tabSize","insertSpaces","resultId","variableName","caseSensitiveLookup","expression","frameId","stoppedLocation","tooltip","textEdits","paddingLeft","paddingRight","createSnippet","insertText","filterText","selectedCompletionInfo","TextDocument","mergeSort","compare","slice","leftIdx","rightIdx","ret","FullTextDocument","lineCount","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","diff","lastModifiedOffset","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","ch","low","high","mid","lineOffset","nextLineOffset","check","CstNodeBuilder","nodeStack","buildRootNode","RootCstNodeImpl","buildCompositeNode","compositeNode","CompositeCstNodeImpl","buildLeafNode","leafNode","LeafCstNodeImpl","removeNode","construct","addHiddenTokens","hiddenTokens","hiddenNode","addHiddenToken","tokenStart","tokenEnd","childStart","childEnd","AbstractCstNode","_astNode","_offset","_length","_hidden","_tokenType","_range","CstNodeContainer","firstNonHiddenNode","lastNonHiddenNode","firstNode","lastNode","_rangeCache","firstRange","lastRange","addParents","unshift","_len3","_key3","_text","DatatypeSymbol","isDataTypeNode","withRuleSuffix","endsWith","AbstractLangiumParser","services","_unorderedGroups","lexer","parser","wrapper","ChevrotainWrapper","ParserConfig","ParserErrorMessageProvider","choices","wrapOr","callback","wrapOption","wrapMany","wrapAtLeastOne","isRecording","IS_RECORDING","unorderedGroups","getRuleStack","wrapSelfAnalysis","LangiumParser","nodeBuilder","assignmentMap","linker","references","Linker","converter","ValueConverter","astReflection","shared","AstReflection","fragment","ruleMethod","DEFINE_RULE","startImplementation","bind","mainRule","parse","lexerResult","clear","lexerErrors","parserErrors","err","wrapConsume","isValidToken","assignment","isCrossRef","getAssignment","convertedValue","convert","operator","subruleResult","wrapSubrule","performSubruleAssignment","resultKind","assignWithoutOverride","newItem","typeMetaData","genericNode","assignMandatoryProperties","buildReference","existingValue","AbstractParserErrorMessageProvider","LangiumParserErrorMessageProvider","LangiumCompletionParser","elementStack","lastElementStack","nextTokenIndex","stackSize","resetState","tokenIndex","keepStackSize","resetStackSize","removeUnexpectedElements","before","after","defaultConfig","useDefaultLookahead","createParser","parserContext","reachable","parserRules","buildElement","buildRules","method","ignoreGuard","buildKeyword","buildAction","buildCrossReference","ruleCall","namedArgs","buildPredicate","ruleArgs","ruleTarget","buildRuleCallPredicate","getRule","getToken","buildRuleCall","methods","predicatedMethod","getGuardCondition","buildAlternatives","orIdx","idFunc","lParser","groupState","trackedAlternatives","wrapped","delete","buildUnorderedGroup","buildGroup","condition","isConjunction","isNegation","isParameterReference","isBooleanLiteral","true","guardCondition","crossRef","assignTerminal","getRuleName","createLangiumParser","prepareLangiumParser","DefaultTokenBuilder","buildTokens","reachableRules","terminalTokens","buildTerminalTokens","buildKeywordTokens","terminalToken","buildTerminalToken","requiresCustomPattern","regexPatternFunction","stickyRegex","sort","buildKeywordToken","caseInsensitive","buildKeywordPattern","findLongerAlt","getCaseInsensitivePattern","longerAlts","DefaultValueConverter","nameAssigment","getCrossReferenceTerminal","runConverter","convertInt","convertString","convertID","_c","getRuleType","convertNumber","convertBoolean","convertBigint","convertDate","convertEscapeCharacter","BigInt","lastTick","globalInterruptionPeriod","OperationCancelled","isOperationCancelled","async","interruptAndCheck","CancellationToken","None","now","Promise","resolve","setImmediate","setTimeout","isCancellationRequested","Deferred","promise","arg","isIncremental","getWellformedRange","addedLineOffsets","computeLineOffsets","isFull","ensureBeforeEOL","isEOL","rangeLength","isAtLineStart","textOffset","getWellformedEdit","spans","r","o","h","cwd","normalize","isAbsolute","relative","f","l","_makeLong","dirname","basename","extname","format","dir","base","ext","delimiter","win32","posix","toStringTag","platform","navigator","userAgent","scheme","authority","query","isUri","fsPath","with","m","C","file","y","toJSON","revive","_formatted","external","_fsPath","_sep","$mid","encodeURIComponent","decodeURIComponent","w","A","P","joinPath","resolvePath","UriUtils","DocumentState","Utils","equals","fromPath","toPath","fromParts","split","toParts","repeat","DefaultLangiumDocumentFactory","serviceRegistry","ServiceRegistry","textDocuments","workspace","TextDocuments","fileSystemProvider","FileSystemProvider","fromUri","cancellationToken","readFile","createAsync","fromTextDocument","fromString","fromModel","model","$model","parseResult","createLangiumDocument","cancelToken","parseAsync","Parsed","textDocumentGetter","createTextDocumentGetter","oldText","getServices","AsyncParser","textDoc","LanguageMetaData","DefaultLangiumDocuments","documentMap","langiumDocumentFactory","LangiumDocumentFactory","all","addDocument","uriString","getOrCreateDocument","createDocument","then","hasDocument","invalidateDocument","langiumDoc","Changed","precomputedScopes","deleteDocument","DefaultLinker","langiumDocuments","LangiumDocuments","scopeProvider","ScopeProvider","astNodeLocator","AstNodeLocator","link","doLink","getCandidate","_nodeDescription","documentUri","linkedNode","loadAstNode","createLinkingError","unlink","getScope","getElement","refNode","refText","$refNode","refData","getLinkedNode","ComputedScopes","descr","$nodeDescription","nodeDescription","doc","getAstNode","targetDescription","referenceType","DefaultNameProvider","getName","isNamed","getNameNode","DefaultReferences","nameProvider","NameProvider","IndexManager","nodeLocator","findDeclaration","sourceCstNode","findAssignment","nodeElem","nameNode","isChildNode","findDeclarationNode","targetNode","findReferences","refs","includeDeclaration","getReferenceToSelf","indexReferences","findAllReferences","getAstNodePath","sourceUri","sourcePath","segment","local","MultiMap","addAll","entriesGroupedByKey","BiMap","inverse","getKey","DefaultScopeComputation","descriptions","AstNodeDescriptionProvider","computeExports","computeExportsForNode","parentNode","exportNode","createDescription","computeLocalScopes","scopes","processNode","StreamScope","outerScope","getAllElements","MapScope","localName","elementStream","DisposableCache","toDispose","isDisposed","onDispose","disposable","dispose","throwIfDisposed","SimpleCache","provider","ContextCache","contextKey","cacheForContext","contextCache","documentCache","WorkspaceCache","sharedServices","DocumentBuilder","onUpdate","DefaultScopeProvider","indexManager","globalScopeCache","precomputed","currentNode","allDescriptions","desc","getGlobalScope","createScope","createScopeForNodes","_context","allElements","isIntermediateReference","DefaultJsonSerializer","ignoreProperties","commentProvider","CommentProvider","serialize","specificReplacer","replacer","defaultReplacer","currentDocument","space","deserialize","linkNode","sourceText","textRegions","comments","uriConverter","refValue","targetDocument","$ref","$error","addAstNodeRegionWithAssignmentsTo","$textRegion","documentURI","$sourceText","_d","comment","getComment","$comment","createDocumentSegment","assignments","propertyAssignments","findNodesForProperty","containerProperty","containerIndex","propertyName","reviveReference","mutable","getRefNode","fragmentIndex","DefaultServiceRegistry","register","singleton","fileExtensions","diagnosticData","ValidationCategory","DocumentValidator","Disposable","ValidationRegistry","checksRecord","thisObj","category","callbacks","wrapValidationException","addEntry","getChecks","checks","DefaultDocumentValidator","validationRegistry","validation","metadata","validateDocument","processLexingErrors","stopAfterLexingErrors","LexingError","processParsingErrors","stopAfterParsingErrors","ParsingError","processLinkingErrors","stopAfterLinkingErrors","LinkingError","validateAst","_options","lexerError","diagnostic","toDiagnosticSeverity","getSource","parserError","linkingError","info","containerType","toDiagnostic","validationItems","acceptor","getDiagnosticRange","findNodeForKeyword","DefaultAstNodeDescriptionProvider","nameNodeSegment","nameSegmentGetter","nameSegment","selectionSegment","DefaultReferenceDescriptionProvider","createDescriptions","targetNodeDescr","refCstNode","docUri","DefaultAstNodeLocator","segmentSeparator","indexSeparator","containerPath","newSegment","getPathSegment","currentValue","propertyIndex","DefaultConfigurationProvider","_ready","settings","workspaceConfig","ready","params","capabilities","configuration","initialized","languages","section","lang","toSectionName","fetchConfiguration","configToUpdate","conf","updateSectionConfiguration","updateConfiguration","getConfiguration","sectionName","DefaultDocumentBuilder","updateBuildOptions","updateListeners","buildPhaseListeners","buildState","documentBuildWaiters","currentState","build","documents","Validated","IndexedReferences","previousCategories","validationChecks","completed","emitUpdate","buildDocuments","changed","deleted","deletedUri","remove","changedUri","newDocument","allChangedUris","shouldRelink","rebuildDocuments","Linked","listener","changedUris","isAffected","prepareBuild","runCancelable","IndexedContent","updateContent","scopeComputation","ScopeComputation","updateReferences","toBeValidated","shouldValidate","targetState","filtered","notifyBuildPhase","onBuildPhase","waitUntil","uriOrToken","buildDisposable","cancelDisposable","onCancellationRequested","listeners","getBuildOptions","validator","validationSetting","DefaultIndexManager","symbolIndex","symbolByTypeIndex","referenceIndex","astNodePath","targetDocUri","docRefs","refDescr","nodeType","uris","documentUris","getFileDescriptions","indexData","ReferenceDescriptionProvider","DefaultWorkspaceManager","initialBuildOptions","documentBuilder","mutex","WorkspaceLock","folders","workspaceFolders","_params","write","initializeWorkspace","performStartup","collector","loadAdditionalDocuments","wf","getRootFolder","traverseFolder","_folders","_collector","workspaceFolder","folderPath","readDirectory","includeEntry","isDirectory","isFile","_workspaceFolder","DefaultLexer","TokenBuilder","toTokenTypeDictionary","lexerTokens","isTokenTypeDictionary","chevrotainLexer","ChevrotainLexer","chevrotainResult","isIMultiModeLexerDefinition","res","isTokenTypeArray","parseJSDoc","opts","currentLine","currentCharacter","lines","lastCharacter","skipWhitespace","tagRegex","tagMatch","fullMatch","inlineTagMatches","matchAll","inlineTagRegex","buildInlineTokens","getLines","normalizeOptions","startPosition","JSDocCommentImpl","parseJSDocElement","parseJSDocComment","lineIndex","characterIndex","matchIndex","startContent","tagName","endContent","nonWhitespaceRegex","whitespaceEndRegex","parseJSDocTag","parseJSDocText","JSDocLineImpl","inlines","appendEmptyLine","firstToken","lastToken","parseJSDocInline","JSDocTextImpl","parseJSDocLine","inline","tagToken","docLine","JSDocTagImpl","normalizeOption","escaped","getTag","getAllTags","getTags","fillNewlines","trim","toMarkdown","renderTag","toMarkdownDefault","rendered","tag","display","displayStart","renderedLink","renderLink","renderLinkDefault","renderInlineTag","marker","JSDocDocumentationProvider","getDocumentation","normalizedOptions","firstRegex","lastRegex","isJSDoc","documentationLinkRenderer","documentationTagRenderer","findNameInPrecomputedScopes","findNameInGlobalScope","_node","_tag","DefaultCommentProvider","grammarConfig","GrammarConfig","isAstNodeWithComment","multilineCommentRules","DefaultAsyncParser","syncParser","DefaultWorkspaceLock","previousTokenSource","CancellationTokenSource","writeQueue","readQueue","cancelWrite","tokenSource","enqueue","read","queue","deferred","performNextOperation","shift","cancel","DefaultHydrator","grammarElementIdMap","tokenTypeIdMap","dehydrate","dehydrateAstNode","createDehyrationContext","astNodes","cstNodes","dehydrateCstNode","arr","dehydrateReference","getGrammarElementId","hydrate","createHydrationContext","hydrateCstNode","hydrateAstNode","hydrateCstLeafNode","setParent","hydrateReference","num","cstNodeObj","getGrammarElement","hydrated","getTokenType","createGrammarElementIdMap","id","createDefaultCoreModule","DocumentationProvider","nameRegexp","createGrammarConfig","CompletionParser","createCompletionParser","References","serializer","Hydrator","JsonSerializer","createDefaultSharedCoreModule","WorkspaceManager","ConfigurationProvider","inject","module1","module2","module3","module4","module5","module6","module7","module8","module9","_inject","_merge","merge","m1","m2","isProxy","module","injector","proxy","Proxy","deleteProperty","_resolve","ownKeys","Reflect","__requested__","cause","value2","value1","EmptyFileSystemProvider","EmptyFileSystem","minimalGrammarModule","minimalSharedGrammarModule","loadGrammarFromJson","json","createMinimalGrammarServices","isSymbol","baseClone","reWhitespace","reTrimStart","trimmedEndIndex","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","valueOf","baseTrim","isBinary","INFINITY","toNumber","ral_1","require","events_1","Cancelled","shortcutEvent","default","MutableToken","_isCancelled","_emitter","fire","Emitter","_token","InfoTokenBuilder","AbstractMermaidTokenBuilder","__name","InfoModule","CommonValueConverter","createInfoServices","MermaidGeneratedSharedModule","Info","InfoGeneratedModule","objectProto","sources","keysIn","propsIndex","propsLength","eq","PacketTokenBuilder","PacketModule","createPacketServices","Packet","PacketGeneratedModule","parsers","initializers","createInfoServices2","packet","createPacketServices2","pie","createPieServices","createPieServices2","Pie","architecture","createArchitectureServices","createArchitectureServices2","Architecture","gitGraph","createGitGraphServices","createGitGraphServices2","GitGraph","diagramType","MermaidParseError","PieTokenBuilder","PieValueConverter","AbstractMermaidValueConverter","runCustomConverter","_cstNode","PieModule","PieGeneratedModule","toFinite","remainder","__defProp","Branch","Commit","Merge","loadedInfoGrammar","loadedPacketGrammar","loadedPieGrammar","loadedArchitectureGrammar","loadedGitGraphGrammar","MermaidAstReflection","InfoGrammar","PacketGrammar","PieGrammar","ArchitectureGrammar","GitGraphGrammar","InfoLanguageMetaData","PacketLanguageMetaData","PieLanguageMetaData","ArchitectureLanguageMetaData","GitGraphLanguageMetaData","ArchitectureGeneratedModule","GitGraphGeneratedModule","rulesRegexes","ACC_DESCR","ACC_TITLE","TITLE","runCommonConverter","_rule","_input","keywords","ArchitectureTokenBuilder","ArchitectureValueConverter","ArchitectureModule","baseMap","_disposable","CallbackList","bucket","_callbacks","_contexts","foundCallbackWithDifferentContext","invoke","contexts","_event","thisArgs","disposables","onFirstListenerAdd","_noop","onLastListenerRemove","stringArray","elem","baseExtremum","baseLt","GitGraphTokenBuilder","GitGraphModule"],"sourceRoot":""}